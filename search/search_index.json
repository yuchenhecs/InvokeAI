{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"InvokeAI: A Stable Diffusion Toolkit Formerly known as lstein/stable-diffusion # InvokeAI is an implementation of Stable Diffusion, the open source text-to-image and image-to-image generator. It provides a streamlined process with various new features and options to aid the image generation process. It runs on Windows, Mac and Linux machines, and runs on GPU cards with as little as 4 GB or RAM. Quick links : [ Discord Server ] [ Code and Downloads ] [ Bug Reports ] [ Discussion, Ideas & Q&A ] Note This fork is rapidly evolving. Please use the Issues tab to report bugs and make feature requests. Be sure to use the provided templates. They will help aid diagnose issues faster. Installation # This fork is supported across multiple platforms. You can find individual installation instructions below. Linux Windows Macintosh Hardware Requirements # System # You wil need one of the following: An NVIDIA-based graphics card with 4 GB or more VRAM memory. An Apple computer with an M1 chip. Memory # At least 12 GB Main Memory RAM. Disk # At least 12 GB of free disk space for the machine learning model, Python, and all its dependencies. Info If you are have a Nvidia 10xx series card (e.g. the 1080ti), please run the invoke script in full-precision mode as shown below. Similarly, specify full-precision mode on Apple M1 hardware. Precision is auto configured based on the device. If however you encounter errors like expected type Float but found Half or not implemented for Half you can try starting invoke.py with the --precision=float32 flag: ( invokeai ) ~/InvokeAI$ python scripts/invoke.py --full_precision Latest Changes # v2.0.1 (13 October 2022) # fix noisy images at high step count when using k* samplers dream.py script now calls invoke.py module directly rather than via a new python process (which could break the environment) v2.0.0 (9 October 2022) # dream.py script renamed invoke.py . A dream.py script wrapper remains for backward compatibility. Completely new WebGUI - launch with python3 scripts/invoke.py --web Support for inpainting and outpainting img2img runs on all k* samplers Support for negative prompts Support for CodeFormer face reconstruction Support for Textual Inversion on Macintoshes Support in both WebGUI and CLI for post-processing of previously-generated images using facial reconstruction, ESRGAN upscaling, outcropping (similar to DALL-E infinite canvas), and \"embiggen\" upscaling. See the !fix command. New --hires option on invoke> line allows larger images to be created without duplicating elements , at the cost of some performance. New --perlin and --threshold options allow you to add and control variation during image generation (see Thresholding and Perlin Noise Initialization Extensive metadata now written into PNG files, allowing reliable regeneration of images and tweaking of previous settings. Command-line completion in invoke.py now works on Windows, Linux and Mac platforms. Improved command-line completion behavior . New commands added: List command-line history with !history Search command-line history with !search Clear history with !clear Deprecated --full_precision / -F . Simply omit it and invoke.py will auto configure. To switch away from auto use the new flag like --precision=float32 . For older changelogs, please visit the CHANGELOG . Troubleshooting # Please check out our Q&A to get solutions for common installation problems and other issues. Contributing # Anyone who wishes to contribute to this project, whether documentation, features, bug fixes, code cleanup, testing, or code reviews, is very much encouraged to do so. If you are unfamiliar with how to contribute to GitHub projects, here is a Getting Started Guide . A full set of contribution guidelines, along with templates, are in progress, but for now the most important thing is to make your pull request against the \"development\" branch , and not against \"main\". This will help keep public breakage to a minimum and will allow you to propose more radical changes. Contributors # This fork is a combined effort of various people from across the world. Check out the list of all these amazing people . We thank them for their time, hard work and effort. Support # For support, please use this repository's GitHub Issues tracking service. Feel free to send me an email if you use and like the script. Original portions of the software are Copyright \u00a9 2020 Lincoln D. Stein Further Reading # Please see the original README for more information on this software and underlying algorithm, located in the file README-CompViz.md .","title":"Home"},{"location":"#invokeai-a-stable-diffusion-toolkit-formerly-known-as-lsteinstable-diffusion","text":"InvokeAI is an implementation of Stable Diffusion, the open source text-to-image and image-to-image generator. It provides a streamlined process with various new features and options to aid the image generation process. It runs on Windows, Mac and Linux machines, and runs on GPU cards with as little as 4 GB or RAM. Quick links : [ Discord Server ] [ Code and Downloads ] [ Bug Reports ] [ Discussion, Ideas & Q&A ] Note This fork is rapidly evolving. Please use the Issues tab to report bugs and make feature requests. Be sure to use the provided templates. They will help aid diagnose issues faster.","title":"InvokeAI: A Stable Diffusion Toolkit   Formerly known as lstein/stable-diffusion"},{"location":"#installation","text":"This fork is supported across multiple platforms. You can find individual installation instructions below. Linux Windows Macintosh","title":" Installation"},{"location":"#hardware-requirements","text":"","title":" Hardware Requirements"},{"location":"#system","text":"You wil need one of the following: An NVIDIA-based graphics card with 4 GB or more VRAM memory. An Apple computer with an M1 chip.","title":" System"},{"location":"#memory","text":"At least 12 GB Main Memory RAM.","title":" Memory"},{"location":"#disk","text":"At least 12 GB of free disk space for the machine learning model, Python, and all its dependencies. Info If you are have a Nvidia 10xx series card (e.g. the 1080ti), please run the invoke script in full-precision mode as shown below. Similarly, specify full-precision mode on Apple M1 hardware. Precision is auto configured based on the device. If however you encounter errors like expected type Float but found Half or not implemented for Half you can try starting invoke.py with the --precision=float32 flag: ( invokeai ) ~/InvokeAI$ python scripts/invoke.py --full_precision","title":" Disk"},{"location":"#latest-changes","text":"","title":" Latest Changes"},{"location":"#v201-13-october-2022","text":"fix noisy images at high step count when using k* samplers dream.py script now calls invoke.py module directly rather than via a new python process (which could break the environment)","title":"v2.0.1 (13 October 2022)"},{"location":"#v200-9-october-2022","text":"dream.py script renamed invoke.py . A dream.py script wrapper remains for backward compatibility. Completely new WebGUI - launch with python3 scripts/invoke.py --web Support for inpainting and outpainting img2img runs on all k* samplers Support for negative prompts Support for CodeFormer face reconstruction Support for Textual Inversion on Macintoshes Support in both WebGUI and CLI for post-processing of previously-generated images using facial reconstruction, ESRGAN upscaling, outcropping (similar to DALL-E infinite canvas), and \"embiggen\" upscaling. See the !fix command. New --hires option on invoke> line allows larger images to be created without duplicating elements , at the cost of some performance. New --perlin and --threshold options allow you to add and control variation during image generation (see Thresholding and Perlin Noise Initialization Extensive metadata now written into PNG files, allowing reliable regeneration of images and tweaking of previous settings. Command-line completion in invoke.py now works on Windows, Linux and Mac platforms. Improved command-line completion behavior . New commands added: List command-line history with !history Search command-line history with !search Clear history with !clear Deprecated --full_precision / -F . Simply omit it and invoke.py will auto configure. To switch away from auto use the new flag like --precision=float32 . For older changelogs, please visit the CHANGELOG .","title":"v2.0.0 (9 October 2022)"},{"location":"#troubleshooting","text":"Please check out our Q&A to get solutions for common installation problems and other issues.","title":" Troubleshooting"},{"location":"#contributing","text":"Anyone who wishes to contribute to this project, whether documentation, features, bug fixes, code cleanup, testing, or code reviews, is very much encouraged to do so. If you are unfamiliar with how to contribute to GitHub projects, here is a Getting Started Guide . A full set of contribution guidelines, along with templates, are in progress, but for now the most important thing is to make your pull request against the \"development\" branch , and not against \"main\". This will help keep public breakage to a minimum and will allow you to propose more radical changes.","title":" Contributing"},{"location":"#contributors","text":"This fork is a combined effort of various people from across the world. Check out the list of all these amazing people . We thank them for their time, hard work and effort.","title":" Contributors"},{"location":"#support","text":"For support, please use this repository's GitHub Issues tracking service. Feel free to send me an email if you use and like the script. Original portions of the software are Copyright \u00a9 2020 Lincoln D. Stein","title":" Support"},{"location":"#further-reading","text":"Please see the original README for more information on this software and underlying algorithm, located in the file README-CompViz.md .","title":" Further Reading"},{"location":"CHANGELOG/","text":"Changelog # v2.0.1 (13 October 2022) # fix noisy images at high step count when using k* samplers dream.py script now calls invoke.py module directly rather than via a new python process (which could break the environment) v2.0.0 (9 October 2022) # dream.py script renamed invoke.py . A dream.py script wrapper remains for backward compatibility. Completely new WebGUI - launch with python3 scripts/invoke.py --web Support for inpainting and outpainting img2img runs on all k* samplers Support for negative prompts Support for CodeFormer face reconstruction Support for Textual Inversion on Macintoshes Support in both WebGUI and CLI for post-processing of previously-generated images using facial reconstruction, ESRGAN upscaling, outcropping (similar to DALL-E infinite canvas), and \"embiggen\" upscaling. See the !fix command. New --hires option on invoke> line allows larger images to be created without duplicating elements , at the cost of some performance. New --perlin and --threshold options allow you to add and control variation during image generation (see Thresholding and Perlin Noise Initialization ) Extensive metadata now written into PNG files, allowing reliable regeneration of images and tweaking of previous settings. Command-line completion in invoke.py now works on Windows, Linux and Mac platforms. Improved command-line completion behavior New commands added: List command-line history with !history Search command-line history with !search Clear history with !clear Deprecated --full_precision / -F . Simply omit it and invoke.py will auto configure. To switch away from auto use the new flag like --precision=float32 . v1.14 (11 September 2022) # Memory optimizations for small-RAM cards. 512x512 now possible on 4 GB GPUs. Full support for Apple hardware with M1 or M2 chips. Add \"seamless mode\" for circular tiling of image. Generates beautiful effects. ( prixt ). Inpainting support. Improved web server GUI. Lots of code and documentation cleanups. v1.13 (3 September 2022) # Support image variations (see VARIATIONS ( Kevin Gibbons and many contributors and reviewers) Supports a Google Colab notebook for a standalone server running on Google hardware Arturo Mendivil WebUI supports GFPGAN/ESRGAN facial reconstruction and upscaling Kevin Gibbons WebUI supports incremental display of in-progress images during generation Kevin Gibbons A new configuration file scheme that allows new models (including upcoming stable-diffusion-v1.5) to be added without altering the code. ( David Wager ) Can specify --grid on invoke.py command line as the default. Miscellaneous internal bug and stability fixes. Works on M1 Apple hardware. Multiple bug fixes. v1.12 (28 August 2022) # Improved file handling, including ability to read prompts from standard input. (kudos to Yunsaki The web server is now integrated with the invoke.py script. Invoke by adding --web to the invoke.py command arguments. Face restoration and upscaling via GFPGAN and Real-ESGAN are now automatically enabled if the GFPGAN directory is located as a sibling to Stable Diffusion. VRAM requirements are modestly reduced. Thanks to both Blessedcoolant and Oceanswave for their work on this. You can now swap samplers on the invoke> command line. Blessedcoolant v1.11 (26 August 2022) # NEW FEATURE: Support upscaling and face enhancement using the GFPGAN module. (kudos to Oceanswave You now can specify a seed of -1 to use the previous image's seed, -2 to use the seed for the image generated before that, etc. Seed memory only extends back to the previous command, but will work on all images generated with the -n# switch. Variant generation support temporarily disabled pending more general solution. Created a feature branch named yunsaki-morphing-invoke which adds experimental support for iteratively modifying the prompt and its parameters. Please see Pull Request #86 for a synopsis of how this works. Note that when this feature is eventually added to the main branch, it will may be modified significantly. v1.10 (25 August 2022) # A barebones but fully functional interactive web server for online generation of txt2img and img2img. v1.09 (24 August 2022) # A new -v option allows you to generate multiple variants of an initial image in img2img mode. (kudos to Oceanswave . See this discussion in the PR for examples and details on use ) Added ability to personalize text to image generation (kudos to Oceanswave and nicolai256 ) Enabled all of the samplers from k_diffusion v1.08 (24 August 2022) # Escape single quotes on the invoke> command before trying to parse. This avoids parse errors. Removed instruction to get Python3.8 as first step in Windows install. Anaconda3 does it for you. Added bounds checks for numeric arguments that could cause crashes. Cleaned up the copyright and license agreement files. v1.07 (23 August 2022) # Image filenames will now never fill gaps in the sequence, but will be assigned the next higher name in the chosen directory. This ensures that the alphabetic and chronological sort orders are the same. v1.06 (23 August 2022) # Added weighted prompt support contributed by xraxra Example of using weighted prompts to tweak a demonic figure contributed by bmaltais v1.05 (22 August 2022 - after the drop) # Filenames now use the following formats: 000010.95183149.png -- Two files produced by the same command (e.g. -n2), 000010.26742632.png -- distinguished by a different seed. 000011.455191342.01.png -- Two files produced by the same command using 000011.455191342.02.png -- a batch size>1 (e.g. -b2). They have the same seed. 000011.4160627868.grid#1 -4.png -- a grid of four images (-g); the whole grid can be regenerated with the indicated key It should no longer be possible for one image to overwrite another You can use the \"cd\" and \"pwd\" commands at the invoke> prompt to set and retrieve the path of the output directory. v1.04 (22 August 2022 - after the drop) # Updated README to reflect installation of the released weights. Suppressed very noisy and inconsequential warning when loading the frozen CLIP tokenizer. v1.03 (22 August 2022) # The original txt2img and img2img scripts from the CompViz repository have been moved into a subfolder named \"orig_scripts\", to reduce confusion. v1.02 (21 August 2022) # A copy of the prompt and all of its switches and options is now stored in the corresponding image in a tEXt metadata field named \"Dream\". You can read the prompt using scripts/images2prompt.py, or an image editor that allows you to explore the full metadata. Please run \"conda env update\" to load the k_lms dependencies!! v1.01 (21 August 2022) # added k_lms sampling. Please run \"conda env update\" to load the k_lms dependencies!! use half precision arithmetic by default, resulting in faster execution and lower memory requirements Pass argument --full_precision to invoke.py to get slower but more accurate image generation Links # Read Me","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":" Changelog"},{"location":"CHANGELOG/#v201-13-october-2022","text":"fix noisy images at high step count when using k* samplers dream.py script now calls invoke.py module directly rather than via a new python process (which could break the environment)","title":"v2.0.1 (13 October 2022)"},{"location":"CHANGELOG/#v200-9-october-2022","text":"dream.py script renamed invoke.py . A dream.py script wrapper remains for backward compatibility. Completely new WebGUI - launch with python3 scripts/invoke.py --web Support for inpainting and outpainting img2img runs on all k* samplers Support for negative prompts Support for CodeFormer face reconstruction Support for Textual Inversion on Macintoshes Support in both WebGUI and CLI for post-processing of previously-generated images using facial reconstruction, ESRGAN upscaling, outcropping (similar to DALL-E infinite canvas), and \"embiggen\" upscaling. See the !fix command. New --hires option on invoke> line allows larger images to be created without duplicating elements , at the cost of some performance. New --perlin and --threshold options allow you to add and control variation during image generation (see Thresholding and Perlin Noise Initialization ) Extensive metadata now written into PNG files, allowing reliable regeneration of images and tweaking of previous settings. Command-line completion in invoke.py now works on Windows, Linux and Mac platforms. Improved command-line completion behavior New commands added: List command-line history with !history Search command-line history with !search Clear history with !clear Deprecated --full_precision / -F . Simply omit it and invoke.py will auto configure. To switch away from auto use the new flag like --precision=float32 .","title":"v2.0.0 (9 October 2022)"},{"location":"CHANGELOG/#v114-11-september-2022","text":"Memory optimizations for small-RAM cards. 512x512 now possible on 4 GB GPUs. Full support for Apple hardware with M1 or M2 chips. Add \"seamless mode\" for circular tiling of image. Generates beautiful effects. ( prixt ). Inpainting support. Improved web server GUI. Lots of code and documentation cleanups.","title":"v1.14 (11 September 2022)"},{"location":"CHANGELOG/#v113-3-september-2022","text":"Support image variations (see VARIATIONS ( Kevin Gibbons and many contributors and reviewers) Supports a Google Colab notebook for a standalone server running on Google hardware Arturo Mendivil WebUI supports GFPGAN/ESRGAN facial reconstruction and upscaling Kevin Gibbons WebUI supports incremental display of in-progress images during generation Kevin Gibbons A new configuration file scheme that allows new models (including upcoming stable-diffusion-v1.5) to be added without altering the code. ( David Wager ) Can specify --grid on invoke.py command line as the default. Miscellaneous internal bug and stability fixes. Works on M1 Apple hardware. Multiple bug fixes.","title":"v1.13 (3 September 2022)"},{"location":"CHANGELOG/#v112-28-august-2022","text":"Improved file handling, including ability to read prompts from standard input. (kudos to Yunsaki The web server is now integrated with the invoke.py script. Invoke by adding --web to the invoke.py command arguments. Face restoration and upscaling via GFPGAN and Real-ESGAN are now automatically enabled if the GFPGAN directory is located as a sibling to Stable Diffusion. VRAM requirements are modestly reduced. Thanks to both Blessedcoolant and Oceanswave for their work on this. You can now swap samplers on the invoke> command line. Blessedcoolant","title":"v1.12 (28 August 2022)"},{"location":"CHANGELOG/#v111-26-august-2022","text":"NEW FEATURE: Support upscaling and face enhancement using the GFPGAN module. (kudos to Oceanswave You now can specify a seed of -1 to use the previous image's seed, -2 to use the seed for the image generated before that, etc. Seed memory only extends back to the previous command, but will work on all images generated with the -n# switch. Variant generation support temporarily disabled pending more general solution. Created a feature branch named yunsaki-morphing-invoke which adds experimental support for iteratively modifying the prompt and its parameters. Please see Pull Request #86 for a synopsis of how this works. Note that when this feature is eventually added to the main branch, it will may be modified significantly.","title":"v1.11 (26 August 2022)"},{"location":"CHANGELOG/#v110-25-august-2022","text":"A barebones but fully functional interactive web server for online generation of txt2img and img2img.","title":"v1.10 (25 August 2022)"},{"location":"CHANGELOG/#v109-24-august-2022","text":"A new -v option allows you to generate multiple variants of an initial image in img2img mode. (kudos to Oceanswave . See this discussion in the PR for examples and details on use ) Added ability to personalize text to image generation (kudos to Oceanswave and nicolai256 ) Enabled all of the samplers from k_diffusion","title":"v1.09 (24 August 2022)"},{"location":"CHANGELOG/#v108-24-august-2022","text":"Escape single quotes on the invoke> command before trying to parse. This avoids parse errors. Removed instruction to get Python3.8 as first step in Windows install. Anaconda3 does it for you. Added bounds checks for numeric arguments that could cause crashes. Cleaned up the copyright and license agreement files.","title":"v1.08 (24 August 2022)"},{"location":"CHANGELOG/#v107-23-august-2022","text":"Image filenames will now never fill gaps in the sequence, but will be assigned the next higher name in the chosen directory. This ensures that the alphabetic and chronological sort orders are the same.","title":"v1.07 (23 August 2022)"},{"location":"CHANGELOG/#v106-23-august-2022","text":"Added weighted prompt support contributed by xraxra Example of using weighted prompts to tweak a demonic figure contributed by bmaltais","title":"v1.06 (23 August 2022)"},{"location":"CHANGELOG/#v105-22-august-2022-after-the-drop","text":"Filenames now use the following formats: 000010.95183149.png -- Two files produced by the same command (e.g. -n2), 000010.26742632.png -- distinguished by a different seed. 000011.455191342.01.png -- Two files produced by the same command using 000011.455191342.02.png -- a batch size>1 (e.g. -b2). They have the same seed. 000011.4160627868.grid#1 -4.png -- a grid of four images (-g); the whole grid can be regenerated with the indicated key It should no longer be possible for one image to overwrite another You can use the \"cd\" and \"pwd\" commands at the invoke> prompt to set and retrieve the path of the output directory.","title":"v1.05 (22 August 2022 - after the drop)"},{"location":"CHANGELOG/#v104-22-august-2022-after-the-drop","text":"Updated README to reflect installation of the released weights. Suppressed very noisy and inconsequential warning when loading the frozen CLIP tokenizer.","title":"v1.04 (22 August 2022 - after the drop)"},{"location":"CHANGELOG/#v103-22-august-2022","text":"The original txt2img and img2img scripts from the CompViz repository have been moved into a subfolder named \"orig_scripts\", to reduce confusion.","title":"v1.03 (22 August 2022)"},{"location":"CHANGELOG/#v102-21-august-2022","text":"A copy of the prompt and all of its switches and options is now stored in the corresponding image in a tEXt metadata field named \"Dream\". You can read the prompt using scripts/images2prompt.py, or an image editor that allows you to explore the full metadata. Please run \"conda env update\" to load the k_lms dependencies!!","title":"v1.02 (21 August 2022)"},{"location":"CHANGELOG/#v101-21-august-2022","text":"added k_lms sampling. Please run \"conda env update\" to load the k_lms dependencies!! use half precision arithmetic by default, resulting in faster execution and lower memory requirements Pass argument --full_precision to invoke.py to get slower but more accurate image generation","title":"v1.01 (21 August 2022)"},{"location":"CHANGELOG/#links","text":"Read Me","title":"Links"},{"location":"assets/preflight-checks/outputs/invoke_log/","text":"000001.1863159593.png # banana sushi -s 50 -S 1863159593 -W 512 -H 512 -C 7.5 -A k_lms 000002.1151955949.png # banana sushi -s 50 -S 1151955949 -W 512 -H 512 -C 7.5 -A plms 000003.2736230502.png # banana sushi -s 50 -S 2736230502 -W 512 -H 512 -C 7.5 -A ddim 000004.42.png # banana sushi -s 50 -S 42 -W 512 -H 512 -C 7.5 -A k_lms 000005.42.png # banana sushi -s 50 -S 42 -W 512 -H 512 -C 7.5 -A k_lms 000006.478163327.png # banana sushi -s 50 -S 478163327 -W 640 -H 448 -C 7.5 -A k_lms 000007.2407640369.png # banana sushi -s 50 -S 42 -W 512 -H 512 -C 7.5 -A k_lms -V 2407640369:0.1 000008.2772421987.png # banana sushi -s 50 -S 42 -W 512 -H 512 -C 7.5 -A k_lms -V 2772421987:0.1 000009.3532317557.png # banana sushi -s 50 -S 42 -W 512 -H 512 -C 7.5 -A k_lms -V 3532317557:0.1 000010.2028635318.png # banana sushi -s 50 -S 2028635318 -W 512 -H 512 -C 7.5 -A k_lms 000011.1111168647.png # pond with waterlillies -s 50 -S 1111168647 -W 512 -H 512 -C 7.5 -A k_lms 000012.1476370516.png # pond with waterlillies -s 50 -S 1476370516 -W 512 -H 512 -C 7.5 -A k_lms 000013.4281108706.png # banana sushi -s 50 -S 4281108706 -W 960 -H 960 -C 7.5 -A k_lms 000014.2396987386.png # old sea captain with crow on shoulder -s 50 -S 2396987386 -W 512 -H 512 -C 7.5 -I docs/assets/preflight-checks/inputs/Lincoln-and-Parrot-512.png -A k_lms -f 0.75 000015.1252923272.png # old sea captain with crow on shoulder -s 50 -S 1252923272 -W 512 -H 512 -C 7.5 -I docs/assets/preflight-checks/inputs/Lincoln-and-Parrot-512-transparent.png -A k_lms -f 0.75 000016.2633891320.png # old sea captain with crow on shoulder -s 50 -S 2633891320 -W 512 -H 512 -C 7.5 -I docs/assets/preflight-checks/inputs/Lincoln-and-Parrot-512.png -A plms -f 0.75 000017.1134411920.png # old sea captain with crow on shoulder -s 50 -S 1134411920 -W 512 -H 512 -C 7.5 -I docs/assets/preflight-checks/inputs/Lincoln-and-Parrot-512.png -A k_euler_a -f 0.75 000018.47.png # big red dog playing with cat -s 50 -S 47 -W 512 -H 512 -C 7.5 -A k_lms 000019.47.png # big red++++ dog playing with cat -s 50 -S 47 -W 512 -H 512 -C 7.5 -A k_lms 000020.47.png # big red dog playing with cat+++ -s 50 -S 47 -W 512 -H 512 -C 7.5 -A k_lms 000021.47.png # big (red dog).swap(tiger) playing with cat -s 50 -S 47 -W 512 -H 512 -C 7.5 -A k_lms 000022.47.png # dog:1,cat:2 -s 50 -S 47 -W 512 -H 512 -C 7.5 -A k_lms 000023.47.png # dog:2,cat:1 -s 50 -S 47 -W 512 -H 512 -C 7.5 -A k_lms 000024.1029061431.png # medusa with cobras -s 50 -S 1029061431 -W 512 -H 512 -C 7.5 -I docs/assets/preflight-checks/inputs/curly.png -A k_lms -f 0.75 -tm hair 000025.1284519352.png # bearded man -s 50 -S 1284519352 -W 512 -H 512 -C 7.5 -I docs/assets/preflight-checks/inputs/curly.png -A k_lms -f 0.75 -tm face curly.942491079.gfpgan.png # !fix ./docs/assets/preflight-checks/inputs/curly.png -s 50 -S 942491079 -W 512 -H 512 -C 7.5 -A k_lms -G 0.8 -ft gfpgan -U 2.0 0.75 curly.942491079.outcrop.png # !fix ./docs/assets/preflight-checks/inputs/curly.png -s 50 -S 942491079 -W 512 -H 512 -C 7.5 -A k_lms -c top 64 curly.942491079.outpaint.png # !fix ./docs/assets/preflight-checks/inputs/curly.png -s 50 -S 942491079 -W 512 -H 512 -C 7.5 -A k_lms -D top 64 curly.942491079.outcrop-01.png # !fix ./docs/assets/preflight-checks/inputs/curly.png -s 50 -S 942491079 -W 512 -H 512 -C 7.5 -A k_lms -c top 64","title":"Invoke log"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000011863159593png","text":"banana sushi -s 50 -S 1863159593 -W 512 -H 512 -C 7.5 -A k_lms","title":"000001.1863159593.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000021151955949png","text":"banana sushi -s 50 -S 1151955949 -W 512 -H 512 -C 7.5 -A plms","title":"000002.1151955949.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000032736230502png","text":"banana sushi -s 50 -S 2736230502 -W 512 -H 512 -C 7.5 -A ddim","title":"000003.2736230502.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#00000442png","text":"banana sushi -s 50 -S 42 -W 512 -H 512 -C 7.5 -A k_lms","title":"000004.42.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#00000542png","text":"banana sushi -s 50 -S 42 -W 512 -H 512 -C 7.5 -A k_lms","title":"000005.42.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#000006478163327png","text":"banana sushi -s 50 -S 478163327 -W 640 -H 448 -C 7.5 -A k_lms","title":"000006.478163327.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000072407640369png","text":"banana sushi -s 50 -S 42 -W 512 -H 512 -C 7.5 -A k_lms -V 2407640369:0.1","title":"000007.2407640369.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000082772421987png","text":"banana sushi -s 50 -S 42 -W 512 -H 512 -C 7.5 -A k_lms -V 2772421987:0.1","title":"000008.2772421987.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000093532317557png","text":"banana sushi -s 50 -S 42 -W 512 -H 512 -C 7.5 -A k_lms -V 3532317557:0.1","title":"000009.3532317557.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000102028635318png","text":"banana sushi -s 50 -S 2028635318 -W 512 -H 512 -C 7.5 -A k_lms","title":"000010.2028635318.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000111111168647png","text":"pond with waterlillies -s 50 -S 1111168647 -W 512 -H 512 -C 7.5 -A k_lms","title":"000011.1111168647.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000121476370516png","text":"pond with waterlillies -s 50 -S 1476370516 -W 512 -H 512 -C 7.5 -A k_lms","title":"000012.1476370516.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000134281108706png","text":"banana sushi -s 50 -S 4281108706 -W 960 -H 960 -C 7.5 -A k_lms","title":"000013.4281108706.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000142396987386png","text":"old sea captain with crow on shoulder -s 50 -S 2396987386 -W 512 -H 512 -C 7.5 -I docs/assets/preflight-checks/inputs/Lincoln-and-Parrot-512.png -A k_lms -f 0.75","title":"000014.2396987386.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000151252923272png","text":"old sea captain with crow on shoulder -s 50 -S 1252923272 -W 512 -H 512 -C 7.5 -I docs/assets/preflight-checks/inputs/Lincoln-and-Parrot-512-transparent.png -A k_lms -f 0.75","title":"000015.1252923272.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000162633891320png","text":"old sea captain with crow on shoulder -s 50 -S 2633891320 -W 512 -H 512 -C 7.5 -I docs/assets/preflight-checks/inputs/Lincoln-and-Parrot-512.png -A plms -f 0.75","title":"000016.2633891320.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000171134411920png","text":"old sea captain with crow on shoulder -s 50 -S 1134411920 -W 512 -H 512 -C 7.5 -I docs/assets/preflight-checks/inputs/Lincoln-and-Parrot-512.png -A k_euler_a -f 0.75","title":"000017.1134411920.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#00001847png","text":"big red dog playing with cat -s 50 -S 47 -W 512 -H 512 -C 7.5 -A k_lms","title":"000018.47.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#00001947png","text":"big red++++ dog playing with cat -s 50 -S 47 -W 512 -H 512 -C 7.5 -A k_lms","title":"000019.47.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#00002047png","text":"big red dog playing with cat+++ -s 50 -S 47 -W 512 -H 512 -C 7.5 -A k_lms","title":"000020.47.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#00002147png","text":"big (red dog).swap(tiger) playing with cat -s 50 -S 47 -W 512 -H 512 -C 7.5 -A k_lms","title":"000021.47.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#00002247png","text":"dog:1,cat:2 -s 50 -S 47 -W 512 -H 512 -C 7.5 -A k_lms","title":"000022.47.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#00002347png","text":"dog:2,cat:1 -s 50 -S 47 -W 512 -H 512 -C 7.5 -A k_lms","title":"000023.47.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000241029061431png","text":"medusa with cobras -s 50 -S 1029061431 -W 512 -H 512 -C 7.5 -I docs/assets/preflight-checks/inputs/curly.png -A k_lms -f 0.75 -tm hair","title":"000024.1029061431.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#0000251284519352png","text":"bearded man -s 50 -S 1284519352 -W 512 -H 512 -C 7.5 -I docs/assets/preflight-checks/inputs/curly.png -A k_lms -f 0.75 -tm face","title":"000025.1284519352.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#curly942491079gfpganpng","text":"!fix ./docs/assets/preflight-checks/inputs/curly.png -s 50 -S 942491079 -W 512 -H 512 -C 7.5 -A k_lms -G 0.8 -ft gfpgan -U 2.0 0.75","title":"curly.942491079.gfpgan.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#curly942491079outcroppng","text":"!fix ./docs/assets/preflight-checks/inputs/curly.png -s 50 -S 942491079 -W 512 -H 512 -C 7.5 -A k_lms -c top 64","title":"curly.942491079.outcrop.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#curly942491079outpaintpng","text":"!fix ./docs/assets/preflight-checks/inputs/curly.png -s 50 -S 942491079 -W 512 -H 512 -C 7.5 -A k_lms -D top 64","title":"curly.942491079.outpaint.png"},{"location":"assets/preflight-checks/outputs/invoke_log/#curly942491079outcrop-01png","text":"!fix ./docs/assets/preflight-checks/inputs/curly.png -s 50 -S 942491079 -W 512 -H 512 -C 7.5 -A k_lms -c top 64","title":"curly.942491079.outcrop-01.png"},{"location":"features/CLI/","text":"CLI # Interactive Command Line Interface # The invoke.py script, located in scripts/ , provides an interactive interface to image generation similar to the \"invoke mothership\" bot that Stable AI provided on its Discord server. Unlike the txt2img.py and img2img.py scripts provided in the original CompVis/stable-diffusion source code repository, the time-consuming initialization of the AI model initialization only happens once. After that image generation from the command-line interface is very fast. The script uses the readline library to allow for in-line editing, command history ( Up and Down ), autocompletion, and more. To help keep track of which prompts generated which images, the script writes a log file of image names and prompts to the selected output directory. In addition, as of version 1.02, it also writes the prompt into the PNG file's metadata where it can be retrieved using scripts/images2prompt.py The script is confirmed to work on Linux, Windows and Mac systems. Note This script runs from the command-line or can be used as a Web application. The Web GUI is currently rudimentary, but a much better replacement is on its way. ( invokeai ) ~/stable-diffusion$ python3 ./scripts/invoke.py * Initializing, be patient... Loading model from models/ldm/text2img-large/model.ckpt ( ...more initialization messages... ) * Initialization done ! Awaiting your command... invoke> ashley judd riding a camel -n2 -s150 Outputs: outputs/img-samples/00009.png: \"ashley judd riding a camel\" -n2 -s150 -S 416354203 outputs/img-samples/00010.png: \"ashley judd riding a camel\" -n2 -s150 -S 1362479620 invoke> \"there's a fly in my soup\" -n6 -g outputs/img-samples/00011.png: \"there's a fly in my soup\" -n6 -g -S 2685670268 seeds for individual rows: [ 2685670268 , 1216708065 , 2335773498 , 822223658 , 714542046 , 3395302430 ] invoke> q # this shows how to retrieve the prompt stored in the saved image's metadata ( invokeai ) ~/stable-diffusion$ python ./scripts/images2prompt.py outputs/img_samples/*.png 00009 .png: \"ashley judd riding a camel\" -s150 -S 416354203 00010 .png: \"ashley judd riding a camel\" -s150 -S 1362479620 00011 .png: \"there's a fly in my soup\" -n6 -g -S 2685670268 The invoke> prompt's arguments are pretty much identical to those used in the Discord bot, except you don't need to type !invoke (it doesn't hurt if you do). A significant change is that creation of individual images is now the default unless --grid ( -g ) is given. A full list is given in List of prompt arguments . Arguments # The script itself also recognizes a series of command-line switches that will change important global defaults, such as the directory for image outputs and the location of the model weight files. List of arguments recognized at the command line # These command-line arguments can be passed to invoke.py when you first run it from the Windows, Mac or Linux command line. Some set defaults that can be overridden on a per-prompt basis (see List of prompt arguments . Others Argument Shortcut Default Description --help -h Print a concise help message. --outdir <path> -o<path> outputs/img_samples Location for generated images. --prompt_as_dir -p False Name output directories using the prompt text. --from_file <path> None Read list of prompts from a file. Use - to read from standard input --model <modelname> stable-diffusion-1.4 Loads model specified in configs/models.yaml. Currently one of \"stable-diffusion-1.4\" or \"laion400m\" --full_precision -F False Run in slower full-precision mode. Needed for Macintosh M1/M2 hardware and some older video cards. --png_compression <0-9> -z<0-9> 6 Select level of compression for output files, from 0 (no compression) to 9 (max compression) --safety-checker False Activate safety checker for NSFW and other potentially disturbing imagery --web False Start in web server mode --host <ip addr> localhost Which network interface web server should listen on. Set to 0.0.0.0 to listen on any. --port <port> 9090 Which port web server should listen for requests on. --config <path> configs/models.yaml Configuration file for models and their weights. --iterations <int> -n<int> 1 How many images to generate per prompt. --grid -g False Save all image series as a grid rather than individually. --sampler <sampler> -A<sampler> k_lms Sampler to use. Use -h to get list of available samplers. --seamless False Create interesting effects by tiling elements of the image. --embedding_path <path> None Path to pre-trained embedding manager checkpoints, for custom models --gfpgan_dir src/gfpgan Path to where GFPGAN is installed. --gfpgan_model_path experiments/pretrained_models/GFPGANv1.4.pth Path to GFPGAN model file, relative to --gfpgan_dir . --free_gpu_mem False Free GPU memory after sampling, to allow image decoding and saving in low VRAM conditions --precision auto Set model precision, default is selected by device. Options: auto, float32, float16, autocast These arguments are deprecated but still work Argument Shortcut Default Description --weights <path> None Pth to weights file; use --model stable-diffusion-1.4 instead --laion400m -l False Use older LAION400m weights; use --model=laion400m instead Tip On Windows systems, you may run into problems when passing the invoke script standard backslashed path names because the Python interpreter treats \"\\\" as an escape. You can either double your slashes (ick): C:\\\\path\\\\to\\\\my\\\\file , or use Linux/Mac style forward slashes (better): C:/path/to/my/file . List of prompt arguments # After the invoke.py script initializes, it will present you with a invoke> prompt. Here you can enter information to generate images from text ( txt2img ), to embellish an existing image or sketch ( img2img ), or to selectively alter chosen regions of the image ( inpainting ). txt2img # invoke> waterfall and rainbow -W640 -H480 This will create the requested image with the dimensions 640 (width) and 480 (height). Here are the invoke> command that apply to txt2img: Argument Shortcut Default Description \"my prompt\" Text prompt to use. The quotation marks are optional. --width <int> -W<int> 512 Width of generated image --height <int> -H<int> 512 Height of generated image --iterations <int> -n<int> 1 How many images to generate from this prompt --steps <int> -s<int> 50 How many steps of refinement to apply --cfg_scale <float> -C<float> 7.5 How hard to try to match the prompt to the generated image; any number greater than 1.0 works, but the useful range is roughly 5.0 to 20.0 --seed <int> -S<int> None Set the random seed for the next series of images. This can be used to recreate an image generated previously. --sampler <sampler> -A<sampler> k_lms Sampler to use. Use -h to get list of available samplers. --karras_max <int> 29 When using k_* samplers, set the maximum number of steps before shifting from using the Karras noise schedule (good for low step counts) to the LatentDiffusion noise schedule (good for high step counts) This value is sticky. [29] --hires_fix Larger images often have duplication artefacts. This option suppresses duplicates by generating the image at low res, and then using img2img to increase the resolution --png_compression <0-9> -z<0-9> 6 Select level of compression for output files, from 0 (no compression) to 9 (max compression) --grid -g False Turn on grid mode to return a single image combining all the images generated by this prompt --individual -i True Turn off grid mode (deprecated; leave off --grid instead) --outdir <path> -o<path> outputs/img_samples Temporarily change the location of these images --seamless False Activate seamless tiling for interesting effects --seamless_axes x,y Specify which axes to use circular convolution on. --log_tokenization -t False Display a color-coded list of the parsed tokens derived from the prompt --skip_normalization -x False Weighted subprompts will not be normalized. See Weighted Prompts --upscale <int> <float> -U <int> <float> -U 1 0.75 Upscale image by magnification factor (2, 4), and set strength of upscaling (0.0-1.0). If strength not set, will default to 0.75. --facetool_strength <float> -G <float> -G0 Fix faces (defaults to using the GFPGAN algorithm); argument indicates how hard the algorithm should try (0.0-1.0) --facetool <name> -ft <name> -ft gfpgan Select face restoration algorithm to use: gfpgan, codeformer --codeformer_fidelity -cf <float> 0.75 Used along with CodeFormer. Takes values between 0 and 1. 0 produces high quality but low accuracy. 1 produces high accuracy but low quality --save_original -save_orig False When upscaling or fixing faces, this will cause the original image to be saved rather than replaced. --variation <float> -v<float> 0.0 Add a bit of noise (0.0=none, 1.0=high) to the image in order to generate a series of variations. Usually used in combination with -S<seed> and -n<int> to generate a series a riffs on a starting image. See Variations . --with_variations <pattern> None Combine two or more variations. See Variations for now to use this. --save_intermediates <n> None Save the image from every nth step into an \"intermediates\" folder inside the output directory Note that the width and height of the image must be multiples of 64. You can provide different values, but they will be rounded down to the nearest multiple of 64. This is an example of img2img: # invoke> waterfall and rainbow -I./vacation-photo.png -W640 -H480 --fit This will modify the indicated vacation photograph by making it more like the prompt. Results will vary greatly depending on what is in the image. We also ask to --fit the image into a box no bigger than 640x480. Otherwise the image size will be identical to the provided photo and you may run out of memory if it is large. In addition to the command-line options recognized by txt2img, img2img accepts additional options: Argument Shortcut Default Description --init_img <path> -I<path> None Path to the initialization image --fit -F False Scale the image to fit into the specified -H and -W dimensions --strength <float> -s<float> 0.75 How hard to try to match the prompt to the initial image. Ranges from 0.0-0.99, with higher values replacing the initial image completely. inpainting # invoke> waterfall and rainbow -I./vacation-photo.png -M./vacation-mask.png -W640 -H480 --fit This will do the same thing as img2img, but image alterations will only occur within transparent areas defined by the mask file specified by -M . You may also supply just a single initial image with the areas to overpaint made transparent, but you must be careful not to destroy the pixels underneath when you create the transparent areas. See Inpainting for details. inpainting accepts all the arguments used for txt2img and img2img, as well as the --mask (-M) and --text_mask (-tm) arguments: Argument Shortcut Default Description --init_mask <path> -M<path> None Path to an image the same size as the initial_image, with areas for inpainting made transparent. --invert_mask False If true, invert the mask so that transparent areas are opaque and vice versa. --text_mask <prompt> [<float>] -tm <prompt> [<float>] Create a mask from a text prompt describing part of the image The mask may either be an image with transparent areas, in which case the inpainting will occur in the transparent areas only, or a black and white image, in which case all black areas will be painted into. --text_mask (short form -tm ) is a way to generate a mask using a text description of the part of the image to replace. For example, if you have an image of a breakfast plate with a bagel, toast and scrambled eggs, you can selectively mask the bagel and replace it with a piece of cake this way: invoke> a piece of cake -I /path/to/breakfast.png -tm bagel The algorithm uses clipseg to classify different regions of the image. The classifier puts out a confidence score for each region it identifies. Generally regions that score above 0.5 are reliable, but if you are getting too much or too little masking you can adjust the threshold down (to get more mask), or up (to get less). In this example, by passing -tm a higher value, we are insisting on a more stringent classification. invoke> a piece of cake -I /path/to/breakfast.png -tm bagel 0.6 Other Commands # The CLI offers a number of commands that begin with \"!\". Postprocessing images # To postprocess a file using face restoration or upscaling, use the !fix command. !fix # This command runs a post-processor on a previously-generated image. It takes a PNG filename or path and applies your choice of the -U , -G , or --embiggen switches in order to fix faces or upscale. If you provide a filename, the script will look for it in the current output directory. Otherwise you can provide a full or partial path to the desired file. Some examples: Upscale to 4X its original size and fix faces using codeformer invoke> !fix 0000045 .4829112.png -G1 -U4 -ft codeformer Use the GFPGAN algorithm to fix faces, then upscale to 3X using --embiggen invoke> !fix 0000045 .4829112.png -G0.8 -ft gfpgan >> fixing outputs/img-samples/0000045.4829112.png >> retrieved seed 4829112 and prompt \"boy enjoying a banana split\" >> GFPGAN - Restoring Faces for image seed:4829112 Outputs: [ 1 ] outputs/img-samples/000017.4829112.gfpgan-00.png: !fix \"outputs/img-samples/0000045.4829112.png\" -s 50 -S -W 512 -H 512 -C 7 .5 -A k_lms -G 0 .8 !mask # This command takes an image, a text prompt, and uses the clipseg algorithm to automatically generate a mask of the area that matches the text prompt. It is useful for debugging the text masking process prior to inpainting with the --text_mask argument. See [INPAINTING.md] for details. Model selection and importation # The CLI allows you to add new models on the fly, as well as to switch among them rapidly without leaving the script. !models # This prints out a list of the models defined in `config/models.yaml'. The active model is bold-faced Example: laion400m not loaded stable-diffusion-1.4 active Stable Diffusion v1.4 waifu-diffusion not loaded Waifu Diffusion v1.3 !switch # This quickly switches from one model to another without leaving the CLI script. invoke.py uses a memory caching system; once a model has been loaded, switching back and forth is quick. The following example shows this in action. Note how the second column of the !models table changes to cached after a model is first loaded, and that the long initialization step is not needed when loading a cached model. invoke> !models laion400m not loaded stable-diffusion-1.4 cached Stable Diffusion v1.4 waifu-diffusion active Waifu Diffusion v1.3 invoke> !switch waifu-diffusion >> Caching model stable-diffusion-1.4 in system RAM >> Loading waifu-diffusion from models/ldm/stable-diffusion-v1/model-epoch08-float16.ckpt | LatentDiffusion: Running in eps-prediction mode | DiffusionWrapper has 859.52 M params. | Making attention of type 'vanilla' with 512 in_channels | Working with z of shape (1, 4, 32, 32) = 4096 dimensions. | Making attention of type 'vanilla' with 512 in_channels | Using faster float16 precision >> Model loaded in 18.24s >> Max VRAM used to load the model: 2.17G >> Current VRAM usage:2.17G >> Setting Sampler to k_lms invoke> !models laion400m not loaded stable-diffusion-1.4 cached Stable Diffusion v1.4 waifu-diffusion active Waifu Diffusion v1.3 invoke> !switch stable-diffusion-1.4 >> Caching model waifu-diffusion in system RAM >> Retrieving model stable-diffusion-1.4 from system RAM cache >> Setting Sampler to k_lms invoke> !models laion400m not loaded stable-diffusion-1.4 active Stable Diffusion v1.4 waifu-diffusion cached Waifu Diffusion v1.3 !import_model # This command imports a new model weights file into InvokeAI, makes it available for image generation within the script, and writes out the configuration for the model into config/models.yaml for use in subsequent sessions. Provide !import_model with the path to a weights file ending in .ckpt . If you type a partial path and press tab, the CLI will autocomplete. Although it will also autocomplete to .vae files, these are not currenty supported (but will be soon). When you hit return, the CLI will prompt you to fill in additional information about the model, including the short name you wish to use for it with the !switch command, a brief description of the model, the default image width and height to use with this model, and the model's configuration file. The latter three fields are automatically filled with reasonable defaults. In the example below, the bold-faced text shows what the user typed in with the exception of the width, height and configuration file paths, which were filled in automatically. Example: invoke> !import_model models/ldm/stable-diffusion-v1/model-epoch08-float16.ckpt >> Model import in process. Please enter the values needed to configure this model: Name for this model: waifu-diffusion Description of this model: Waifu Diffusion v1.3 Configuration file for this model: configs/stable-diffusion/v1-inference.yaml Default image width: 512 Default image height: 512 >> New configuration: waifu-diffusion: config: configs/stable-diffusion/v1-inference.yaml description: Waifu Diffusion v1.3 height: 512 weights: models/ldm/stable-diffusion-v1/model-epoch08-float16.ckpt width: 512 OK to import [n]? y >> Caching model stable-diffusion-1.4 in system RAM >> Loading waifu-diffusion from models/ldm/stable-diffusion-v1/model-epoch08-float16.ckpt | LatentDiffusion: Running in eps-prediction mode | DiffusionWrapper has 859.52 M params. | Making attention of type 'vanilla' with 512 in_channels | Working with z of shape (1, 4, 32, 32) = 4096 dimensions. | Making attention of type 'vanilla' with 512 in_channels | Using faster float16 precision invoke> !edit_model # The !edit_model command can be used to modify a model that is already defined in config/models.yaml . Call it with the short name of the model you wish to modify, and it will allow you to modify the model's description , weights and other fields. Example: invoke> !edit_model waifu-diffusion >> Editing model waifu-diffusion from configuration file ./configs/models.yaml description: Waifu diffusion v1.4beta weights: models/ldm/stable-diffusion-v1/ model-epoch10-float16.ckpt config: configs/stable-diffusion/v1-inference.yaml width: 512 height: 512 >> New configuration: waifu-diffusion: config: configs/stable-diffusion/v1-inference.yaml description: Waifu diffusion v1.4beta weights: models/ldm/stable-diffusion-v1/model-epoch10-float16.ckpt height: 512 width: 512 OK to import [n]? y >> Caching model stable-diffusion-1.4 in system RAM >> Loading waifu-diffusion from models/ldm/stable-diffusion-v1/model-epoch10-float16.ckpt ... ======= invoke> !fix 000017.4829112.gfpgan-00.png --embiggen 3 ...lots of text... Outputs: [2] outputs/img-samples/000018.2273800735.embiggen-00.png: !fix \"outputs/img-samples/000017.243781548.gfpgan-00.png\" -s 50 -S 2273800735 -W 512 -H 512 -C 7.5 -A k_lms --embiggen 3.0 0.75 0.25 ``` History processing # The CLI provides a series of convenient commands for reviewing previous actions, retrieving them, modifying them, and re-running them. !history # The invoke script keeps track of all the commands you issue during a session, allowing you to re-run them. On Mac and Linux systems, it also writes the command-line history out to disk, giving you access to the most recent 1000 commands issued. The !history command will return a numbered list of all the commands issued during the session (Windows), or the most recent 1000 commands (Mac|Linux). You can then repeat a command by using the command !NNN , where \"NNN\" is the history line number. For example: invoke> !history ... [ 14 ] happy woman sitting under tree wearing broad hat and flowing garment [ 15 ] beautiful woman sitting under tree wearing broad hat and flowing garment [ 18 ] beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 [ 20 ] watercolor of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194 [ 21 ] surrealist painting of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194 ... invoke> !20 invoke> watercolor of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194 !fetch # This command retrieves the generation parameters from a previously generated image and either loads them into the command line (Linux|Mac), or prints them out in a comment for copy-and-paste (Windows). You may provide either the name of a file in the current output directory, or a full file path. Specify path to a folder with image png files, and wildcard *.png to retrieve the dream command used to generate the images, and save them to a file commands.txt for further processing. This example loads the generation command for a single png file: invoke> !fetch 0000015 .8929913.png # the script returns the next line, ready for editing and running: invoke> a fantastic alien landscape -W 576 -H 512 -s 60 -A plms -C 7 .5 This one fetches the generation commands from a batch of files and stores them into selected.txt : invoke> !fetch outputs \\s elected-imgs \\* .png selected.txt !replay # This command replays a text file generated by !fetch or created manually invoke> !replay outputs\\selected-imgs\\selected.txt Note that these commands may behave unexpectedly if given a PNG file that was not generated by InvokeAI. !search # This is similar to !history but it only returns lines that contain search string . For example: invoke> !search surreal [ 21 ] surrealist painting of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194 !clear # This clears the search history from memory and disk. Be advised that this operation is irreversible and does not issue any warnings! Command-line editing and completion # The command-line offers convenient history tracking, editing, and command completion. To scroll through previous commands and potentially edit/reuse them, use the Up and Down keys. To edit the current command, use the Left and Right keys to position the cursor, and then Backspace , Del or insert characters. To move to the very beginning of the command, type Ctrl + A (or Cmd + A on the Mac) To move to the end of the command, type Ctrl + E . To cut a section of the command, position the cursor where you want to start cutting and type Ctrl + K To paste a cut section back in, position the cursor where you want to paste, and type Ctrl + Y Windows users can get similar, but more limited, functionality if they launch invoke.py with the winpty program and have the pyreadline3 library installed: > winpty python scripts\\invoke.py On the Mac and Linux platforms, when you exit invoke.py, the last 1000 lines of your command-line history will be saved. When you restart invoke.py , you can access the saved history using the Up key. In addition, limited command-line completion is installed. In various contexts, you can start typing your command and press Tab . A list of potential completions will be presented to you. You can then type a little more, hit Tab again, and eventually autocomplete what you want. When specifying file paths using the one-letter shortcuts, the CLI will attempt to complete pathnames for you. This is most handy for the -I (init image) and -M (init mask) paths. To initiate completion, start the path with a slash ( / ) or ./ . For example: invoke> zebra with a mustache -I./test-pictures<TAB> -I./test-pictures/Lincoln-and-Parrot.png -I./test-pictures/zebra.jpg -I./test-pictures/madonna.png -I./test-pictures/bad-sketch.png -I./test-pictures/man_with_eagle/ You can then type Z , hit Tab again, and it will autofill to zebra.jpg . More text completion features (such as autocompleting seeds) are on their way.","title":"CLI"},{"location":"features/CLI/#cli","text":"","title":" CLI"},{"location":"features/CLI/#interactive-command-line-interface","text":"The invoke.py script, located in scripts/ , provides an interactive interface to image generation similar to the \"invoke mothership\" bot that Stable AI provided on its Discord server. Unlike the txt2img.py and img2img.py scripts provided in the original CompVis/stable-diffusion source code repository, the time-consuming initialization of the AI model initialization only happens once. After that image generation from the command-line interface is very fast. The script uses the readline library to allow for in-line editing, command history ( Up and Down ), autocompletion, and more. To help keep track of which prompts generated which images, the script writes a log file of image names and prompts to the selected output directory. In addition, as of version 1.02, it also writes the prompt into the PNG file's metadata where it can be retrieved using scripts/images2prompt.py The script is confirmed to work on Linux, Windows and Mac systems. Note This script runs from the command-line or can be used as a Web application. The Web GUI is currently rudimentary, but a much better replacement is on its way. ( invokeai ) ~/stable-diffusion$ python3 ./scripts/invoke.py * Initializing, be patient... Loading model from models/ldm/text2img-large/model.ckpt ( ...more initialization messages... ) * Initialization done ! Awaiting your command... invoke> ashley judd riding a camel -n2 -s150 Outputs: outputs/img-samples/00009.png: \"ashley judd riding a camel\" -n2 -s150 -S 416354203 outputs/img-samples/00010.png: \"ashley judd riding a camel\" -n2 -s150 -S 1362479620 invoke> \"there's a fly in my soup\" -n6 -g outputs/img-samples/00011.png: \"there's a fly in my soup\" -n6 -g -S 2685670268 seeds for individual rows: [ 2685670268 , 1216708065 , 2335773498 , 822223658 , 714542046 , 3395302430 ] invoke> q # this shows how to retrieve the prompt stored in the saved image's metadata ( invokeai ) ~/stable-diffusion$ python ./scripts/images2prompt.py outputs/img_samples/*.png 00009 .png: \"ashley judd riding a camel\" -s150 -S 416354203 00010 .png: \"ashley judd riding a camel\" -s150 -S 1362479620 00011 .png: \"there's a fly in my soup\" -n6 -g -S 2685670268 The invoke> prompt's arguments are pretty much identical to those used in the Discord bot, except you don't need to type !invoke (it doesn't hurt if you do). A significant change is that creation of individual images is now the default unless --grid ( -g ) is given. A full list is given in List of prompt arguments .","title":"Interactive Command Line Interface"},{"location":"features/CLI/#arguments","text":"The script itself also recognizes a series of command-line switches that will change important global defaults, such as the directory for image outputs and the location of the model weight files.","title":"Arguments"},{"location":"features/CLI/#list-of-arguments-recognized-at-the-command-line","text":"These command-line arguments can be passed to invoke.py when you first run it from the Windows, Mac or Linux command line. Some set defaults that can be overridden on a per-prompt basis (see List of prompt arguments . Others Argument Shortcut Default Description --help -h Print a concise help message. --outdir <path> -o<path> outputs/img_samples Location for generated images. --prompt_as_dir -p False Name output directories using the prompt text. --from_file <path> None Read list of prompts from a file. Use - to read from standard input --model <modelname> stable-diffusion-1.4 Loads model specified in configs/models.yaml. Currently one of \"stable-diffusion-1.4\" or \"laion400m\" --full_precision -F False Run in slower full-precision mode. Needed for Macintosh M1/M2 hardware and some older video cards. --png_compression <0-9> -z<0-9> 6 Select level of compression for output files, from 0 (no compression) to 9 (max compression) --safety-checker False Activate safety checker for NSFW and other potentially disturbing imagery --web False Start in web server mode --host <ip addr> localhost Which network interface web server should listen on. Set to 0.0.0.0 to listen on any. --port <port> 9090 Which port web server should listen for requests on. --config <path> configs/models.yaml Configuration file for models and their weights. --iterations <int> -n<int> 1 How many images to generate per prompt. --grid -g False Save all image series as a grid rather than individually. --sampler <sampler> -A<sampler> k_lms Sampler to use. Use -h to get list of available samplers. --seamless False Create interesting effects by tiling elements of the image. --embedding_path <path> None Path to pre-trained embedding manager checkpoints, for custom models --gfpgan_dir src/gfpgan Path to where GFPGAN is installed. --gfpgan_model_path experiments/pretrained_models/GFPGANv1.4.pth Path to GFPGAN model file, relative to --gfpgan_dir . --free_gpu_mem False Free GPU memory after sampling, to allow image decoding and saving in low VRAM conditions --precision auto Set model precision, default is selected by device. Options: auto, float32, float16, autocast These arguments are deprecated but still work Argument Shortcut Default Description --weights <path> None Pth to weights file; use --model stable-diffusion-1.4 instead --laion400m -l False Use older LAION400m weights; use --model=laion400m instead Tip On Windows systems, you may run into problems when passing the invoke script standard backslashed path names because the Python interpreter treats \"\\\" as an escape. You can either double your slashes (ick): C:\\\\path\\\\to\\\\my\\\\file , or use Linux/Mac style forward slashes (better): C:/path/to/my/file .","title":"List of arguments recognized at the command line"},{"location":"features/CLI/#list-of-prompt-arguments","text":"After the invoke.py script initializes, it will present you with a invoke> prompt. Here you can enter information to generate images from text ( txt2img ), to embellish an existing image or sketch ( img2img ), or to selectively alter chosen regions of the image ( inpainting ).","title":"List of prompt arguments"},{"location":"features/CLI/#txt2img","text":"invoke> waterfall and rainbow -W640 -H480 This will create the requested image with the dimensions 640 (width) and 480 (height). Here are the invoke> command that apply to txt2img: Argument Shortcut Default Description \"my prompt\" Text prompt to use. The quotation marks are optional. --width <int> -W<int> 512 Width of generated image --height <int> -H<int> 512 Height of generated image --iterations <int> -n<int> 1 How many images to generate from this prompt --steps <int> -s<int> 50 How many steps of refinement to apply --cfg_scale <float> -C<float> 7.5 How hard to try to match the prompt to the generated image; any number greater than 1.0 works, but the useful range is roughly 5.0 to 20.0 --seed <int> -S<int> None Set the random seed for the next series of images. This can be used to recreate an image generated previously. --sampler <sampler> -A<sampler> k_lms Sampler to use. Use -h to get list of available samplers. --karras_max <int> 29 When using k_* samplers, set the maximum number of steps before shifting from using the Karras noise schedule (good for low step counts) to the LatentDiffusion noise schedule (good for high step counts) This value is sticky. [29] --hires_fix Larger images often have duplication artefacts. This option suppresses duplicates by generating the image at low res, and then using img2img to increase the resolution --png_compression <0-9> -z<0-9> 6 Select level of compression for output files, from 0 (no compression) to 9 (max compression) --grid -g False Turn on grid mode to return a single image combining all the images generated by this prompt --individual -i True Turn off grid mode (deprecated; leave off --grid instead) --outdir <path> -o<path> outputs/img_samples Temporarily change the location of these images --seamless False Activate seamless tiling for interesting effects --seamless_axes x,y Specify which axes to use circular convolution on. --log_tokenization -t False Display a color-coded list of the parsed tokens derived from the prompt --skip_normalization -x False Weighted subprompts will not be normalized. See Weighted Prompts --upscale <int> <float> -U <int> <float> -U 1 0.75 Upscale image by magnification factor (2, 4), and set strength of upscaling (0.0-1.0). If strength not set, will default to 0.75. --facetool_strength <float> -G <float> -G0 Fix faces (defaults to using the GFPGAN algorithm); argument indicates how hard the algorithm should try (0.0-1.0) --facetool <name> -ft <name> -ft gfpgan Select face restoration algorithm to use: gfpgan, codeformer --codeformer_fidelity -cf <float> 0.75 Used along with CodeFormer. Takes values between 0 and 1. 0 produces high quality but low accuracy. 1 produces high accuracy but low quality --save_original -save_orig False When upscaling or fixing faces, this will cause the original image to be saved rather than replaced. --variation <float> -v<float> 0.0 Add a bit of noise (0.0=none, 1.0=high) to the image in order to generate a series of variations. Usually used in combination with -S<seed> and -n<int> to generate a series a riffs on a starting image. See Variations . --with_variations <pattern> None Combine two or more variations. See Variations for now to use this. --save_intermediates <n> None Save the image from every nth step into an \"intermediates\" folder inside the output directory Note that the width and height of the image must be multiples of 64. You can provide different values, but they will be rounded down to the nearest multiple of 64.","title":"txt2img"},{"location":"features/CLI/#this-is-an-example-of-img2img","text":"invoke> waterfall and rainbow -I./vacation-photo.png -W640 -H480 --fit This will modify the indicated vacation photograph by making it more like the prompt. Results will vary greatly depending on what is in the image. We also ask to --fit the image into a box no bigger than 640x480. Otherwise the image size will be identical to the provided photo and you may run out of memory if it is large. In addition to the command-line options recognized by txt2img, img2img accepts additional options: Argument Shortcut Default Description --init_img <path> -I<path> None Path to the initialization image --fit -F False Scale the image to fit into the specified -H and -W dimensions --strength <float> -s<float> 0.75 How hard to try to match the prompt to the initial image. Ranges from 0.0-0.99, with higher values replacing the initial image completely.","title":"This is an example of img2img:"},{"location":"features/CLI/#inpainting","text":"invoke> waterfall and rainbow -I./vacation-photo.png -M./vacation-mask.png -W640 -H480 --fit This will do the same thing as img2img, but image alterations will only occur within transparent areas defined by the mask file specified by -M . You may also supply just a single initial image with the areas to overpaint made transparent, but you must be careful not to destroy the pixels underneath when you create the transparent areas. See Inpainting for details. inpainting accepts all the arguments used for txt2img and img2img, as well as the --mask (-M) and --text_mask (-tm) arguments: Argument Shortcut Default Description --init_mask <path> -M<path> None Path to an image the same size as the initial_image, with areas for inpainting made transparent. --invert_mask False If true, invert the mask so that transparent areas are opaque and vice versa. --text_mask <prompt> [<float>] -tm <prompt> [<float>] Create a mask from a text prompt describing part of the image The mask may either be an image with transparent areas, in which case the inpainting will occur in the transparent areas only, or a black and white image, in which case all black areas will be painted into. --text_mask (short form -tm ) is a way to generate a mask using a text description of the part of the image to replace. For example, if you have an image of a breakfast plate with a bagel, toast and scrambled eggs, you can selectively mask the bagel and replace it with a piece of cake this way: invoke> a piece of cake -I /path/to/breakfast.png -tm bagel The algorithm uses clipseg to classify different regions of the image. The classifier puts out a confidence score for each region it identifies. Generally regions that score above 0.5 are reliable, but if you are getting too much or too little masking you can adjust the threshold down (to get more mask), or up (to get less). In this example, by passing -tm a higher value, we are insisting on a more stringent classification. invoke> a piece of cake -I /path/to/breakfast.png -tm bagel 0.6","title":"inpainting"},{"location":"features/CLI/#other-commands","text":"The CLI offers a number of commands that begin with \"!\".","title":"Other Commands"},{"location":"features/CLI/#postprocessing-images","text":"To postprocess a file using face restoration or upscaling, use the !fix command.","title":"Postprocessing images"},{"location":"features/CLI/#fix","text":"This command runs a post-processor on a previously-generated image. It takes a PNG filename or path and applies your choice of the -U , -G , or --embiggen switches in order to fix faces or upscale. If you provide a filename, the script will look for it in the current output directory. Otherwise you can provide a full or partial path to the desired file. Some examples: Upscale to 4X its original size and fix faces using codeformer invoke> !fix 0000045 .4829112.png -G1 -U4 -ft codeformer Use the GFPGAN algorithm to fix faces, then upscale to 3X using --embiggen invoke> !fix 0000045 .4829112.png -G0.8 -ft gfpgan >> fixing outputs/img-samples/0000045.4829112.png >> retrieved seed 4829112 and prompt \"boy enjoying a banana split\" >> GFPGAN - Restoring Faces for image seed:4829112 Outputs: [ 1 ] outputs/img-samples/000017.4829112.gfpgan-00.png: !fix \"outputs/img-samples/0000045.4829112.png\" -s 50 -S -W 512 -H 512 -C 7 .5 -A k_lms -G 0 .8","title":"!fix"},{"location":"features/CLI/#mask","text":"This command takes an image, a text prompt, and uses the clipseg algorithm to automatically generate a mask of the area that matches the text prompt. It is useful for debugging the text masking process prior to inpainting with the --text_mask argument. See [INPAINTING.md] for details.","title":"!mask"},{"location":"features/CLI/#model-selection-and-importation","text":"The CLI allows you to add new models on the fly, as well as to switch among them rapidly without leaving the script.","title":"Model selection and importation"},{"location":"features/CLI/#models","text":"This prints out a list of the models defined in `config/models.yaml'. The active model is bold-faced Example: laion400m not loaded stable-diffusion-1.4 active Stable Diffusion v1.4 waifu-diffusion not loaded Waifu Diffusion v1.3","title":"!models"},{"location":"features/CLI/#switch","text":"This quickly switches from one model to another without leaving the CLI script. invoke.py uses a memory caching system; once a model has been loaded, switching back and forth is quick. The following example shows this in action. Note how the second column of the !models table changes to cached after a model is first loaded, and that the long initialization step is not needed when loading a cached model. invoke> !models laion400m not loaded stable-diffusion-1.4 cached Stable Diffusion v1.4 waifu-diffusion active Waifu Diffusion v1.3 invoke> !switch waifu-diffusion >> Caching model stable-diffusion-1.4 in system RAM >> Loading waifu-diffusion from models/ldm/stable-diffusion-v1/model-epoch08-float16.ckpt | LatentDiffusion: Running in eps-prediction mode | DiffusionWrapper has 859.52 M params. | Making attention of type 'vanilla' with 512 in_channels | Working with z of shape (1, 4, 32, 32) = 4096 dimensions. | Making attention of type 'vanilla' with 512 in_channels | Using faster float16 precision >> Model loaded in 18.24s >> Max VRAM used to load the model: 2.17G >> Current VRAM usage:2.17G >> Setting Sampler to k_lms invoke> !models laion400m not loaded stable-diffusion-1.4 cached Stable Diffusion v1.4 waifu-diffusion active Waifu Diffusion v1.3 invoke> !switch stable-diffusion-1.4 >> Caching model waifu-diffusion in system RAM >> Retrieving model stable-diffusion-1.4 from system RAM cache >> Setting Sampler to k_lms invoke> !models laion400m not loaded stable-diffusion-1.4 active Stable Diffusion v1.4 waifu-diffusion cached Waifu Diffusion v1.3","title":"!switch "},{"location":"features/CLI/#import_model","text":"This command imports a new model weights file into InvokeAI, makes it available for image generation within the script, and writes out the configuration for the model into config/models.yaml for use in subsequent sessions. Provide !import_model with the path to a weights file ending in .ckpt . If you type a partial path and press tab, the CLI will autocomplete. Although it will also autocomplete to .vae files, these are not currenty supported (but will be soon). When you hit return, the CLI will prompt you to fill in additional information about the model, including the short name you wish to use for it with the !switch command, a brief description of the model, the default image width and height to use with this model, and the model's configuration file. The latter three fields are automatically filled with reasonable defaults. In the example below, the bold-faced text shows what the user typed in with the exception of the width, height and configuration file paths, which were filled in automatically. Example: invoke> !import_model models/ldm/stable-diffusion-v1/model-epoch08-float16.ckpt >> Model import in process. Please enter the values needed to configure this model: Name for this model: waifu-diffusion Description of this model: Waifu Diffusion v1.3 Configuration file for this model: configs/stable-diffusion/v1-inference.yaml Default image width: 512 Default image height: 512 >> New configuration: waifu-diffusion: config: configs/stable-diffusion/v1-inference.yaml description: Waifu Diffusion v1.3 height: 512 weights: models/ldm/stable-diffusion-v1/model-epoch08-float16.ckpt width: 512 OK to import [n]? y >> Caching model stable-diffusion-1.4 in system RAM >> Loading waifu-diffusion from models/ldm/stable-diffusion-v1/model-epoch08-float16.ckpt | LatentDiffusion: Running in eps-prediction mode | DiffusionWrapper has 859.52 M params. | Making attention of type 'vanilla' with 512 in_channels | Working with z of shape (1, 4, 32, 32) = 4096 dimensions. | Making attention of type 'vanilla' with 512 in_channels | Using faster float16 precision invoke>","title":"!import_model "},{"location":"features/CLI/#edit_model","text":"The !edit_model command can be used to modify a model that is already defined in config/models.yaml . Call it with the short name of the model you wish to modify, and it will allow you to modify the model's description , weights and other fields. Example: invoke> !edit_model waifu-diffusion >> Editing model waifu-diffusion from configuration file ./configs/models.yaml description: Waifu diffusion v1.4beta weights: models/ldm/stable-diffusion-v1/ model-epoch10-float16.ckpt config: configs/stable-diffusion/v1-inference.yaml width: 512 height: 512 >> New configuration: waifu-diffusion: config: configs/stable-diffusion/v1-inference.yaml description: Waifu diffusion v1.4beta weights: models/ldm/stable-diffusion-v1/model-epoch10-float16.ckpt height: 512 width: 512 OK to import [n]? y >> Caching model stable-diffusion-1.4 in system RAM >> Loading waifu-diffusion from models/ldm/stable-diffusion-v1/model-epoch10-float16.ckpt ... ======= invoke> !fix 000017.4829112.gfpgan-00.png --embiggen 3 ...lots of text... Outputs: [2] outputs/img-samples/000018.2273800735.embiggen-00.png: !fix \"outputs/img-samples/000017.243781548.gfpgan-00.png\" -s 50 -S 2273800735 -W 512 -H 512 -C 7.5 -A k_lms --embiggen 3.0 0.75 0.25 ```","title":"!edit_model "},{"location":"features/CLI/#history-processing","text":"The CLI provides a series of convenient commands for reviewing previous actions, retrieving them, modifying them, and re-running them.","title":"History processing"},{"location":"features/CLI/#history","text":"The invoke script keeps track of all the commands you issue during a session, allowing you to re-run them. On Mac and Linux systems, it also writes the command-line history out to disk, giving you access to the most recent 1000 commands issued. The !history command will return a numbered list of all the commands issued during the session (Windows), or the most recent 1000 commands (Mac|Linux). You can then repeat a command by using the command !NNN , where \"NNN\" is the history line number. For example: invoke> !history ... [ 14 ] happy woman sitting under tree wearing broad hat and flowing garment [ 15 ] beautiful woman sitting under tree wearing broad hat and flowing garment [ 18 ] beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 [ 20 ] watercolor of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194 [ 21 ] surrealist painting of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194 ... invoke> !20 invoke> watercolor of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194","title":"!history"},{"location":"features/CLI/#fetch","text":"This command retrieves the generation parameters from a previously generated image and either loads them into the command line (Linux|Mac), or prints them out in a comment for copy-and-paste (Windows). You may provide either the name of a file in the current output directory, or a full file path. Specify path to a folder with image png files, and wildcard *.png to retrieve the dream command used to generate the images, and save them to a file commands.txt for further processing. This example loads the generation command for a single png file: invoke> !fetch 0000015 .8929913.png # the script returns the next line, ready for editing and running: invoke> a fantastic alien landscape -W 576 -H 512 -s 60 -A plms -C 7 .5 This one fetches the generation commands from a batch of files and stores them into selected.txt : invoke> !fetch outputs \\s elected-imgs \\* .png selected.txt","title":"!fetch"},{"location":"features/CLI/#replay","text":"This command replays a text file generated by !fetch or created manually invoke> !replay outputs\\selected-imgs\\selected.txt Note that these commands may behave unexpectedly if given a PNG file that was not generated by InvokeAI.","title":"!replay"},{"location":"features/CLI/#search","text":"This is similar to !history but it only returns lines that contain search string . For example: invoke> !search surreal [ 21 ] surrealist painting of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194","title":"!search "},{"location":"features/CLI/#clear","text":"This clears the search history from memory and disk. Be advised that this operation is irreversible and does not issue any warnings!","title":"!clear"},{"location":"features/CLI/#command-line-editing-and-completion","text":"The command-line offers convenient history tracking, editing, and command completion. To scroll through previous commands and potentially edit/reuse them, use the Up and Down keys. To edit the current command, use the Left and Right keys to position the cursor, and then Backspace , Del or insert characters. To move to the very beginning of the command, type Ctrl + A (or Cmd + A on the Mac) To move to the end of the command, type Ctrl + E . To cut a section of the command, position the cursor where you want to start cutting and type Ctrl + K To paste a cut section back in, position the cursor where you want to paste, and type Ctrl + Y Windows users can get similar, but more limited, functionality if they launch invoke.py with the winpty program and have the pyreadline3 library installed: > winpty python scripts\\invoke.py On the Mac and Linux platforms, when you exit invoke.py, the last 1000 lines of your command-line history will be saved. When you restart invoke.py , you can access the saved history using the Up key. In addition, limited command-line completion is installed. In various contexts, you can start typing your command and press Tab . A list of potential completions will be presented to you. You can then type a little more, hit Tab again, and eventually autocomplete what you want. When specifying file paths using the one-letter shortcuts, the CLI will attempt to complete pathnames for you. This is most handy for the -I (init image) and -M (init mask) paths. To initiate completion, start the path with a slash ( / ) or ./ . For example: invoke> zebra with a mustache -I./test-pictures<TAB> -I./test-pictures/Lincoln-and-Parrot.png -I./test-pictures/zebra.jpg -I./test-pictures/madonna.png -I./test-pictures/bad-sketch.png -I./test-pictures/man_with_eagle/ You can then type Z , hit Tab again, and it will autofill to zebra.jpg . More text completion features (such as autocompleting seeds) are on their way.","title":"Command-line editing and completion"},{"location":"features/EMBIGGEN/","text":"Embiggen # upscale your images on limited memory machines GFPGAN and Real-ESRGAN are both memory intensive. In order to avoid crashes and memory overloads during the Stable Diffusion process, these effects are applied after Stable Diffusion has completed its work. In single image generations, you will see the output right away but when you are using multiple iterations, the images will first be generated and then upscaled and face restored after that process is complete. While the image generation is taking place, you will still be able to preview the base images. If you wish to stop during the image generation but want to upscale or face restore a particular generated image, pass it again with the same prompt and generated seed along with the -U and -G prompt arguments to perform those actions. Embiggen # If you wanted to be able to do more (pixels) without running out of VRAM, or you want to upscale with details that couldn't possibly appear without the context of a prompt, this is the feature to try out. Embiggen automates the process of taking an init image, upscaling it, cutting it into smaller tiles that slightly overlap, running all the tiles through img2img to refine details with respect to the prompt, and \"stitching\" the tiles back together into a cohesive image. It automatically computes how many tiles are needed, and so it can be fed ANY size init image and perform Img2Img on it (though it will be run only one tile at a time, which can cause problems, see the Note at the end). If you're familiar with \"GoBig\" (ala progrock-stable ) it's similar to that, except it can work up to an arbitrarily large size (instead of just 2x), with tile overlaps configurable as a ratio, and has extra logic to re-run any number of the tile sub-sections of the image if for example a small part of a huge run got messed up. Usage # -embiggen <scaling_factor> <esrgan_strength> <overlap_ratio OR overlap_pixels> Takes a scaling factor relative to the size of the --init_img ( -I ), followed by ESRGAN upscaling strength (0 - 1.0), followed by minimum amount of overlap between tiles as a decimal ratio (0 - 1.0) OR a number of pixels. The scaling factor is how much larger than the --init_img the output should be, and will multiply both x and y axis, so an image that is a scaling factor of 3.0 has 3*3= 9 times as many pixels, and will take (at least) 9 times as long (see overlap for why it might be longer). If the --init_img is already the right size -embiggen 1 , and it can also be less than one if the init_img is too big. Esrgan_strength defaults to 0.75, and the overlap_ratio defaults to 0.25, both are optional. Unlike Img2Img, the --width ( -W ) and --height ( -H ) arguments do not control the size of the image as a whole, but the size of the tiles used to Embiggen the image. ESRGAN is used to upscale the --init_img prior to cutting it into tiles/pieces to run through img2img and then stitch back together. Embiggen can be run without ESRGAN; just set the strength to zero (e.g. -embiggen 1.75 0 ). The output of Embiggen can also be upscaled after it's finished ( -U ). The overlap is the minimum that tiles will overlap with adjacent tiles, specified as either a ratio or a number of pixels. How much the tiles overlap determines the likelihood the tiling will be noticable, really small overlaps (e.g. a couple of pixels) may produce noticeable grid-like fuzzy distortions in the final stitched image. Though, as the overlapping space doesn't contribute to making the image bigger, and the larger the overlap the more tiles (and the more time) it will take to finish. Because the overlapping parts of tiles don't \"contribute\" to increasing size, every tile after the first in a row or column effectively only covers an extra 1 - overlap_ratio on each axis. If the input/ --init_img is same size as a tile, the ideal (for time) scaling factors with the default overlap (0.25) are 1.75, 2.5, 3.25, 4.0 etc.. -embiggen_tiles <spaced list of tiles> An advanced usage useful if you only want to alter parts of the image while running Embiggen. It takes a list of tiles by number to run and replace onto the initial image e.g. 1 3 5 . It's useful for either fixing problem spots from a previous Embiggen run, or selectively altering the prompt for sections of an image - for creative or coherency reasons. Tiles are numbered starting with one, and left-to-right, top-to-bottom. So, if you are generating a 3x3 tiled image, the middle row would be 4 5 6 . Examples # Running Embiggen with 512x512 tiles on an existing image, scaling up by a factor of 2.5x; and doing the same again (default ESRGAN strength is 0.75, default overlap between tiles is 0.25): invoke > a photo of a forest at sunset -s 100 -W 512 -H 512 -I outputs/forest.png -f 0 .4 -embiggen 2 .5 invoke > a photo of a forest at sunset -s 100 -W 512 -H 512 -I outputs/forest.png -f 0 .4 -embiggen 2 .5 0 .75 0 .25 If your starting image was also 512x512 this should have taken 9 tiles. If there weren't enough clouds in the sky of that forest you just made (and that image is about 1280 pixels (512*2.5) wide A.K.A. three 512x512 tiles with 0.25 overlaps wide) we can replace that top row of tiles: invoke> a photo of puffy clouds over a forest at sunset -s 100 -W 512 -H 512 -I outputs/000002.seed.png -f 0 .5 -embiggen_tiles 1 2 3 Fixing Previously-Generated Images # It is easy to apply embiggen to any previously-generated file without having to look up the original prompt and provide an initial image. Just use the syntax !fix path/to/file.png <embiggen> . For example, you can rewrite the previous command to look like this: invoke> !fix ./outputs/000002.seed.png -embiggen_tiles 1 2 3 A new file named 000002.seed.fixed.png will be created in the output directory. Note that the !fix command does not replace the original file, unlike the behavior at generate time. You do not need to provide the prompt, and !fix automatically selects a good strength for embiggen-ing. Note Because the same prompt is used on all the tiled images, and the model doesn't have the context of anything outside the tile being run - it can end up creating repeated pattern (also called 'motifs') across all the tiles based on that prompt. The best way to combat this is lowering the --strength ( -f ) to stay more true to the init image, and increasing the number of steps so there is more compute-time to create the detail. Anecdotally --strength 0.35-0.45 works pretty well on most things. It may also work great in some examples even with the --strength set high for patterns, landscapes, or subjects that are more abstract. Because this is (relatively) fast, you can also preserve the best parts from each. Author: Travco","title":"Embiggen"},{"location":"features/EMBIGGEN/#embiggen","text":"upscale your images on limited memory machines GFPGAN and Real-ESRGAN are both memory intensive. In order to avoid crashes and memory overloads during the Stable Diffusion process, these effects are applied after Stable Diffusion has completed its work. In single image generations, you will see the output right away but when you are using multiple iterations, the images will first be generated and then upscaled and face restored after that process is complete. While the image generation is taking place, you will still be able to preview the base images. If you wish to stop during the image generation but want to upscale or face restore a particular generated image, pass it again with the same prompt and generated seed along with the -U and -G prompt arguments to perform those actions.","title":" Embiggen"},{"location":"features/EMBIGGEN/#embiggen_1","text":"If you wanted to be able to do more (pixels) without running out of VRAM, or you want to upscale with details that couldn't possibly appear without the context of a prompt, this is the feature to try out. Embiggen automates the process of taking an init image, upscaling it, cutting it into smaller tiles that slightly overlap, running all the tiles through img2img to refine details with respect to the prompt, and \"stitching\" the tiles back together into a cohesive image. It automatically computes how many tiles are needed, and so it can be fed ANY size init image and perform Img2Img on it (though it will be run only one tile at a time, which can cause problems, see the Note at the end). If you're familiar with \"GoBig\" (ala progrock-stable ) it's similar to that, except it can work up to an arbitrarily large size (instead of just 2x), with tile overlaps configurable as a ratio, and has extra logic to re-run any number of the tile sub-sections of the image if for example a small part of a huge run got messed up.","title":"Embiggen"},{"location":"features/EMBIGGEN/#usage","text":"-embiggen <scaling_factor> <esrgan_strength> <overlap_ratio OR overlap_pixels> Takes a scaling factor relative to the size of the --init_img ( -I ), followed by ESRGAN upscaling strength (0 - 1.0), followed by minimum amount of overlap between tiles as a decimal ratio (0 - 1.0) OR a number of pixels. The scaling factor is how much larger than the --init_img the output should be, and will multiply both x and y axis, so an image that is a scaling factor of 3.0 has 3*3= 9 times as many pixels, and will take (at least) 9 times as long (see overlap for why it might be longer). If the --init_img is already the right size -embiggen 1 , and it can also be less than one if the init_img is too big. Esrgan_strength defaults to 0.75, and the overlap_ratio defaults to 0.25, both are optional. Unlike Img2Img, the --width ( -W ) and --height ( -H ) arguments do not control the size of the image as a whole, but the size of the tiles used to Embiggen the image. ESRGAN is used to upscale the --init_img prior to cutting it into tiles/pieces to run through img2img and then stitch back together. Embiggen can be run without ESRGAN; just set the strength to zero (e.g. -embiggen 1.75 0 ). The output of Embiggen can also be upscaled after it's finished ( -U ). The overlap is the minimum that tiles will overlap with adjacent tiles, specified as either a ratio or a number of pixels. How much the tiles overlap determines the likelihood the tiling will be noticable, really small overlaps (e.g. a couple of pixels) may produce noticeable grid-like fuzzy distortions in the final stitched image. Though, as the overlapping space doesn't contribute to making the image bigger, and the larger the overlap the more tiles (and the more time) it will take to finish. Because the overlapping parts of tiles don't \"contribute\" to increasing size, every tile after the first in a row or column effectively only covers an extra 1 - overlap_ratio on each axis. If the input/ --init_img is same size as a tile, the ideal (for time) scaling factors with the default overlap (0.25) are 1.75, 2.5, 3.25, 4.0 etc.. -embiggen_tiles <spaced list of tiles> An advanced usage useful if you only want to alter parts of the image while running Embiggen. It takes a list of tiles by number to run and replace onto the initial image e.g. 1 3 5 . It's useful for either fixing problem spots from a previous Embiggen run, or selectively altering the prompt for sections of an image - for creative or coherency reasons. Tiles are numbered starting with one, and left-to-right, top-to-bottom. So, if you are generating a 3x3 tiled image, the middle row would be 4 5 6 .","title":"Usage"},{"location":"features/EMBIGGEN/#examples","text":"Running Embiggen with 512x512 tiles on an existing image, scaling up by a factor of 2.5x; and doing the same again (default ESRGAN strength is 0.75, default overlap between tiles is 0.25): invoke > a photo of a forest at sunset -s 100 -W 512 -H 512 -I outputs/forest.png -f 0 .4 -embiggen 2 .5 invoke > a photo of a forest at sunset -s 100 -W 512 -H 512 -I outputs/forest.png -f 0 .4 -embiggen 2 .5 0 .75 0 .25 If your starting image was also 512x512 this should have taken 9 tiles. If there weren't enough clouds in the sky of that forest you just made (and that image is about 1280 pixels (512*2.5) wide A.K.A. three 512x512 tiles with 0.25 overlaps wide) we can replace that top row of tiles: invoke> a photo of puffy clouds over a forest at sunset -s 100 -W 512 -H 512 -I outputs/000002.seed.png -f 0 .5 -embiggen_tiles 1 2 3","title":"Examples"},{"location":"features/EMBIGGEN/#fixing-previously-generated-images","text":"It is easy to apply embiggen to any previously-generated file without having to look up the original prompt and provide an initial image. Just use the syntax !fix path/to/file.png <embiggen> . For example, you can rewrite the previous command to look like this: invoke> !fix ./outputs/000002.seed.png -embiggen_tiles 1 2 3 A new file named 000002.seed.fixed.png will be created in the output directory. Note that the !fix command does not replace the original file, unlike the behavior at generate time. You do not need to provide the prompt, and !fix automatically selects a good strength for embiggen-ing. Note Because the same prompt is used on all the tiled images, and the model doesn't have the context of anything outside the tile being run - it can end up creating repeated pattern (also called 'motifs') across all the tiles based on that prompt. The best way to combat this is lowering the --strength ( -f ) to stay more true to the init image, and increasing the number of steps so there is more compute-time to create the detail. Anecdotally --strength 0.35-0.45 works pretty well on most things. It may also work great in some examples even with the --strength set high for patterns, landscapes, or subjects that are more abstract. Because this is (relatively) fast, you can also preserve the best parts from each. Author: Travco","title":"Fixing Previously-Generated Images"},{"location":"features/IMG2IMG/","text":"Image-to-Image # img2img # This script also provides an img2img feature that lets you seed your creations with an initial drawing or photo. This is a really cool feature that tells stable diffusion to build the prompt on top of the image you provide, preserving the original's basic shape and layout. To use it, provide the --init_img option as shown here: tree on a hill with a river, nature photograph, national geographic -I./test-pictures/tree-and-river-sketch.png -f 0.85 This will take the original image shown here: and generate a new image based on it as shown here: The --init_img ( -I ) option gives the path to the seed picture. --strength ( -f ) controls how much the original will be modified, ranging from 0.0 (keep the original intact), to 1.0 (ignore the original completely). The default is 0.75 , and ranges from 0.25-0.90 give interesting results. Other relevant options include -C (classification free guidance scale), and -s (steps). Unlike txt2img , adding steps will continuously change the resulting image and it will not converge. You may also pass a -v<variation_amount> option to generate -n<iterations> count variants on the original image. This is done by passing the first generated image back into img2img the requested number of times. It generates interesting variants. Note that the prompt makes a big difference. For example, this slight variation on the prompt produces a very different image: photograph of a tree on a hill with a river Tip When designing prompts, think about how the images scraped from the internet were captioned. Very few photographs will be labeled \"photograph\" or \"photorealistic.\" They will, however, be captioned with the publication, photographer, camera model, or film settings. If the initial image contains transparent regions, then Stable Diffusion will only draw within the transparent regions, a process called inpainting . However, for this to work correctly, the color information underneath the transparent needs to be preserved, not erased. Warning IMPORTANT ISSUE img2img does not work properly on initial images smaller than 512x512. Please scale your image to at least 512x512 before using it. Larger images are not a problem, but may run out of VRAM on your GPU card. To fix this, use the --fit option, which downscales the initial image to fit within the box specified by width x height: tree on a hill with a river, national geographic -I./test-pictures/big-sketch.png -H512 -W512 --fit How does it actually work, though? # The main difference between img2img and prompt2img is the starting point. While prompt2img always starts with pure gaussian noise and progressively refines it over the requested number of steps, img2img skips some of these earlier steps (how many it skips is indirectly controlled by the --strength parameter), and uses instead your initial image mixed with gaussian noise as the starting image. Let's start by thinking about vanilla prompt2img , just generating an image from a prompt. If the step count is 10, then the \"latent space\" (Stable Diffusion's internal representation of the image) for the prompt \"fire\" with seed 1592514025 develops something like this: invoke> \"fire\" -s10 -W384 -H384 -S1592514025 Put simply: starting from a frame of fuzz/static, SD finds details in each frame that it thinks look like \"fire\" and brings them a little bit more into focus, gradually scrubbing out the fuzz until a clear image remains. When you use img2img some of the earlier steps are cut, and instead an initial image of your choice is used. But because of how the maths behind Stable Diffusion works, this image needs to be mixed with just the right amount of noise (fuzz/static) for where it is being inserted. This is where the strength parameter comes in. Depending on the set strength, your image will be inserted into the sequence at the appropriate point, with just the right amount of noise. A concrete example # I want SD to draw a fire based on this hand-drawn image: Let's only do 10 steps, to make it easier to see what's happening. If strength is 0.7 , this is what the internal steps the algorithm has to take will look like: With strength 0.4 , the steps look more like this: Notice how much more fuzzy the starting image is for strength 0.7 compared to 0.4 , and notice also how much longer the sequence is with 0.7 : strength = 0.7 strength = 0.4 initial image that SD sees steps argument to invoke> -S10 -S10 steps actually taken 7 4 latent space at each step output Both of the outputs look kind of like what I was thinking of. With the strength higher, my input becomes more vague, and Stable Diffusion has more steps to refine its output. But it's not really making what I want, which is a picture of cheery open fire. With the strength lower, my input is more clear, but Stable Diffusion has less chance to refine itself, so the result ends up inheriting all the problems of my bad drawing. If you want to try this out yourself, all of these are using a seed of 1592514025 with a width/height of 384 , step count 10 , the default sampler ( k_lms ), and the single-word prompt \"fire\" : invoke> \"fire\" -s10 -W384 -H384 -S1592514025 -I /tmp/fire-drawing.png --strength 0.7 The code for rendering intermediates is on my (damian0815's) branch document-img2img - run invoke.py and check your outputs/img-samples/intermediates folder while generating an image. Compensating for the reduced step count # After putting this guide together I was curious to see how the difference would be if I increased the step count to compensate, so that SD could have the same amount of steps to develop the image regardless of the strength. So I ran the generation again using the same seed, but this time adapting the step count to give each generation 20 steps. Here's strength 0.4 (note step count 50 , which is 20 \u00f7 0.4 to make sure SD does 20 steps from my image): invoke> \"fire\" -s50 -W384 -H384 -S1592514025 -I /tmp/fire-drawing.png -f 0.4 and here is strength 0.7 (note step count 30 , which is roughly 20 \u00f7 0.7 to make sure SD does 20 steps from my image): invoke> \"fire\" -s30 -W384 -H384 -S1592514025 -I /tmp/fire-drawing.png -f 0.7 In both cases the image is nice and clean and \"finished\", but because at strength 0.7 Stable Diffusion has been give so much more freedom to improve on my badly-drawn flames, they've come out looking much better. You can really see the difference when looking at the latent steps. There's more noise on the first image with strength 0.7 : than there is for strength 0.4 : and that extra noise gives the algorithm more choices when it is evaluating how to denoise any particular pixel in the image. Unfortunately, it seems that img2img is very sensitive to the step count. Here's strength 0.7 with a step count of 29 (SD did 19 steps from my image): By comparing the latents we can sort of see that something got interpreted differently enough on the third or fourth step to lead to a rather different interpretation of the flames. This is the result of a difference in the de-noising \"schedule\" - basically the noise has to be cleaned by a certain degree each step or the model won't \"converge\" on the image properly (see stable diffusion blog for more about that). A different step count means a different schedule, which means things get interpreted slightly differently at every step.","title":"Image-to-Image"},{"location":"features/IMG2IMG/#image-to-image","text":"","title":" Image-to-Image"},{"location":"features/IMG2IMG/#img2img","text":"This script also provides an img2img feature that lets you seed your creations with an initial drawing or photo. This is a really cool feature that tells stable diffusion to build the prompt on top of the image you provide, preserving the original's basic shape and layout. To use it, provide the --init_img option as shown here: tree on a hill with a river, nature photograph, national geographic -I./test-pictures/tree-and-river-sketch.png -f 0.85 This will take the original image shown here: and generate a new image based on it as shown here: The --init_img ( -I ) option gives the path to the seed picture. --strength ( -f ) controls how much the original will be modified, ranging from 0.0 (keep the original intact), to 1.0 (ignore the original completely). The default is 0.75 , and ranges from 0.25-0.90 give interesting results. Other relevant options include -C (classification free guidance scale), and -s (steps). Unlike txt2img , adding steps will continuously change the resulting image and it will not converge. You may also pass a -v<variation_amount> option to generate -n<iterations> count variants on the original image. This is done by passing the first generated image back into img2img the requested number of times. It generates interesting variants. Note that the prompt makes a big difference. For example, this slight variation on the prompt produces a very different image: photograph of a tree on a hill with a river Tip When designing prompts, think about how the images scraped from the internet were captioned. Very few photographs will be labeled \"photograph\" or \"photorealistic.\" They will, however, be captioned with the publication, photographer, camera model, or film settings. If the initial image contains transparent regions, then Stable Diffusion will only draw within the transparent regions, a process called inpainting . However, for this to work correctly, the color information underneath the transparent needs to be preserved, not erased. Warning IMPORTANT ISSUE img2img does not work properly on initial images smaller than 512x512. Please scale your image to at least 512x512 before using it. Larger images are not a problem, but may run out of VRAM on your GPU card. To fix this, use the --fit option, which downscales the initial image to fit within the box specified by width x height: tree on a hill with a river, national geographic -I./test-pictures/big-sketch.png -H512 -W512 --fit","title":"img2img"},{"location":"features/IMG2IMG/#how-does-it-actually-work-though","text":"The main difference between img2img and prompt2img is the starting point. While prompt2img always starts with pure gaussian noise and progressively refines it over the requested number of steps, img2img skips some of these earlier steps (how many it skips is indirectly controlled by the --strength parameter), and uses instead your initial image mixed with gaussian noise as the starting image. Let's start by thinking about vanilla prompt2img , just generating an image from a prompt. If the step count is 10, then the \"latent space\" (Stable Diffusion's internal representation of the image) for the prompt \"fire\" with seed 1592514025 develops something like this: invoke> \"fire\" -s10 -W384 -H384 -S1592514025 Put simply: starting from a frame of fuzz/static, SD finds details in each frame that it thinks look like \"fire\" and brings them a little bit more into focus, gradually scrubbing out the fuzz until a clear image remains. When you use img2img some of the earlier steps are cut, and instead an initial image of your choice is used. But because of how the maths behind Stable Diffusion works, this image needs to be mixed with just the right amount of noise (fuzz/static) for where it is being inserted. This is where the strength parameter comes in. Depending on the set strength, your image will be inserted into the sequence at the appropriate point, with just the right amount of noise.","title":"How does it actually work, though?"},{"location":"features/IMG2IMG/#a-concrete-example","text":"I want SD to draw a fire based on this hand-drawn image: Let's only do 10 steps, to make it easier to see what's happening. If strength is 0.7 , this is what the internal steps the algorithm has to take will look like: With strength 0.4 , the steps look more like this: Notice how much more fuzzy the starting image is for strength 0.7 compared to 0.4 , and notice also how much longer the sequence is with 0.7 : strength = 0.7 strength = 0.4 initial image that SD sees steps argument to invoke> -S10 -S10 steps actually taken 7 4 latent space at each step output Both of the outputs look kind of like what I was thinking of. With the strength higher, my input becomes more vague, and Stable Diffusion has more steps to refine its output. But it's not really making what I want, which is a picture of cheery open fire. With the strength lower, my input is more clear, but Stable Diffusion has less chance to refine itself, so the result ends up inheriting all the problems of my bad drawing. If you want to try this out yourself, all of these are using a seed of 1592514025 with a width/height of 384 , step count 10 , the default sampler ( k_lms ), and the single-word prompt \"fire\" : invoke> \"fire\" -s10 -W384 -H384 -S1592514025 -I /tmp/fire-drawing.png --strength 0.7 The code for rendering intermediates is on my (damian0815's) branch document-img2img - run invoke.py and check your outputs/img-samples/intermediates folder while generating an image.","title":"A concrete example"},{"location":"features/IMG2IMG/#compensating-for-the-reduced-step-count","text":"After putting this guide together I was curious to see how the difference would be if I increased the step count to compensate, so that SD could have the same amount of steps to develop the image regardless of the strength. So I ran the generation again using the same seed, but this time adapting the step count to give each generation 20 steps. Here's strength 0.4 (note step count 50 , which is 20 \u00f7 0.4 to make sure SD does 20 steps from my image): invoke> \"fire\" -s50 -W384 -H384 -S1592514025 -I /tmp/fire-drawing.png -f 0.4 and here is strength 0.7 (note step count 30 , which is roughly 20 \u00f7 0.7 to make sure SD does 20 steps from my image): invoke> \"fire\" -s30 -W384 -H384 -S1592514025 -I /tmp/fire-drawing.png -f 0.7 In both cases the image is nice and clean and \"finished\", but because at strength 0.7 Stable Diffusion has been give so much more freedom to improve on my badly-drawn flames, they've come out looking much better. You can really see the difference when looking at the latent steps. There's more noise on the first image with strength 0.7 : than there is for strength 0.4 : and that extra noise gives the algorithm more choices when it is evaluating how to denoise any particular pixel in the image. Unfortunately, it seems that img2img is very sensitive to the step count. Here's strength 0.7 with a step count of 29 (SD did 19 steps from my image): By comparing the latents we can sort of see that something got interpreted differently enough on the third or fourth step to lead to a rather different interpretation of the flames. This is the result of a difference in the de-noising \"schedule\" - basically the noise has to be cleaned by a certain degree each step or the model won't \"converge\" on the image properly (see stable diffusion blog for more about that). A different step count means a different schedule, which means things get interpreted slightly differently at every step.","title":"Compensating for the reduced step count"},{"location":"features/INPAINTING/","text":"Inpainting # Creating Transparent Regions for Inpainting # Inpainting is really cool. To do it, you start with an initial image and use a photoeditor to make one or more regions transparent (i.e. they have a \"hole\" in them). You then provide the path to this image at the dream> command line using the -I switch. Stable Diffusion will only paint within the transparent region. There's a catch. In the current implementation, you have to prepare the initial image correctly so that the underlying colors are preserved under the transparent area. Many imaging editing applications will by default erase the color information under the transparent pixels and replace them with white or black, which will lead to suboptimal inpainting. It often helps to apply incomplete transparency, such as any value between 1 and 99% You also must take care to export the PNG file in such a way that the color information is preserved. There is often an option in the export dialog that lets you specify this. If your photoeditor is erasing the underlying color information, dream.py will give you a big fat warning. If you can't find a way to coax your photoeditor to retain color values under transparent areas, then you can combine the -I and -M switches to provide both the original unedited image and the masked (partially transparent) image: invoke> \"man with cat on shoulder\" -I./images/man.png -M./images/man-transparent.png Masking using Text # You can also create a mask using a text prompt to select the part of the image you want to alter, using the clipseg algorithm. This works on any image, not just ones generated by InvokeAI. The --text_mask (short form -tm ) option takes two arguments. The first argument is a text description of the part of the image you wish to mask (paint over). If the text description contains a space, you must surround it with quotation marks. The optional second argument is the minimum threshold for the mask classifier's confidence score, described in more detail below. To see how this works in practice, here's an image of a still life painting that I got off the web. You can selectively mask out the orange and replace it with a baseball in this way: invoke> a baseball -I /path/to/still_life.png -tm orange The clipseg classifier produces a confidence score for each region it identifies. Generally regions that score above 0.5 are reliable, but if you are getting too much or too little masking you can adjust the threshold down (to get more mask), or up (to get less). In this example, by passing -tm a higher value, we are insisting on a tigher mask. However, if you make it too high, the orange may not be picked up at all! invoke> a baseball -I /path/to/breakfast.png -tm orange 0 .6 The !mask command may be useful for debugging problems with the text2mask feature. The syntax is !mask /path/to/image.png -tm <text> <threshold> It will generate three files: The image with the selected area highlighted. it will be named XXXXX. . .selected.png The image with the un-selected area highlighted. it will be named XXXXX. . .deselected.png The image with the selected area converted into a black and white image according to the threshold level it will be named XXXXX. . .masked.png The .masked.png file can then be directly passed to the invoke> prompt in the CLI via the -M argument. Do not attempt this with the selected.png or deselected.png files, as they contain some transparency throughout the image and will not produce the desired results. Here is an example of how !mask works: invoke> !mask ./test-pictures/curly.png -tm hair 0 .5 >> generating masks from ./test-pictures/curly.png >> Initializing clipseg model for text to mask inference Outputs: [ 941 .1 ] outputs/img-samples/000019.curly.hair.deselected.png: !mask ./test-pictures/curly.png -tm hair 0 .5 [ 941 .2 ] outputs/img-samples/000019.curly.hair.selected.png: !mask ./test-pictures/curly.png -tm hair 0 .5 [ 941 .3 ] outputs/img-samples/000019.curly.hair.masked.png: !mask ./test-pictures/curly.png -tm hair 0 .5 Original image \"curly.png\" 000019.curly.hair.selected.png 000019.curly.hair.deselected.png 000019.curly.hair.masked.png It looks like we selected the hair pretty well at the 0.5 threshold (which is the default, so we didn't actually have to specify it), so let's have some fun: invoke> medusa with cobras -I ./test-pictures/curly.png -M 000019 .curly.hair.masked.png -C20 >> loaded input image of size 512x512 from ./test-pictures/curly.png ... Outputs: [ 946 ] outputs/img-samples/000024.801380492.png: \"medusa with cobras\" -s 50 -S 801380492 -W 512 -H 512 -C 20 .0 -I ./test-pictures/curly.png -A k_lms -f 0 .75 You can also skip the !mask creation step and just select the masked region directly: invoke> medusa with cobras -I ./test-pictures/curly.png -tm hair -C20 Using the RunwayML inpainting model # The RunwayML Inpainting Model v1.5 is a specialized version of Stable Diffusion v1.5 that contains extra channels specifically designed to enhance inpainting and outpainting. While it can do regular txt2img and img2img , it really shines when filling in missing regions. It has an almost uncanny ability to blend the new regions with existing ones in a semantically coherent way. To install the inpainting model, follow the instructions for installing a new model. You may use either the CLI ( invoke.py script) or directly edit the configs/models.yaml configuration file to do this. The main thing to watch out for is that the the model config option must be set up to use v1-inpainting-inference.yaml rather than the v1-inference.yaml file that is used by Stable Diffusion 1.4 and 1.5. After installation, your models.yaml should contain an entry that looks like this one: inpainting-1.5: weights: models/ldm/stable-diffusion-v1/sd-v1-5-inpainting.ckpt description: SD inpainting v1.5 config: configs/stable-diffusion/v1-inpainting-inference.yaml vae: models/ldm/stable-diffusion-v1/vae-ft-mse-840000-ema-pruned.ckpt width: 512 height: 512 As shown in the example, you may include a VAE fine-tuning weights file as well. This is strongly recommended. To use the custom inpainting model, launch invoke.py with the argument --model inpainting-1.5 or alternatively from within the script use the !switch inpainting-1.5 command to load and switch to the inpainting model. You can now do inpainting and outpainting exactly as described above, but there will (likely) be a noticeable improvement in coherence. Txt2img and Img2img will work as well. There are a few caveats to be aware of: The inpainting model is larger than the standard model, and will use nearly 4 GB of GPU VRAM. This makes it unlikely to run on a 4 GB graphics card. When operating in Img2img mode, the inpainting model is much less steerable than the standard model. It is great for making small changes, such as changing the pattern of a fabric, or slightly changing a subject's expression or hair, but the model will resist making the dramatic alterations that the standard model lets you do. While the --hires option works fine with the inpainting model, some special features, such as --embiggen are disabled. Prompt weighting ( banana++ sushi ) and merging work well with the inpainting model, but prompt swapping ( a (\"fluffy cat\").swap(\"smiling dog\") eating a hotdog ) will not have any effect due to the way the model is set up. You may use text masking (with -tm thing-to-mask ) as an effective replacement. The model tends to oversharpen image if you use high step or CFG values. If you need to do large steps, use the standard model. The --strength ( -f ) option has no effect on the inpainting model due to its fundamental differences with the standard model. It will always take the full number of steps you specify. Troubleshooting # Here are some troubleshooting tips for inpainting and outpainting. Inpainting is not changing the masked region enough! # One of the things to understand about how inpainting works is that it is equivalent to running img2img on just the masked (transparent) area. img2img builds on top of the existing image data, and therefore will attempt to preserve colors, shapes and textures to the best of its ability. Unfortunately this means that if you want to make a dramatic change in the inpainted region, for example replacing a red wall with a blue one, the algorithm will fight you. You have a couple of options. The first is to increase the values of the requested steps ( -sXXX ), strength ( -f0.XX ), and/or condition-free guidance ( -CXX.X ). If this is not working for you, a more extreme step is to provide the --inpaint_replace 0.X ( -r0.X ) option. This value ranges from 0.0 to 1.0. The higher it is the less attention the algorithm will pay to the data underneath the masked region. At high values this will enable you to replace colored regions entirely, but beware that the masked region mayl not blend in with the surrounding unmasked regions as well. Recipe for GIMP # GIMP is a popular Linux photoediting tool. Open image in GIMP. Layer->Transparency->Add Alpha Channel Use lasso tool to select region to mask Choose Select -> Float to create a floating selection Open the Layers toolbar (^L) and select \"Floating Selection\" Set opacity to a value between 0% and 99% Export as PNG In the export dialogue, Make sure the \"Save colour values from transparent pixels\" checkbox is selected. Recipe for Adobe Photoshop # Open image in Photoshop Use any of the selection tools (Marquee, Lasso, or Wand) to select the area you desire to inpaint. Because we'll be applying a mask over the area we want to preserve, you should now select the inverse by using the Shift + Ctrl + I shortcut, or right clicking and using the \"Select Inverse\" option. You'll now create a mask by selecting the image layer, and Masking the selection. Make sure that you don't delete any of the underlying image, or your inpainting results will be dramatically impacted. Make sure to hide any background layers that are present. You should see the mask applied to your image layer, and the image on your canvas should display the checkered background. Save the image as a transparent PNG by using File \u2192 Save a Copy from the menu bar, or by using the keyboard shortcut Alt + Ctrl + S After following the inpainting instructions above (either through the CLI or the Web UI), marvel at your newfound ability to selectively invoke. Lookin' good! In the export dialogue, Make sure the \"Save colour values from transparent pixels\" checkbox is selected.","title":"Inpainting"},{"location":"features/INPAINTING/#inpainting","text":"","title":" Inpainting"},{"location":"features/INPAINTING/#creating-transparent-regions-for-inpainting","text":"Inpainting is really cool. To do it, you start with an initial image and use a photoeditor to make one or more regions transparent (i.e. they have a \"hole\" in them). You then provide the path to this image at the dream> command line using the -I switch. Stable Diffusion will only paint within the transparent region. There's a catch. In the current implementation, you have to prepare the initial image correctly so that the underlying colors are preserved under the transparent area. Many imaging editing applications will by default erase the color information under the transparent pixels and replace them with white or black, which will lead to suboptimal inpainting. It often helps to apply incomplete transparency, such as any value between 1 and 99% You also must take care to export the PNG file in such a way that the color information is preserved. There is often an option in the export dialog that lets you specify this. If your photoeditor is erasing the underlying color information, dream.py will give you a big fat warning. If you can't find a way to coax your photoeditor to retain color values under transparent areas, then you can combine the -I and -M switches to provide both the original unedited image and the masked (partially transparent) image: invoke> \"man with cat on shoulder\" -I./images/man.png -M./images/man-transparent.png","title":"Creating Transparent Regions for Inpainting"},{"location":"features/INPAINTING/#masking-using-text","text":"You can also create a mask using a text prompt to select the part of the image you want to alter, using the clipseg algorithm. This works on any image, not just ones generated by InvokeAI. The --text_mask (short form -tm ) option takes two arguments. The first argument is a text description of the part of the image you wish to mask (paint over). If the text description contains a space, you must surround it with quotation marks. The optional second argument is the minimum threshold for the mask classifier's confidence score, described in more detail below. To see how this works in practice, here's an image of a still life painting that I got off the web. You can selectively mask out the orange and replace it with a baseball in this way: invoke> a baseball -I /path/to/still_life.png -tm orange The clipseg classifier produces a confidence score for each region it identifies. Generally regions that score above 0.5 are reliable, but if you are getting too much or too little masking you can adjust the threshold down (to get more mask), or up (to get less). In this example, by passing -tm a higher value, we are insisting on a tigher mask. However, if you make it too high, the orange may not be picked up at all! invoke> a baseball -I /path/to/breakfast.png -tm orange 0 .6 The !mask command may be useful for debugging problems with the text2mask feature. The syntax is !mask /path/to/image.png -tm <text> <threshold> It will generate three files: The image with the selected area highlighted. it will be named XXXXX. . .selected.png The image with the un-selected area highlighted. it will be named XXXXX. . .deselected.png The image with the selected area converted into a black and white image according to the threshold level it will be named XXXXX. . .masked.png The .masked.png file can then be directly passed to the invoke> prompt in the CLI via the -M argument. Do not attempt this with the selected.png or deselected.png files, as they contain some transparency throughout the image and will not produce the desired results. Here is an example of how !mask works: invoke> !mask ./test-pictures/curly.png -tm hair 0 .5 >> generating masks from ./test-pictures/curly.png >> Initializing clipseg model for text to mask inference Outputs: [ 941 .1 ] outputs/img-samples/000019.curly.hair.deselected.png: !mask ./test-pictures/curly.png -tm hair 0 .5 [ 941 .2 ] outputs/img-samples/000019.curly.hair.selected.png: !mask ./test-pictures/curly.png -tm hair 0 .5 [ 941 .3 ] outputs/img-samples/000019.curly.hair.masked.png: !mask ./test-pictures/curly.png -tm hair 0 .5 Original image \"curly.png\" 000019.curly.hair.selected.png 000019.curly.hair.deselected.png 000019.curly.hair.masked.png It looks like we selected the hair pretty well at the 0.5 threshold (which is the default, so we didn't actually have to specify it), so let's have some fun: invoke> medusa with cobras -I ./test-pictures/curly.png -M 000019 .curly.hair.masked.png -C20 >> loaded input image of size 512x512 from ./test-pictures/curly.png ... Outputs: [ 946 ] outputs/img-samples/000024.801380492.png: \"medusa with cobras\" -s 50 -S 801380492 -W 512 -H 512 -C 20 .0 -I ./test-pictures/curly.png -A k_lms -f 0 .75 You can also skip the !mask creation step and just select the masked region directly: invoke> medusa with cobras -I ./test-pictures/curly.png -tm hair -C20","title":"Masking using Text"},{"location":"features/INPAINTING/#using-the-runwayml-inpainting-model","text":"The RunwayML Inpainting Model v1.5 is a specialized version of Stable Diffusion v1.5 that contains extra channels specifically designed to enhance inpainting and outpainting. While it can do regular txt2img and img2img , it really shines when filling in missing regions. It has an almost uncanny ability to blend the new regions with existing ones in a semantically coherent way. To install the inpainting model, follow the instructions for installing a new model. You may use either the CLI ( invoke.py script) or directly edit the configs/models.yaml configuration file to do this. The main thing to watch out for is that the the model config option must be set up to use v1-inpainting-inference.yaml rather than the v1-inference.yaml file that is used by Stable Diffusion 1.4 and 1.5. After installation, your models.yaml should contain an entry that looks like this one: inpainting-1.5: weights: models/ldm/stable-diffusion-v1/sd-v1-5-inpainting.ckpt description: SD inpainting v1.5 config: configs/stable-diffusion/v1-inpainting-inference.yaml vae: models/ldm/stable-diffusion-v1/vae-ft-mse-840000-ema-pruned.ckpt width: 512 height: 512 As shown in the example, you may include a VAE fine-tuning weights file as well. This is strongly recommended. To use the custom inpainting model, launch invoke.py with the argument --model inpainting-1.5 or alternatively from within the script use the !switch inpainting-1.5 command to load and switch to the inpainting model. You can now do inpainting and outpainting exactly as described above, but there will (likely) be a noticeable improvement in coherence. Txt2img and Img2img will work as well. There are a few caveats to be aware of: The inpainting model is larger than the standard model, and will use nearly 4 GB of GPU VRAM. This makes it unlikely to run on a 4 GB graphics card. When operating in Img2img mode, the inpainting model is much less steerable than the standard model. It is great for making small changes, such as changing the pattern of a fabric, or slightly changing a subject's expression or hair, but the model will resist making the dramatic alterations that the standard model lets you do. While the --hires option works fine with the inpainting model, some special features, such as --embiggen are disabled. Prompt weighting ( banana++ sushi ) and merging work well with the inpainting model, but prompt swapping ( a (\"fluffy cat\").swap(\"smiling dog\") eating a hotdog ) will not have any effect due to the way the model is set up. You may use text masking (with -tm thing-to-mask ) as an effective replacement. The model tends to oversharpen image if you use high step or CFG values. If you need to do large steps, use the standard model. The --strength ( -f ) option has no effect on the inpainting model due to its fundamental differences with the standard model. It will always take the full number of steps you specify.","title":"Using the RunwayML inpainting model"},{"location":"features/INPAINTING/#troubleshooting","text":"Here are some troubleshooting tips for inpainting and outpainting.","title":"Troubleshooting"},{"location":"features/INPAINTING/#inpainting-is-not-changing-the-masked-region-enough","text":"One of the things to understand about how inpainting works is that it is equivalent to running img2img on just the masked (transparent) area. img2img builds on top of the existing image data, and therefore will attempt to preserve colors, shapes and textures to the best of its ability. Unfortunately this means that if you want to make a dramatic change in the inpainted region, for example replacing a red wall with a blue one, the algorithm will fight you. You have a couple of options. The first is to increase the values of the requested steps ( -sXXX ), strength ( -f0.XX ), and/or condition-free guidance ( -CXX.X ). If this is not working for you, a more extreme step is to provide the --inpaint_replace 0.X ( -r0.X ) option. This value ranges from 0.0 to 1.0. The higher it is the less attention the algorithm will pay to the data underneath the masked region. At high values this will enable you to replace colored regions entirely, but beware that the masked region mayl not blend in with the surrounding unmasked regions as well.","title":"Inpainting is not changing the masked region enough!"},{"location":"features/INPAINTING/#recipe-for-gimp","text":"GIMP is a popular Linux photoediting tool. Open image in GIMP. Layer->Transparency->Add Alpha Channel Use lasso tool to select region to mask Choose Select -> Float to create a floating selection Open the Layers toolbar (^L) and select \"Floating Selection\" Set opacity to a value between 0% and 99% Export as PNG In the export dialogue, Make sure the \"Save colour values from transparent pixels\" checkbox is selected.","title":"Recipe for GIMP"},{"location":"features/INPAINTING/#recipe-for-adobe-photoshop","text":"Open image in Photoshop Use any of the selection tools (Marquee, Lasso, or Wand) to select the area you desire to inpaint. Because we'll be applying a mask over the area we want to preserve, you should now select the inverse by using the Shift + Ctrl + I shortcut, or right clicking and using the \"Select Inverse\" option. You'll now create a mask by selecting the image layer, and Masking the selection. Make sure that you don't delete any of the underlying image, or your inpainting results will be dramatically impacted. Make sure to hide any background layers that are present. You should see the mask applied to your image layer, and the image on your canvas should display the checkered background. Save the image as a transparent PNG by using File \u2192 Save a Copy from the menu bar, or by using the keyboard shortcut Alt + Ctrl + S After following the inpainting instructions above (either through the CLI or the Web UI), marvel at your newfound ability to selectively invoke. Lookin' good! In the export dialogue, Make sure the \"Save colour values from transparent pixels\" checkbox is selected.","title":"Recipe for Adobe Photoshop"},{"location":"features/OTHER/","text":"Others # Google Colab # Open and follow instructions to use an isolated environment running Dream. Output Example: Seamless Tiling # The seamless tiling mode causes generated images to seamlessly tile with itself. To use it, add the --seamless option when starting the script which will result in all generated images to tile, or for each invoke> prompt as shown here: invoke > \"pond garden with lotus by claude monet\" -- seamless - s100 - n4 By default this will tile on both the X and Y axes. However, you can also specify specific axes to tile on with --seamless_axes . Possible values are x , y , and x,y : invoke > \"pond garden with lotus by claude monet\" -- seamless -- seamless_axes = x - s100 - n4 Shortcuts: Reusing Seeds # Since it is so common to reuse seeds while refining a prompt, there is now a shortcut as of version 1.11. Provide a -S (or --seed ) switch of -1 to use the seed of the most recent image generated. If you produced multiple images with the -n switch, then you can go back further using -2 , -3 , etc. up to the first image generated by the previous command. Sorry, but you can't go back further than one command. Here's an example of using this to do a quick refinement. It also illustrates using the new -G switch to turn on upscaling and face enhancement (see previous section): invoke> a cute child playing hopscotch -G0.5 [ ... ] outputs/img-samples/000039.3498014304.png: \"a cute child playing hopscotch\" -s50 -W512 -H512 -C7.5 -mk_lms -S3498014304 # I wonder what it will look like if I bump up the steps and set facial enhancement to full strength? invoke> a cute child playing hopscotch -G1.0 -s100 -S -1 reusing previous seed 3498014304 [ ... ] outputs/img-samples/000040.3498014304.png: \"a cute child playing hopscotch\" -G1.0 -s100 -W512 -H512 -C7.5 -mk_lms -S3498014304 Weighted Prompts # You may weight different sections of the prompt to tell the sampler to attach different levels of priority to them, by adding :<percent> to the end of the section you wish to up- or downweight. For example consider this prompt: tabby cat:0.25 white duck:0.75 hybrid This will tell the sampler to invest 25% of its effort on the tabby cat aspect of the image and 75% on the white duck aspect (surprisingly, this example actually works). The prompt weights can use any combination of integers and floating point numbers, and they do not need to add up to 1. Filename Format # The argument --fnformat allows to specify the filename of the image. Supported wildcards are all arguments what can be set such as perlin , seed , threshold , height , width , gfpgan_strength , sampler_name , steps , model , upscale , prompt , cfg_scale , prefix . The following prompt dream> a red car --steps 25 -C 9 .8 --perlin 0 .1 --fnformat { prompt } _steps. { steps } _cfg. { cfg_scale } _perlin. { perlin } .png generates a file with the name: outputs/img-samples/a red car_steps.25_cfg.9.8_perlin.0.1.png Thresholding and Perlin Noise Initialization Options # Two new options are the thresholding ( --threshold ) and the perlin noise initialization ( --perlin ) options. Thresholding limits the range of the latent values during optimization, which helps combat oversaturation with higher CFG scale values. Perlin noise initialization starts with a percentage (a value ranging from 0 to 1) of perlin noise mixed into the initial noise. Both features allow for more variations and options in the course of generating images. For better intuition into what these options do in practice: In generating this graphic, perlin noise at initialization was programmatically varied going across on the diagram by values 0.0, 0.1, 0.2, 0.4, 0.5, 0.6, 0.8, 0.9, 1.0; and the threshold was varied going down from 0, 1, 2, 3, 4, 5, 10, 20, 100. The other options are fixed, so the initial prompt is as follows (no thresholding or perlin noise): invoke> \"a portrait of a beautiful young lady\" -S 1950357039 -s 100 -C 20 -A k_euler_a --threshold 0 --perlin 0 Here's an example of another prompt used when setting the threshold to 5 and perlin noise to 0.2: invoke> \"a portrait of a beautiful young lady\" -S 1950357039 -s 100 -C 20 -A k_euler_a --threshold 5 --perlin 0 .2 Note currently the thresholding feature is only implemented for the k-diffusion style samplers, and empirically appears to work best with k_euler_a and k_dpm_2_a . Using 0 disables thresholding. Using 0 for perlin noise disables using perlin noise for initialization. Finally, using 1 for perlin noise uses only perlin noise for initialization. Simplified API # For programmers who wish to incorporate stable-diffusion into other products, this repository includes a simplified API for text to image generation, which lets you create images from a prompt in just three lines of code: from ldm.generate import Generate g = Generate () outputs = g.txt2img ( \"a unicorn in manhattan\" ) Outputs is a list of lists in the format [filename1,seed1],[filename2,seed2]...]. Please see ldm/generate.py for more information. A set of example scripts is coming RSN. Preload Models # In situations where you have limited internet connectivity or are blocked behind a firewall, you can use the preload script to preload the required files for Stable Diffusion to run. The preload script scripts/preload_models.py needs to be run once at least while connected to the internet. In the following runs, it will load up the cached versions of the required files from the .cache directory of the system. ( invokeai ) ~/stable-diffusion$ python3 ./scripts/preload_models.py preloading bert tokenizer... Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 28 .0/28.0 [ 00 :00< 00 :00, 49 .3kB/s ] Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 226k/226k [ 00 :00< 00 :00, 2 .79MB/s ] Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 455k/455k [ 00 :00< 00 :00, 4 .36MB/s ] Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 570 /570 [ 00 :00< 00 :00, 477kB/s ] ...success preloading kornia requirements... Downloading: \"https://github.com/DagnyT/hardnet/raw/master/pretrained/train_liberty_with_aug/checkpoint_liberty_with_aug.pth\" to /u/lstein/.cache/torch/hub/checkpoints/checkpoint_liberty_with_aug.pth 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 5 .10M/5.10M [ 00 :00< 00 :00, 101MB/s ] ...success","title":"Others"},{"location":"features/OTHER/#others","text":"","title":" Others"},{"location":"features/OTHER/#google-colab","text":"Open and follow instructions to use an isolated environment running Dream. Output Example:","title":"Google Colab"},{"location":"features/OTHER/#seamless-tiling","text":"The seamless tiling mode causes generated images to seamlessly tile with itself. To use it, add the --seamless option when starting the script which will result in all generated images to tile, or for each invoke> prompt as shown here: invoke > \"pond garden with lotus by claude monet\" -- seamless - s100 - n4 By default this will tile on both the X and Y axes. However, you can also specify specific axes to tile on with --seamless_axes . Possible values are x , y , and x,y : invoke > \"pond garden with lotus by claude monet\" -- seamless -- seamless_axes = x - s100 - n4","title":"Seamless Tiling"},{"location":"features/OTHER/#shortcuts-reusing-seeds","text":"Since it is so common to reuse seeds while refining a prompt, there is now a shortcut as of version 1.11. Provide a -S (or --seed ) switch of -1 to use the seed of the most recent image generated. If you produced multiple images with the -n switch, then you can go back further using -2 , -3 , etc. up to the first image generated by the previous command. Sorry, but you can't go back further than one command. Here's an example of using this to do a quick refinement. It also illustrates using the new -G switch to turn on upscaling and face enhancement (see previous section): invoke> a cute child playing hopscotch -G0.5 [ ... ] outputs/img-samples/000039.3498014304.png: \"a cute child playing hopscotch\" -s50 -W512 -H512 -C7.5 -mk_lms -S3498014304 # I wonder what it will look like if I bump up the steps and set facial enhancement to full strength? invoke> a cute child playing hopscotch -G1.0 -s100 -S -1 reusing previous seed 3498014304 [ ... ] outputs/img-samples/000040.3498014304.png: \"a cute child playing hopscotch\" -G1.0 -s100 -W512 -H512 -C7.5 -mk_lms -S3498014304","title":"Shortcuts: Reusing Seeds"},{"location":"features/OTHER/#weighted-prompts","text":"You may weight different sections of the prompt to tell the sampler to attach different levels of priority to them, by adding :<percent> to the end of the section you wish to up- or downweight. For example consider this prompt: tabby cat:0.25 white duck:0.75 hybrid This will tell the sampler to invest 25% of its effort on the tabby cat aspect of the image and 75% on the white duck aspect (surprisingly, this example actually works). The prompt weights can use any combination of integers and floating point numbers, and they do not need to add up to 1.","title":"Weighted Prompts"},{"location":"features/OTHER/#filename-format","text":"The argument --fnformat allows to specify the filename of the image. Supported wildcards are all arguments what can be set such as perlin , seed , threshold , height , width , gfpgan_strength , sampler_name , steps , model , upscale , prompt , cfg_scale , prefix . The following prompt dream> a red car --steps 25 -C 9 .8 --perlin 0 .1 --fnformat { prompt } _steps. { steps } _cfg. { cfg_scale } _perlin. { perlin } .png generates a file with the name: outputs/img-samples/a red car_steps.25_cfg.9.8_perlin.0.1.png","title":"Filename Format"},{"location":"features/OTHER/#thresholding-and-perlin-noise-initialization-options","text":"Two new options are the thresholding ( --threshold ) and the perlin noise initialization ( --perlin ) options. Thresholding limits the range of the latent values during optimization, which helps combat oversaturation with higher CFG scale values. Perlin noise initialization starts with a percentage (a value ranging from 0 to 1) of perlin noise mixed into the initial noise. Both features allow for more variations and options in the course of generating images. For better intuition into what these options do in practice: In generating this graphic, perlin noise at initialization was programmatically varied going across on the diagram by values 0.0, 0.1, 0.2, 0.4, 0.5, 0.6, 0.8, 0.9, 1.0; and the threshold was varied going down from 0, 1, 2, 3, 4, 5, 10, 20, 100. The other options are fixed, so the initial prompt is as follows (no thresholding or perlin noise): invoke> \"a portrait of a beautiful young lady\" -S 1950357039 -s 100 -C 20 -A k_euler_a --threshold 0 --perlin 0 Here's an example of another prompt used when setting the threshold to 5 and perlin noise to 0.2: invoke> \"a portrait of a beautiful young lady\" -S 1950357039 -s 100 -C 20 -A k_euler_a --threshold 5 --perlin 0 .2 Note currently the thresholding feature is only implemented for the k-diffusion style samplers, and empirically appears to work best with k_euler_a and k_dpm_2_a . Using 0 disables thresholding. Using 0 for perlin noise disables using perlin noise for initialization. Finally, using 1 for perlin noise uses only perlin noise for initialization.","title":"Thresholding and Perlin Noise Initialization Options"},{"location":"features/OTHER/#simplified-api","text":"For programmers who wish to incorporate stable-diffusion into other products, this repository includes a simplified API for text to image generation, which lets you create images from a prompt in just three lines of code: from ldm.generate import Generate g = Generate () outputs = g.txt2img ( \"a unicorn in manhattan\" ) Outputs is a list of lists in the format [filename1,seed1],[filename2,seed2]...]. Please see ldm/generate.py for more information. A set of example scripts is coming RSN.","title":"Simplified API"},{"location":"features/OTHER/#preload-models","text":"In situations where you have limited internet connectivity or are blocked behind a firewall, you can use the preload script to preload the required files for Stable Diffusion to run. The preload script scripts/preload_models.py needs to be run once at least while connected to the internet. In the following runs, it will load up the cached versions of the required files from the .cache directory of the system. ( invokeai ) ~/stable-diffusion$ python3 ./scripts/preload_models.py preloading bert tokenizer... Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 28 .0/28.0 [ 00 :00< 00 :00, 49 .3kB/s ] Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 226k/226k [ 00 :00< 00 :00, 2 .79MB/s ] Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 455k/455k [ 00 :00< 00 :00, 4 .36MB/s ] Downloading: 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 570 /570 [ 00 :00< 00 :00, 477kB/s ] ...success preloading kornia requirements... Downloading: \"https://github.com/DagnyT/hardnet/raw/master/pretrained/train_liberty_with_aug/checkpoint_liberty_with_aug.pth\" to /u/lstein/.cache/torch/hub/checkpoints/checkpoint_liberty_with_aug.pth 100 % | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 5 .10M/5.10M [ 00 :00< 00 :00, 101MB/s ] ...success","title":"Preload Models"},{"location":"features/OUTPAINTING/","text":"Outpainting # Outpainting and outcropping # Outpainting is a process by which the AI generates parts of the image that are outside its original frame. It can be used to fix up images in which the subject is off center, or when some detail (often the top of someone's head!) is cut off. InvokeAI supports two versions of outpainting, one called \"outpaint\" and the other \"outcrop.\" They work slightly differently and each has its advantages and drawbacks. Outpainting # Outpainting is the same as inpainting, except that the painting occurs in the regions outside of the original image. To outpaint using the invoke.py command line script, prepare an image in which the borders to be extended are pure black. Add an alpha channel (if there isn't one already), and make the borders completely transparent and the interior completely opaque. If you wish to modify the interior as well, you may create transparent holes in the transparency layer, which img2img will paint into as usual. Pass the image as the argument to the -I switch as you would for regular inpainting: invoke> a stream by a river -I /path/to/transparent_img.png You'll likely be delighted by the results. Tips # Do not try to expand the image too much at once. Generally it is best to expand the margins in 64-pixel increments. 128 pixels often works, but your mileage may vary depending on the nature of the image you are trying to outpaint into. There are a series of switches that can be used to adjust how the inpainting algorithm operates. In particular, you can use these to minimize the seam that sometimes appears between the original image and the extended part. These switches are: --seam_size SEAM_SIZE Size of the mask around the seam between original and outpainted image (0) --seam_blur SEAM_BLUR The amount to blur the seam inwards (0) --seam_strength STRENGTH The img2img strength to use when filling the seam (0.7) --seam_steps SEAM_STEPS The number of steps to use to fill the seam. (10) --tile_size TILE_SIZE The tile size to use for filling outpaint areas (32) Outcrop # The outcrop extension gives you a convenient !fix postprocessing command that allows you to extend a previously-generated image in 64 pixel increments in any direction. You can apply the module to any image previously-generated by InvokeAI. Note that it works with arbitrary PNG photographs, but not currently with JPG or other formats. Outcropping is particularly effective when combined with the runwayML custom inpainting model . Consider this image: Pretty nice, but it's annoying that the top of her head is cut off. She's also a bit off center. Let's fix that! invoke> !fix images/curly.png --outcrop top 128 right 64 bottom 64 This is saying to apply the outcrop extension by extending the top of the image by 128 pixels, and the right and bottom of the image by 64 pixels. You can use any combination of top|left|right|bottom, and specify any number of pixels to extend. You can also abbreviate --outcrop to -c . The result looks like this: The new image is larger than the original (576x704) because 64 pixels were added to the top and right sides. You will need enough VRAM to process an image of this size. A number of caveats: Although you can specify any pixel values, they will be rounded up to the nearest multiple of 64. Smaller values are better. Larger extensions are more likely to generate artefacts. However, if you wish you can run the !fix command repeatedly to cautiously expand the image. The extension is stochastic, meaning that each time you run it you'll get a slightly different result. You can run it repeatedly until you get an image you like. Unfortunately !fix does not currently respect the -n ( --iterations ) argument. Your results will be much better if you use the inpaint-1.5 model released by runwayML and installed by default by scripts/preload_models.py . This model was trained specifically to harmoniously fill in image gaps. The standard model will work as well, but you may notice color discontinuities at the border. When using the inpaint-1.5 model, you may notice subtle changes to the area within the original image. This is because the model performs an encoding/decoding on the image as a whole. This does not occur with the standard model. Outpaint # The outpaint extension does the same thing, but with subtle differences. Starting with the same image, here is how we would add an additional 64 pixels to the top of the image: invoke> !fix images/curly.png --out_direction top 64 (you can abbreviate --out_direction as -D . The result is shown here: Although the effect is similar, there are significant differences from outcropping: You can only specify one direction to extend at a time. The image is not resized. Instead, the image is shifted by the specified number of pixels. If you look carefully, you'll see that less of the lady's torso is visible in the image. Because the image dimensions remain the same, there's no rounding to multiples of 64. Attempting to outpaint larger areas will frequently give rise to ugly ghosting effects. For best results, try increasing the step number. If you don't specify a pixel value in -D , it will default to half of the whole image, which is likely not what you want. Tip Neither outpaint nor outcrop are perfect, but we continue to tune and improve them. If one doesn't work, try the other. You may also wish to experiment with other img2img arguments, such as -C , -f and -s .","title":"Outpainting"},{"location":"features/OUTPAINTING/#outpainting","text":"","title":" Outpainting"},{"location":"features/OUTPAINTING/#outpainting-and-outcropping","text":"Outpainting is a process by which the AI generates parts of the image that are outside its original frame. It can be used to fix up images in which the subject is off center, or when some detail (often the top of someone's head!) is cut off. InvokeAI supports two versions of outpainting, one called \"outpaint\" and the other \"outcrop.\" They work slightly differently and each has its advantages and drawbacks.","title":"Outpainting and outcropping"},{"location":"features/OUTPAINTING/#outpainting_1","text":"Outpainting is the same as inpainting, except that the painting occurs in the regions outside of the original image. To outpaint using the invoke.py command line script, prepare an image in which the borders to be extended are pure black. Add an alpha channel (if there isn't one already), and make the borders completely transparent and the interior completely opaque. If you wish to modify the interior as well, you may create transparent holes in the transparency layer, which img2img will paint into as usual. Pass the image as the argument to the -I switch as you would for regular inpainting: invoke> a stream by a river -I /path/to/transparent_img.png You'll likely be delighted by the results.","title":"Outpainting"},{"location":"features/OUTPAINTING/#tips","text":"Do not try to expand the image too much at once. Generally it is best to expand the margins in 64-pixel increments. 128 pixels often works, but your mileage may vary depending on the nature of the image you are trying to outpaint into. There are a series of switches that can be used to adjust how the inpainting algorithm operates. In particular, you can use these to minimize the seam that sometimes appears between the original image and the extended part. These switches are: --seam_size SEAM_SIZE Size of the mask around the seam between original and outpainted image (0) --seam_blur SEAM_BLUR The amount to blur the seam inwards (0) --seam_strength STRENGTH The img2img strength to use when filling the seam (0.7) --seam_steps SEAM_STEPS The number of steps to use to fill the seam. (10) --tile_size TILE_SIZE The tile size to use for filling outpaint areas (32)","title":"Tips"},{"location":"features/OUTPAINTING/#outcrop","text":"The outcrop extension gives you a convenient !fix postprocessing command that allows you to extend a previously-generated image in 64 pixel increments in any direction. You can apply the module to any image previously-generated by InvokeAI. Note that it works with arbitrary PNG photographs, but not currently with JPG or other formats. Outcropping is particularly effective when combined with the runwayML custom inpainting model . Consider this image: Pretty nice, but it's annoying that the top of her head is cut off. She's also a bit off center. Let's fix that! invoke> !fix images/curly.png --outcrop top 128 right 64 bottom 64 This is saying to apply the outcrop extension by extending the top of the image by 128 pixels, and the right and bottom of the image by 64 pixels. You can use any combination of top|left|right|bottom, and specify any number of pixels to extend. You can also abbreviate --outcrop to -c . The result looks like this: The new image is larger than the original (576x704) because 64 pixels were added to the top and right sides. You will need enough VRAM to process an image of this size. A number of caveats: Although you can specify any pixel values, they will be rounded up to the nearest multiple of 64. Smaller values are better. Larger extensions are more likely to generate artefacts. However, if you wish you can run the !fix command repeatedly to cautiously expand the image. The extension is stochastic, meaning that each time you run it you'll get a slightly different result. You can run it repeatedly until you get an image you like. Unfortunately !fix does not currently respect the -n ( --iterations ) argument. Your results will be much better if you use the inpaint-1.5 model released by runwayML and installed by default by scripts/preload_models.py . This model was trained specifically to harmoniously fill in image gaps. The standard model will work as well, but you may notice color discontinuities at the border. When using the inpaint-1.5 model, you may notice subtle changes to the area within the original image. This is because the model performs an encoding/decoding on the image as a whole. This does not occur with the standard model.","title":"Outcrop"},{"location":"features/OUTPAINTING/#outpaint","text":"The outpaint extension does the same thing, but with subtle differences. Starting with the same image, here is how we would add an additional 64 pixels to the top of the image: invoke> !fix images/curly.png --out_direction top 64 (you can abbreviate --out_direction as -D . The result is shown here: Although the effect is similar, there are significant differences from outcropping: You can only specify one direction to extend at a time. The image is not resized. Instead, the image is shifted by the specified number of pixels. If you look carefully, you'll see that less of the lady's torso is visible in the image. Because the image dimensions remain the same, there's no rounding to multiples of 64. Attempting to outpaint larger areas will frequently give rise to ugly ghosting effects. For best results, try increasing the step number. If you don't specify a pixel value in -D , it will default to half of the whole image, which is likely not what you want. Tip Neither outpaint nor outcrop are perfect, but we continue to tune and improve them. If one doesn't work, try the other. You may also wish to experiment with other img2img arguments, such as -C , -f and -s .","title":"Outpaint"},{"location":"features/POSTPROCESS/","text":"Postprocessing # Intro # This extension provides the ability to restore faces and upscale images. Face restoration and upscaling can be applied at the time you generate the images, or at any later time against a previously-generated PNG file, using the !fix command. Outpainting and outcropping can only be applied after the fact. Face Fixing # The default face restoration module is GFPGAN. The default upscale is Real-ESRGAN. For an alternative face restoration module, see [CodeFormer Support] below. As of version 1.14, environment.yaml will install the Real-ESRGAN package into the standard install location for python packages, and will put GFPGAN into a subdirectory of \"src\" in the InvokeAI directory. Upscaling with Real-ESRGAN should \"just work\" without further intervention. Simply pass the --upscale (-U) option on the invoke> command line, or indicate the desired scale on the popup in the Web GUI. GFPGAN requires a series of downloadable model files to work. These are loaded when you run scripts/preload_models.py . If GFPAN is failing with an error, please run the following from the InvokeAI directory: python scripts/preload_models.py If you do not run this script in advance, the GFPGAN module will attempt to download the models files the first time you try to perform facial reconstruction. Alternatively, if you have GFPGAN installed elsewhere, or if you are using an earlier version of this package which asked you to install GFPGAN in a sibling directory, you may use the --gfpgan_dir argument with invoke.py to set a custom path to your GFPGAN directory. There are other GFPGAN related boot arguments if you wish to customize further. Usage # You will now have access to two new prompt arguments. Upscaling # -U : <upscaling_factor> <upscaling_strength> The upscaling prompt argument takes two values. The first value is a scaling factor and should be set to either 2 or 4 only. This will either scale the image 2x or 4x respectively using different models. You can set the scaling stength between 0 and 1.0 to control intensity of the of the scaling. This is handy because AI upscalers generally tend to smooth out texture details. If you wish to retain some of those for natural looking results, we recommend using values between 0.5 to 0.8 . If you do not explicitly specify an upscaling_strength, it will default to 0.75. Face Restoration # -G : <facetool_strength> This prompt argument controls the strength of the face restoration that is being applied. Similar to upscaling, values between 0.5 to 0.8 are recommended. You can use either one or both without any conflicts. In cases where you use both, the image will be first upscaled and then the face restoration process will be executed to ensure you get the highest quality facial features. --save_orig When you use either -U or -G , the final result you get is upscaled or face modified. If you want to save the original Stable Diffusion generation, you can use the -save_orig prompt argument to save the original unaffected version too. Example Usage # invoke> \"superman dancing with a panda bear\" -U 2 0 .6 -G 0 .4 This also works with img2img: invoke> \"a man wearing a pineapple hat\" -I path/to/your/file.png -U 2 0 .5 -G 0 .6 Note GFPGAN and Real-ESRGAN are both memory intensive. In order to avoid crashes and memory overloads during the Stable Diffusion process, these effects are applied after Stable Diffusion has completed its work. In single image generations, you will see the output right away but when you are using multiple iterations, the images will first be generated and then upscaled and face restored after that process is complete. While the image generation is taking place, you will still be able to preview the base images. If you wish to stop during the image generation but want to upscale or face restore a particular generated image, pass it again with the same prompt and generated seed along with the -U and -G prompt arguments to perform those actions. CodeFormer Support # This repo also allows you to perform face restoration using CodeFormer . In order to setup CodeFormer to work, you need to download the models like with GFPGAN. You can do this either by running preload_models.py or by manually downloading the model file and saving it to ldm/invoke/restoration/codeformer/weights folder. You can use -ft prompt argument to swap between CodeFormer and the default GFPGAN. The above mentioned -G prompt argument will allow you to control the strength of the restoration effect. Usage # The following command will perform face restoration with CodeFormer instead of the default gfpgan. <prompt> -G 0.8 -ft codeformer Other Options # -cf - cf or CodeFormer Fidelity takes values between 0 and 1 . 0 produces high quality results but low accuracy and 1 produces lower quality results but higher accuacy to your original face. The following command will perform face restoration with CodeFormer. CodeFormer will output a result that is closely matching to the input face. <prompt> -G 1.0 -ft codeformer -cf 0.9 The following command will perform face restoration with CodeFormer. CodeFormer will output a result that is the best restoration possible. This may deviate slightly from the original face. This is an excellent option to use in situations when there is very little facial data to work with. <prompt> -G 1.0 -ft codeformer -cf 0.1 Fixing Previously-Generated Images # It is easy to apply face restoration and/or upscaling to any previously-generated file. Just use the syntax !fix path/to/file.png <options> . For example, to apply GFPGAN at strength 0.8 and upscale 2X for a file named ./outputs/img-samples/000044.2945021133.png , just run: invoke> !fix ./outputs/img-samples/000044.2945021133.png -G 0 .8 -U 2 A new file named 000044.2945021133.fixed.png will be created in the output directory. Note that the !fix command does not replace the original file, unlike the behavior at generate time. Disabling # If, for some reason, you do not wish to load the GFPGAN and/or ESRGAN libraries, you can disable them on the invoke.py command line with the --no_restore and --no_upscale options, respectively.","title":"Postprocessing"},{"location":"features/POSTPROCESS/#postprocessing","text":"","title":" Postprocessing"},{"location":"features/POSTPROCESS/#intro","text":"This extension provides the ability to restore faces and upscale images. Face restoration and upscaling can be applied at the time you generate the images, or at any later time against a previously-generated PNG file, using the !fix command. Outpainting and outcropping can only be applied after the fact.","title":"Intro"},{"location":"features/POSTPROCESS/#face-fixing","text":"The default face restoration module is GFPGAN. The default upscale is Real-ESRGAN. For an alternative face restoration module, see [CodeFormer Support] below. As of version 1.14, environment.yaml will install the Real-ESRGAN package into the standard install location for python packages, and will put GFPGAN into a subdirectory of \"src\" in the InvokeAI directory. Upscaling with Real-ESRGAN should \"just work\" without further intervention. Simply pass the --upscale (-U) option on the invoke> command line, or indicate the desired scale on the popup in the Web GUI. GFPGAN requires a series of downloadable model files to work. These are loaded when you run scripts/preload_models.py . If GFPAN is failing with an error, please run the following from the InvokeAI directory: python scripts/preload_models.py If you do not run this script in advance, the GFPGAN module will attempt to download the models files the first time you try to perform facial reconstruction. Alternatively, if you have GFPGAN installed elsewhere, or if you are using an earlier version of this package which asked you to install GFPGAN in a sibling directory, you may use the --gfpgan_dir argument with invoke.py to set a custom path to your GFPGAN directory. There are other GFPGAN related boot arguments if you wish to customize further.","title":"Face Fixing"},{"location":"features/POSTPROCESS/#usage","text":"You will now have access to two new prompt arguments.","title":"Usage"},{"location":"features/POSTPROCESS/#upscaling","text":"-U : <upscaling_factor> <upscaling_strength> The upscaling prompt argument takes two values. The first value is a scaling factor and should be set to either 2 or 4 only. This will either scale the image 2x or 4x respectively using different models. You can set the scaling stength between 0 and 1.0 to control intensity of the of the scaling. This is handy because AI upscalers generally tend to smooth out texture details. If you wish to retain some of those for natural looking results, we recommend using values between 0.5 to 0.8 . If you do not explicitly specify an upscaling_strength, it will default to 0.75.","title":"Upscaling"},{"location":"features/POSTPROCESS/#face-restoration","text":"-G : <facetool_strength> This prompt argument controls the strength of the face restoration that is being applied. Similar to upscaling, values between 0.5 to 0.8 are recommended. You can use either one or both without any conflicts. In cases where you use both, the image will be first upscaled and then the face restoration process will be executed to ensure you get the highest quality facial features. --save_orig When you use either -U or -G , the final result you get is upscaled or face modified. If you want to save the original Stable Diffusion generation, you can use the -save_orig prompt argument to save the original unaffected version too.","title":"Face Restoration"},{"location":"features/POSTPROCESS/#example-usage","text":"invoke> \"superman dancing with a panda bear\" -U 2 0 .6 -G 0 .4 This also works with img2img: invoke> \"a man wearing a pineapple hat\" -I path/to/your/file.png -U 2 0 .5 -G 0 .6 Note GFPGAN and Real-ESRGAN are both memory intensive. In order to avoid crashes and memory overloads during the Stable Diffusion process, these effects are applied after Stable Diffusion has completed its work. In single image generations, you will see the output right away but when you are using multiple iterations, the images will first be generated and then upscaled and face restored after that process is complete. While the image generation is taking place, you will still be able to preview the base images. If you wish to stop during the image generation but want to upscale or face restore a particular generated image, pass it again with the same prompt and generated seed along with the -U and -G prompt arguments to perform those actions.","title":"Example Usage"},{"location":"features/POSTPROCESS/#codeformer-support","text":"This repo also allows you to perform face restoration using CodeFormer . In order to setup CodeFormer to work, you need to download the models like with GFPGAN. You can do this either by running preload_models.py or by manually downloading the model file and saving it to ldm/invoke/restoration/codeformer/weights folder. You can use -ft prompt argument to swap between CodeFormer and the default GFPGAN. The above mentioned -G prompt argument will allow you to control the strength of the restoration effect.","title":"CodeFormer Support"},{"location":"features/POSTPROCESS/#usage_1","text":"The following command will perform face restoration with CodeFormer instead of the default gfpgan. <prompt> -G 0.8 -ft codeformer","title":"Usage"},{"location":"features/POSTPROCESS/#other-options","text":"-cf - cf or CodeFormer Fidelity takes values between 0 and 1 . 0 produces high quality results but low accuracy and 1 produces lower quality results but higher accuacy to your original face. The following command will perform face restoration with CodeFormer. CodeFormer will output a result that is closely matching to the input face. <prompt> -G 1.0 -ft codeformer -cf 0.9 The following command will perform face restoration with CodeFormer. CodeFormer will output a result that is the best restoration possible. This may deviate slightly from the original face. This is an excellent option to use in situations when there is very little facial data to work with. <prompt> -G 1.0 -ft codeformer -cf 0.1","title":"Other Options"},{"location":"features/POSTPROCESS/#fixing-previously-generated-images","text":"It is easy to apply face restoration and/or upscaling to any previously-generated file. Just use the syntax !fix path/to/file.png <options> . For example, to apply GFPGAN at strength 0.8 and upscale 2X for a file named ./outputs/img-samples/000044.2945021133.png , just run: invoke> !fix ./outputs/img-samples/000044.2945021133.png -G 0 .8 -U 2 A new file named 000044.2945021133.fixed.png will be created in the output directory. Note that the !fix command does not replace the original file, unlike the behavior at generate time.","title":"Fixing Previously-Generated Images"},{"location":"features/POSTPROCESS/#disabling","text":"If, for some reason, you do not wish to load the GFPGAN and/or ESRGAN libraries, you can disable them on the invoke.py command line with the --no_restore and --no_upscale options, respectively.","title":"Disabling"},{"location":"features/PROMPTS/","text":"Prompting-Features # Reading Prompts from a File # You can automate invoke.py by providing a text file with the prompts you want to run, one line per prompt. The text file must be composed with a text editor (e.g. Notepad) and not a word processor. Each line should look like what you would type at the invoke> prompt: a beautiful sunny day in the park, children playing -n4 -C10 stormy weather on a mountain top, goats grazing -s100 innovative packaging for a squid ' s dinner -S137038382 Then pass this file's name to invoke.py when you invoke it: ( invokeai ) ~/stable-diffusion$ python3 scripts/invoke.py --from_file \"path/to/prompts.txt\" You may read a series of prompts from standard input by providing a filename of - : ( invokeai ) ~/stable-diffusion$ echo \"a beautiful day\" | python3 scripts/invoke.py --from_file - Negative and Unconditioned Prompts # Any words between a pair of square brackets will instruct Stable Diffusion to attempt to ban the concept from the generated image. this is a test prompt [not really] to make you understand [cool] how this works. In the above statement, the words 'not really cool` will be ignored by Stable Diffusion. Here's a prompt that depicts what it does. original prompt: \"A fantastical translucent pony made of water and foam, ethereal, radiant, hyperalism, scottish folklore, digital painting, artstation, concept art, smooth, 8 k frostbite 3 engine, ultra detailed, art by artgerm and greg rutkowski and magali villeneuve\" -s 20 -W 512 -H 768 -C 7 .5 -A k_euler_a -S 1654590180 That image has a woman, so if we want the horse without a rider, we can influence the image not to have a woman by putting [woman] in the prompt, like this: \"A fantastical translucent poney made of water and foam, ethereal, radiant, hyperalism, scottish folklore, digital painting, artstation, concept art, smooth, 8 k frostbite 3 engine, ultra detailed, art by artgerm and greg rutkowski and magali villeneuve [woman]\" -s 20 -W 512 -H 768 -C 7 .5 -A k_euler_a -S 1654590180 That's nice - but say we also don't want the image to be quite so blue. We can add \"blue\" to the list of negative prompts, so it's now [woman blue]: \"A fantastical translucent poney made of water and foam, ethereal, radiant, hyperalism, scottish folklore, digital painting, artstation, concept art, smooth, 8 k frostbite 3 engine, ultra detailed, art by artgerm and greg rutkowski and magali villeneuve [woman blue]\" -s 20 -W 512 -H 768 -C 7 .5 -A k_euler_a -S 1654590180 Getting close - but there's no sense in having a saddle when our horse doesn't have a rider, so we'll add one more negative prompt: [woman blue saddle]. \"A fantastical translucent poney made of water and foam, ethereal, radiant, hyperalism, scottish folklore, digital painting, artstation, concept art, smooth, 8 k frostbite 3 engine, ultra detailed, art by artgerm and greg rutkowski and magali villeneuve [woman blue saddle]\" -s 20 -W 512 -H 768 -C 7 .5 -A k_euler_a -S 1654590180 Notes about this feature: The only requirement for words to be ignored is that they are in between a pair of square brackets. You can provide multiple words within the same bracket. You can provide multiple brackets with multiple words in different places of your prompt. That works just fine. To improve typical anatomy problems, you can add negative prompts like [bad anatomy, extra legs, extra arms, extra fingers, poorly drawn hands, poorly drawn feet, disfigured, out of frame, tiling, bad art, deformed, mutated] . Prompt Syntax Features # The InvokeAI prompting language has the following features: Attention weighting # Append a word or phrase with - or + , or a weight between 0 and 2 ( 1 =default), to decrease or increase \"attention\" (= a mix of per-token CFG weighting multiplier and, for - , a weighted blend with the prompt without the term). The following syntax is recognised: * single words without parentheses: a tall thin man picking apricots+ * single or multiple words with parentheses: a tall thin man picking (apricots)+ a tall thin man picking (apricots)- a tall thin man (picking apricots)+ a tall thin man (picking apricots)- * more effect with more symbols a tall thin man (picking apricots)++ * nesting a tall thin man (picking apricots+)++ ( apricots effectively gets +++ ) * all of the above with explicit numbers a tall thin man picking (apricots)1.1 a tall thin man (picking (apricots)1.3)1.1 . ( + is equivalent to 1.1, ++ is pow(1.1,2), +++ is pow(1.1,3), etc; - means 0.9, -- means pow(0.9,2), etc.) * attention also applies to [unconditioning] so a tall thin man picking apricots [(ladder)0.01] will very gently nudge SD away from trying to draw the man on a ladder You can use this to increase or decrease the amount of something. Starting from this prompt of a man picking apricots from a tree , let's see what happens if we increase and decrease how much attention we want Stable Diffusion to pay to the word apricots : Using - to reduce apricot-ness: a man picking apricots- from a tree a man picking apricots-- from a tree a man picking apricots--- from a tree Using + to increase apricot-ness: a man picking apricots+ from a tree a man picking apricots++ from a tree a man picking apricots+++ from a tree a man picking apricots++++ from a tree a man picking apricots+++++ from a tree You can also change the balance between different parts of a prompt. For example, below is a mountain man : And here he is with more mountain: mountain+ man mountain++ man mountain+++ man Or, alternatively, with more man: mountain man+ mountain man++ mountain man+++ mountain man++++ Blending between prompts # (\"a tall thin man picking apricots\", \"a tall thin man picking pears\").blend(1,1) The existing prompt blending using :<weight> will continue to be supported - (\"a tall thin man picking apricots\", \"a tall thin man picking pears\").blend(1,1) is equivalent to a tall thin man picking apricots:1 a tall thin man picking pears:1 in the old syntax. Attention weights can be nested inside blends. Non-normalized blends are supported by passing no_normalize as an additional argument to the blend weights, eg (\"a tall thin man picking apricots\", \"a tall thin man picking pears\").blend(1,-1,no_normalize) . very fun to explore local maxima in the feature space, but also easy to produce garbage output. See the section below on \"Prompt Blending\" for more information about how this works. Cross-Attention Control ('prompt2prompt') # Sometimes an image you generate is almost right, and you just want to change one detail without affecting the rest. You could use a photo editor and inpainting to overpaint the area, but that's a pain. Here's where prompt2prompt comes in handy. Generate an image with a given prompt, record the seed of the image, and then use the prompt2prompt syntax to substitute words in the original prompt for words in a new prompt. This works for img2img as well. a (\"fluffy cat\").swap(\"smiling dog\") eating a hotdog . quotes optional: a (fluffy cat).swap(smiling dog) eating a hotdog . for single word substitutions parentheses are also optional: a cat.swap(dog) eating a hotdog . Supports options s_start , s_end , t_start , t_end (each 0-1) loosely corresponding to bloc97's prompt_edit_spatial_start/_end and prompt_edit_tokens_start/_end but with the math swapped to make it easier to intuitively understand. Example usage: a (cat).swap(dog, s_end=0.3) eating a hotdog - the s_end argument means that the \"spatial\" (self-attention) edit will stop having any effect after 30% (=0.3) of the steps have been done, leaving Stable Diffusion with 70% of the steps where it is free to decide for itself how to reshape the cat-form into a dog form. The numbers represent a percentage through the step sequence where the edits should happen. 0 means the start (noisy starting image), 1 is the end (final image). For img2img, the step sequence does not start at 0 but instead at (1-strength) - so if strength is 0.7, s_start and s_end must both be greater than 0.3 (1-0.7) to have any effect. Convenience option shape_freedom (0-1) to specify how much \"freedom\" Stable Diffusion should have to change the shape of the subject being swapped. a (cat).swap(dog, shape_freedom=0.5) eating a hotdog . The prompt2prompt code is based off bloc97's colab . Note that prompt2prompt is not currently working with the runwayML inpainting model, and may never work due to the way this model is set up. If you attempt to use prompt2prompt you will get the original image back. However, since this model is so good at inpainting, a good substitute is to use the clipseg text masking option: invoke> a fluffy cat eating a hotdot Outputs: [1010] outputs/000025.2182095108.png: a fluffy cat eating a hotdog invoke> a smiling dog eating a hotdog -I 000025.2182095108.png -tm cat Escaping parantheses () and speech marks \"\" # If the model you are using has parentheses () or speech marks \"\" as part of its syntax, you will need to \"escape\" these using a backslash, so that (my_keyword) becomes \\(my_keyword\\) . Otherwise, the prompt parser will attempt to interpret the parentheses as part of the prompt syntax and it will get confused. Prompt Blending # You may blend together different sections of the prompt to explore the AI's latent semantic space and generate interesting (and often surprising!) variations. The syntax is: blue sphere:0.25 red cube:0.75 hybrid This will tell the sampler to blend 25% of the concept of a blue sphere with 75% of the concept of a red cube. The blend weights can use any combination of integers and floating point numbers, and they do not need to add up to 1. Everything to the left of the :XX up to the previous :XX is used for merging, so the overall effect is: 0 .25 * \"blue sphere\" + 0 .75 * \"white duck\" + hybrid Because you are exploring the \"mind\" of the AI, the AI's way of mixing two concepts may not match yours, leading to surprising effects. To illustrate, here are three images generated using various combinations of blend weights. As usual, unless you fix the seed, the prompts will give you different results each time you run them. \"blue sphere, red cube, hybrid\" # This example doesn't use melding at all and represents the default way of mixing concepts. It's interesting to see how the AI expressed the concept of \"cube\" as the four quadrants of the enclosing frame. If you look closely, there is depth there, so the enclosing frame is actually a cube. \"blue sphere:0.25 red cube:0.75 hybrid\" # Now that's interesting. We get neither a blue sphere nor a red cube, but a red sphere embedded in a brick wall, which represents a melding of concepts within the AI's \"latent space\" of semantic representations. Where is Ludwig Wittgenstein when you need him? \"blue sphere:0.75 red cube:0.25 hybrid\" # Definitely more blue-spherey. The cube is gone entirely, but it's really cool abstract art. \"blue sphere:0.5 red cube:0.5 hybrid\" # Whoa...! I see blue and red, but no spheres or cubes. Is the word \"hybrid\" summoning up the concept of some sort of scifi creature? Let's find out. \"blue sphere:0.5 red cube:0.5\" # Indeed, removing the word \"hybrid\" produces an image that is more like what we'd expect. In conclusion, prompt blending is great for exploring creative space, but can be difficult to direct. A forthcoming release of InvokeAI will feature more deterministic prompt weighting.","title":"Prompting-Features"},{"location":"features/PROMPTS/#prompting-features","text":"","title":" Prompting-Features"},{"location":"features/PROMPTS/#reading-prompts-from-a-file","text":"You can automate invoke.py by providing a text file with the prompts you want to run, one line per prompt. The text file must be composed with a text editor (e.g. Notepad) and not a word processor. Each line should look like what you would type at the invoke> prompt: a beautiful sunny day in the park, children playing -n4 -C10 stormy weather on a mountain top, goats grazing -s100 innovative packaging for a squid ' s dinner -S137038382 Then pass this file's name to invoke.py when you invoke it: ( invokeai ) ~/stable-diffusion$ python3 scripts/invoke.py --from_file \"path/to/prompts.txt\" You may read a series of prompts from standard input by providing a filename of - : ( invokeai ) ~/stable-diffusion$ echo \"a beautiful day\" | python3 scripts/invoke.py --from_file -","title":"Reading Prompts from a File"},{"location":"features/PROMPTS/#negative-and-unconditioned-prompts","text":"Any words between a pair of square brackets will instruct Stable Diffusion to attempt to ban the concept from the generated image. this is a test prompt [not really] to make you understand [cool] how this works. In the above statement, the words 'not really cool` will be ignored by Stable Diffusion. Here's a prompt that depicts what it does. original prompt: \"A fantastical translucent pony made of water and foam, ethereal, radiant, hyperalism, scottish folklore, digital painting, artstation, concept art, smooth, 8 k frostbite 3 engine, ultra detailed, art by artgerm and greg rutkowski and magali villeneuve\" -s 20 -W 512 -H 768 -C 7 .5 -A k_euler_a -S 1654590180 That image has a woman, so if we want the horse without a rider, we can influence the image not to have a woman by putting [woman] in the prompt, like this: \"A fantastical translucent poney made of water and foam, ethereal, radiant, hyperalism, scottish folklore, digital painting, artstation, concept art, smooth, 8 k frostbite 3 engine, ultra detailed, art by artgerm and greg rutkowski and magali villeneuve [woman]\" -s 20 -W 512 -H 768 -C 7 .5 -A k_euler_a -S 1654590180 That's nice - but say we also don't want the image to be quite so blue. We can add \"blue\" to the list of negative prompts, so it's now [woman blue]: \"A fantastical translucent poney made of water and foam, ethereal, radiant, hyperalism, scottish folklore, digital painting, artstation, concept art, smooth, 8 k frostbite 3 engine, ultra detailed, art by artgerm and greg rutkowski and magali villeneuve [woman blue]\" -s 20 -W 512 -H 768 -C 7 .5 -A k_euler_a -S 1654590180 Getting close - but there's no sense in having a saddle when our horse doesn't have a rider, so we'll add one more negative prompt: [woman blue saddle]. \"A fantastical translucent poney made of water and foam, ethereal, radiant, hyperalism, scottish folklore, digital painting, artstation, concept art, smooth, 8 k frostbite 3 engine, ultra detailed, art by artgerm and greg rutkowski and magali villeneuve [woman blue saddle]\" -s 20 -W 512 -H 768 -C 7 .5 -A k_euler_a -S 1654590180 Notes about this feature: The only requirement for words to be ignored is that they are in between a pair of square brackets. You can provide multiple words within the same bracket. You can provide multiple brackets with multiple words in different places of your prompt. That works just fine. To improve typical anatomy problems, you can add negative prompts like [bad anatomy, extra legs, extra arms, extra fingers, poorly drawn hands, poorly drawn feet, disfigured, out of frame, tiling, bad art, deformed, mutated] .","title":"Negative and Unconditioned Prompts"},{"location":"features/PROMPTS/#prompt-syntax-features","text":"The InvokeAI prompting language has the following features:","title":"Prompt Syntax Features"},{"location":"features/PROMPTS/#attention-weighting","text":"Append a word or phrase with - or + , or a weight between 0 and 2 ( 1 =default), to decrease or increase \"attention\" (= a mix of per-token CFG weighting multiplier and, for - , a weighted blend with the prompt without the term). The following syntax is recognised: * single words without parentheses: a tall thin man picking apricots+ * single or multiple words with parentheses: a tall thin man picking (apricots)+ a tall thin man picking (apricots)- a tall thin man (picking apricots)+ a tall thin man (picking apricots)- * more effect with more symbols a tall thin man (picking apricots)++ * nesting a tall thin man (picking apricots+)++ ( apricots effectively gets +++ ) * all of the above with explicit numbers a tall thin man picking (apricots)1.1 a tall thin man (picking (apricots)1.3)1.1 . ( + is equivalent to 1.1, ++ is pow(1.1,2), +++ is pow(1.1,3), etc; - means 0.9, -- means pow(0.9,2), etc.) * attention also applies to [unconditioning] so a tall thin man picking apricots [(ladder)0.01] will very gently nudge SD away from trying to draw the man on a ladder You can use this to increase or decrease the amount of something. Starting from this prompt of a man picking apricots from a tree , let's see what happens if we increase and decrease how much attention we want Stable Diffusion to pay to the word apricots : Using - to reduce apricot-ness: a man picking apricots- from a tree a man picking apricots-- from a tree a man picking apricots--- from a tree Using + to increase apricot-ness: a man picking apricots+ from a tree a man picking apricots++ from a tree a man picking apricots+++ from a tree a man picking apricots++++ from a tree a man picking apricots+++++ from a tree You can also change the balance between different parts of a prompt. For example, below is a mountain man : And here he is with more mountain: mountain+ man mountain++ man mountain+++ man Or, alternatively, with more man: mountain man+ mountain man++ mountain man+++ mountain man++++","title":"Attention weighting"},{"location":"features/PROMPTS/#blending-between-prompts","text":"(\"a tall thin man picking apricots\", \"a tall thin man picking pears\").blend(1,1) The existing prompt blending using :<weight> will continue to be supported - (\"a tall thin man picking apricots\", \"a tall thin man picking pears\").blend(1,1) is equivalent to a tall thin man picking apricots:1 a tall thin man picking pears:1 in the old syntax. Attention weights can be nested inside blends. Non-normalized blends are supported by passing no_normalize as an additional argument to the blend weights, eg (\"a tall thin man picking apricots\", \"a tall thin man picking pears\").blend(1,-1,no_normalize) . very fun to explore local maxima in the feature space, but also easy to produce garbage output. See the section below on \"Prompt Blending\" for more information about how this works.","title":"Blending between prompts"},{"location":"features/PROMPTS/#cross-attention-control-prompt2prompt","text":"Sometimes an image you generate is almost right, and you just want to change one detail without affecting the rest. You could use a photo editor and inpainting to overpaint the area, but that's a pain. Here's where prompt2prompt comes in handy. Generate an image with a given prompt, record the seed of the image, and then use the prompt2prompt syntax to substitute words in the original prompt for words in a new prompt. This works for img2img as well. a (\"fluffy cat\").swap(\"smiling dog\") eating a hotdog . quotes optional: a (fluffy cat).swap(smiling dog) eating a hotdog . for single word substitutions parentheses are also optional: a cat.swap(dog) eating a hotdog . Supports options s_start , s_end , t_start , t_end (each 0-1) loosely corresponding to bloc97's prompt_edit_spatial_start/_end and prompt_edit_tokens_start/_end but with the math swapped to make it easier to intuitively understand. Example usage: a (cat).swap(dog, s_end=0.3) eating a hotdog - the s_end argument means that the \"spatial\" (self-attention) edit will stop having any effect after 30% (=0.3) of the steps have been done, leaving Stable Diffusion with 70% of the steps where it is free to decide for itself how to reshape the cat-form into a dog form. The numbers represent a percentage through the step sequence where the edits should happen. 0 means the start (noisy starting image), 1 is the end (final image). For img2img, the step sequence does not start at 0 but instead at (1-strength) - so if strength is 0.7, s_start and s_end must both be greater than 0.3 (1-0.7) to have any effect. Convenience option shape_freedom (0-1) to specify how much \"freedom\" Stable Diffusion should have to change the shape of the subject being swapped. a (cat).swap(dog, shape_freedom=0.5) eating a hotdog . The prompt2prompt code is based off bloc97's colab . Note that prompt2prompt is not currently working with the runwayML inpainting model, and may never work due to the way this model is set up. If you attempt to use prompt2prompt you will get the original image back. However, since this model is so good at inpainting, a good substitute is to use the clipseg text masking option: invoke> a fluffy cat eating a hotdot Outputs: [1010] outputs/000025.2182095108.png: a fluffy cat eating a hotdog invoke> a smiling dog eating a hotdog -I 000025.2182095108.png -tm cat","title":"Cross-Attention Control ('prompt2prompt')"},{"location":"features/PROMPTS/#escaping-parantheses-and-speech-marks","text":"If the model you are using has parentheses () or speech marks \"\" as part of its syntax, you will need to \"escape\" these using a backslash, so that (my_keyword) becomes \\(my_keyword\\) . Otherwise, the prompt parser will attempt to interpret the parentheses as part of the prompt syntax and it will get confused.","title":"Escaping parantheses () and speech marks \"\""},{"location":"features/PROMPTS/#prompt-blending","text":"You may blend together different sections of the prompt to explore the AI's latent semantic space and generate interesting (and often surprising!) variations. The syntax is: blue sphere:0.25 red cube:0.75 hybrid This will tell the sampler to blend 25% of the concept of a blue sphere with 75% of the concept of a red cube. The blend weights can use any combination of integers and floating point numbers, and they do not need to add up to 1. Everything to the left of the :XX up to the previous :XX is used for merging, so the overall effect is: 0 .25 * \"blue sphere\" + 0 .75 * \"white duck\" + hybrid Because you are exploring the \"mind\" of the AI, the AI's way of mixing two concepts may not match yours, leading to surprising effects. To illustrate, here are three images generated using various combinations of blend weights. As usual, unless you fix the seed, the prompts will give you different results each time you run them.","title":"Prompt Blending"},{"location":"features/PROMPTS/#blue-sphere-red-cube-hybrid","text":"This example doesn't use melding at all and represents the default way of mixing concepts. It's interesting to see how the AI expressed the concept of \"cube\" as the four quadrants of the enclosing frame. If you look closely, there is depth there, so the enclosing frame is actually a cube.","title":"\"blue sphere, red cube, hybrid\""},{"location":"features/PROMPTS/#blue-sphere025-red-cube075-hybrid","text":"Now that's interesting. We get neither a blue sphere nor a red cube, but a red sphere embedded in a brick wall, which represents a melding of concepts within the AI's \"latent space\" of semantic representations. Where is Ludwig Wittgenstein when you need him?","title":"\"blue sphere:0.25 red cube:0.75 hybrid\""},{"location":"features/PROMPTS/#blue-sphere075-red-cube025-hybrid","text":"Definitely more blue-spherey. The cube is gone entirely, but it's really cool abstract art.","title":"\"blue sphere:0.75 red cube:0.25 hybrid\""},{"location":"features/PROMPTS/#blue-sphere05-red-cube05-hybrid","text":"Whoa...! I see blue and red, but no spheres or cubes. Is the word \"hybrid\" summoning up the concept of some sort of scifi creature? Let's find out.","title":"\"blue sphere:0.5 red cube:0.5 hybrid\""},{"location":"features/PROMPTS/#blue-sphere05-red-cube05","text":"Indeed, removing the word \"hybrid\" produces an image that is more like what we'd expect. In conclusion, prompt blending is great for exploring creative space, but can be difficult to direct. A forthcoming release of InvokeAI will feature more deterministic prompt weighting.","title":"\"blue sphere:0.5 red cube:0.5\""},{"location":"features/TEXTUAL_INVERSION/","text":"Textual Inversion # Personalizing Text-to-Image Generation # You may personalize the generated images to provide your own styles or objects by training a new LDM checkpoint and introducing a new vocabulary to the fixed model as a (.pt) embeddings file. Alternatively, you may use or train HuggingFace Concepts embeddings files (.bin) from https://huggingface.co/sd-concepts-library and its associated notebooks. Training # To train, prepare a folder that contains images sized at 512x512 and execute the following: WINDOWS # As the default backend is not available on Windows, if you're using that platform, set the environment variable PL_TORCH_DISTRIBUTED_BACKEND to gloo python3 ./main.py -t \\ --base ./configs/stable-diffusion/v1-finetune.yaml \\ --actual_resume ./models/ldm/stable-diffusion-v1/model.ckpt \\ -n my_cat \\ --gpus 0 \\ --data_root D:/textual-inversion/my_cat \\ --init_word 'cat' During the training process, files will be created in /logs/[project][time][project]/ where you can see the process. Conditioning contains the training prompts inputs, reconstruction the input images for the training epoch samples, samples scaled for a sample of the prompt and one with the init word provided. On a RTX3090, the process for SD will take ~1h @1 .6 iterations/sec. Note According to the associated paper, the optimal number of images is 3-5. Your model may not converge if you use more images than that. Training will run indefinitely, but you may wish to stop it (with ctrl-c) before the heat death of the universe, when you find a low loss epoch or around ~5000 iterations. Note that you can set a fixed limit on the number of training steps by decreasing the \"max_steps\" option in configs/stable_diffusion/v1-finetune.yaml (currently set to 4000000) Run the Model # Once the model is trained, specify the trained .pt or .bin file when starting invoke using python3 ./scripts/invoke.py \\ --embedding_path /path/to/embedding.pt Then, to utilize your subject at the invoke prompt invoke> \"a photo of *\" This also works with image2image invoke> \"waterfall and rainbow in the style of *\" --init_img = ./init-images/crude_drawing.png --strength = 0 .5 -s100 -n4 For .pt files it's also possible to train multiple tokens (modify the placeholder string in configs/stable-diffusion/v1-finetune.yaml ) and combine LDM checkpoints using: python3 ./scripts/merge_embeddings.py \\ --manager_ckpts /path/to/first/embedding.pt \\ [ </path/to/second/embedding.pt>, [ ... ]] \\ --output_path /path/to/output/embedding.pt Credit goes to rinongal and the repository Please see the repository and associated paper for details and limitations.","title":"Textual-Inversion"},{"location":"features/TEXTUAL_INVERSION/#textual-inversion","text":"","title":" Textual Inversion"},{"location":"features/TEXTUAL_INVERSION/#personalizing-text-to-image-generation","text":"You may personalize the generated images to provide your own styles or objects by training a new LDM checkpoint and introducing a new vocabulary to the fixed model as a (.pt) embeddings file. Alternatively, you may use or train HuggingFace Concepts embeddings files (.bin) from https://huggingface.co/sd-concepts-library and its associated notebooks.","title":"Personalizing Text-to-Image Generation"},{"location":"features/TEXTUAL_INVERSION/#training","text":"To train, prepare a folder that contains images sized at 512x512 and execute the following:","title":"Training"},{"location":"features/TEXTUAL_INVERSION/#windows","text":"As the default backend is not available on Windows, if you're using that platform, set the environment variable PL_TORCH_DISTRIBUTED_BACKEND to gloo python3 ./main.py -t \\ --base ./configs/stable-diffusion/v1-finetune.yaml \\ --actual_resume ./models/ldm/stable-diffusion-v1/model.ckpt \\ -n my_cat \\ --gpus 0 \\ --data_root D:/textual-inversion/my_cat \\ --init_word 'cat' During the training process, files will be created in /logs/[project][time][project]/ where you can see the process. Conditioning contains the training prompts inputs, reconstruction the input images for the training epoch samples, samples scaled for a sample of the prompt and one with the init word provided. On a RTX3090, the process for SD will take ~1h @1 .6 iterations/sec. Note According to the associated paper, the optimal number of images is 3-5. Your model may not converge if you use more images than that. Training will run indefinitely, but you may wish to stop it (with ctrl-c) before the heat death of the universe, when you find a low loss epoch or around ~5000 iterations. Note that you can set a fixed limit on the number of training steps by decreasing the \"max_steps\" option in configs/stable_diffusion/v1-finetune.yaml (currently set to 4000000)","title":"WINDOWS"},{"location":"features/TEXTUAL_INVERSION/#run-the-model","text":"Once the model is trained, specify the trained .pt or .bin file when starting invoke using python3 ./scripts/invoke.py \\ --embedding_path /path/to/embedding.pt Then, to utilize your subject at the invoke prompt invoke> \"a photo of *\" This also works with image2image invoke> \"waterfall and rainbow in the style of *\" --init_img = ./init-images/crude_drawing.png --strength = 0 .5 -s100 -n4 For .pt files it's also possible to train multiple tokens (modify the placeholder string in configs/stable-diffusion/v1-finetune.yaml ) and combine LDM checkpoints using: python3 ./scripts/merge_embeddings.py \\ --manager_ckpts /path/to/first/embedding.pt \\ [ </path/to/second/embedding.pt>, [ ... ]] \\ --output_path /path/to/output/embedding.pt Credit goes to rinongal and the repository Please see the repository and associated paper for details and limitations.","title":"Run the Model"},{"location":"features/VARIATIONS/","text":"Variations # Intro # Release 1.13 of SD-Dream adds support for image variations. You are able to do the following: Generate a series of systematic variations of an image, given a prompt. The amount of variation from one image to the next can be controlled. Given two or more variations that you like, you can combine them in a weighted fashion. This cheat sheet provides a quick guide for how this works in practice, using variations to create the desired image of Xena, Warrior Princess. Step 1 -- Find a base image that you like # The prompt we will use throughout is: \"lucy lawless as xena, warrior princess, character portrait, high resolution.\" This will be indicated as \"prompt\" in the examples below. First we let SD create a series of images in the usual way, in this case requesting six iterations: invoke> lucy lawless as xena, warrior princess, character portrait, high resolution -n6 ... Outputs: ./outputs/Xena/000001.1579445059.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S1579445059 ./outputs/Xena/000001.1880768722.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S1880768722 ./outputs/Xena/000001.332057179.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S332057179 ./outputs/Xena/000001.2224800325.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S2224800325 ./outputs/Xena/000001.465250761.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S465250761 ./outputs/Xena/000001.3357757885.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S3357757885 Seed 3357757885 looks nice Step 2 - Generating Variations # Let's try to generate some variations. Using the same seed, we pass the argument -v0.1 (or --variant_amount), which generates a series of variations each differing by a variation amount of 0.2. This number ranges from 0 to 1.0 , with higher numbers being larger amounts of variation. invoke> \"prompt\" -n6 -S3357757885 -v0.2 ... Outputs: ./outputs/Xena/000002.784039624.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 784039624 :0.2 -S3357757885 ./outputs/Xena/000002.3647897225.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.2 -S3357757885 ./outputs/Xena/000002.917731034.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 917731034 :0.2 -S3357757885 ./outputs/Xena/000002.4116285959.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 4116285959 :0.2 -S3357757885 ./outputs/Xena/000002.1614299449.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 1614299449 :0.2 -S3357757885 ./outputs/Xena/000002.1335553075.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 1335553075 :0.2 -S3357757885 Variation Sub Seeding # Note that the output for each image has a -V option giving the \"variant subseed\" for that image, consisting of a seed followed by the variation amount used to generate it. This gives us a series of closely-related variations, including the two shown here. subseed 3647897225 subseed 1614299449 I like the expression on Xena's face in the first one (subseed 3647897225), and the armor on her shoulder in the second one (subseed 1614299449). Can we combine them to get the best of both worlds? We combine the two variations using -V ( --with_variations ). Again, we must provide the seed for the originally-chosen image in order for this to work. invoke> \"prompt\" -S3357757885 -V3647897225,0.1,1614299449,0.1 Outputs: ./outputs/Xena/000003.1614299449.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1 -S3357757885 Here we are providing equal weights (0.1 and 0.1) for both the subseeds. The resulting image is close, but not exactly what I wanted: subseed 1614299449 We could either try combining the images with different weights, or we can generate more variations around the almost-but-not-quite image. We do the latter, using both the -V (combining) and -v (variation strength) options. Note that we use -n6 to generate 6 variations: invoke> \"prompt\" -S3357757885 -V3647897225,0.1,1614299449,0.1 -v0.05 -n6 Outputs: ./outputs/Xena/000004.3279757577.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1,3279757577:0.05 -S3357757885 ./outputs/Xena/000004.2853129515.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1,2853129515:0.05 -S3357757885 ./outputs/Xena/000004.3747154981.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1,3747154981:0.05 -S3357757885 ./outputs/Xena/000004.2664260391.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1,2664260391:0.05 -S3357757885 ./outputs/Xena/000004.1642517170.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1,1642517170:0.05 -S3357757885 ./outputs/Xena/000004.2183375608.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1,2183375608:0.05 -S3357757885 This produces six images, all slight variations on the combination of the chosen two images. Here's the one I like best: subseed 3747154981 As you can see, this is a very powerful tool, which when combined with subprompt weighting, gives you great control over the content and quality of your generated images. Variations and Samplers # The sampler you choose has a strong effect on variation strength. Some samplers, such as k_euler_a are very \"creative\" and produce significant amounts of image-to-image variation even when the seed is fixed and the -v argument is very low. Others are more deterministic. Feel free to experiment until you find the combination that you like. Also be aware of the Perlin Noise feature, which provides another way of introducing variability into your image generation requests.","title":"Variations"},{"location":"features/VARIATIONS/#variations","text":"","title":" Variations"},{"location":"features/VARIATIONS/#intro","text":"Release 1.13 of SD-Dream adds support for image variations. You are able to do the following: Generate a series of systematic variations of an image, given a prompt. The amount of variation from one image to the next can be controlled. Given two or more variations that you like, you can combine them in a weighted fashion. This cheat sheet provides a quick guide for how this works in practice, using variations to create the desired image of Xena, Warrior Princess.","title":"Intro"},{"location":"features/VARIATIONS/#step-1-find-a-base-image-that-you-like","text":"The prompt we will use throughout is: \"lucy lawless as xena, warrior princess, character portrait, high resolution.\" This will be indicated as \"prompt\" in the examples below. First we let SD create a series of images in the usual way, in this case requesting six iterations: invoke> lucy lawless as xena, warrior princess, character portrait, high resolution -n6 ... Outputs: ./outputs/Xena/000001.1579445059.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S1579445059 ./outputs/Xena/000001.1880768722.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S1880768722 ./outputs/Xena/000001.332057179.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S332057179 ./outputs/Xena/000001.2224800325.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S2224800325 ./outputs/Xena/000001.465250761.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S465250761 ./outputs/Xena/000001.3357757885.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S3357757885 Seed 3357757885 looks nice","title":"Step 1 -- Find a base image that you like"},{"location":"features/VARIATIONS/#step-2-generating-variations","text":"Let's try to generate some variations. Using the same seed, we pass the argument -v0.1 (or --variant_amount), which generates a series of variations each differing by a variation amount of 0.2. This number ranges from 0 to 1.0 , with higher numbers being larger amounts of variation. invoke> \"prompt\" -n6 -S3357757885 -v0.2 ... Outputs: ./outputs/Xena/000002.784039624.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 784039624 :0.2 -S3357757885 ./outputs/Xena/000002.3647897225.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.2 -S3357757885 ./outputs/Xena/000002.917731034.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 917731034 :0.2 -S3357757885 ./outputs/Xena/000002.4116285959.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 4116285959 :0.2 -S3357757885 ./outputs/Xena/000002.1614299449.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 1614299449 :0.2 -S3357757885 ./outputs/Xena/000002.1335553075.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 1335553075 :0.2 -S3357757885","title":"Step 2 - Generating Variations"},{"location":"features/VARIATIONS/#variation-sub-seeding","text":"Note that the output for each image has a -V option giving the \"variant subseed\" for that image, consisting of a seed followed by the variation amount used to generate it. This gives us a series of closely-related variations, including the two shown here. subseed 3647897225 subseed 1614299449 I like the expression on Xena's face in the first one (subseed 3647897225), and the armor on her shoulder in the second one (subseed 1614299449). Can we combine them to get the best of both worlds? We combine the two variations using -V ( --with_variations ). Again, we must provide the seed for the originally-chosen image in order for this to work. invoke> \"prompt\" -S3357757885 -V3647897225,0.1,1614299449,0.1 Outputs: ./outputs/Xena/000003.1614299449.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1 -S3357757885 Here we are providing equal weights (0.1 and 0.1) for both the subseeds. The resulting image is close, but not exactly what I wanted: subseed 1614299449 We could either try combining the images with different weights, or we can generate more variations around the almost-but-not-quite image. We do the latter, using both the -V (combining) and -v (variation strength) options. Note that we use -n6 to generate 6 variations: invoke> \"prompt\" -S3357757885 -V3647897225,0.1,1614299449,0.1 -v0.05 -n6 Outputs: ./outputs/Xena/000004.3279757577.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1,3279757577:0.05 -S3357757885 ./outputs/Xena/000004.2853129515.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1,2853129515:0.05 -S3357757885 ./outputs/Xena/000004.3747154981.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1,3747154981:0.05 -S3357757885 ./outputs/Xena/000004.2664260391.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1,2664260391:0.05 -S3357757885 ./outputs/Xena/000004.1642517170.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1,1642517170:0.05 -S3357757885 ./outputs/Xena/000004.2183375608.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225 :0.1,1614299449:0.1,2183375608:0.05 -S3357757885 This produces six images, all slight variations on the combination of the chosen two images. Here's the one I like best: subseed 3747154981 As you can see, this is a very powerful tool, which when combined with subprompt weighting, gives you great control over the content and quality of your generated images.","title":"Variation Sub Seeding"},{"location":"features/VARIATIONS/#variations-and-samplers","text":"The sampler you choose has a strong effect on variation strength. Some samplers, such as k_euler_a are very \"creative\" and produce significant amounts of image-to-image variation even when the seed is fixed and the -v argument is very low. Others are more deterministic. Feel free to experiment until you find the combination that you like. Also be aware of the Perlin Noise feature, which provides another way of introducing variability into your image generation requests.","title":"Variations and Samplers"},{"location":"features/WEB/","text":"InvokeAI Web Server # As of version 2.0.0, this distribution comes with a full-featured web server (see screenshot). To use it, run the invoke.py script by adding the --web option: ( invokeai ) ~/InvokeAI$ python3 scripts/invoke.py --web You can then connect to the server by pointing your web browser at http://localhost:9090 . To reach the server from a different machine on your LAN, you may launch the web server with the --host argument and either the IP address of the host you are running it on, or the wildcard 0.0.0.0 . For example: ( invokeai ) ~/InvokeAI$ python3 scripts/invoke.py --web --host 0 .0.0.0 Quick guided walkthrough of the WebGUI's features # While most of the WebGUI's features are intuitive, here is a guided walkthrough through its various components. The screenshot above shows the Text to Image tab of the WebGUI. There are three main sections: A control panel on the left, which contains various settings for text to image generation. The most important part is the text field (currently showing strawberry sushi ) for entering the text prompt, and the camera icon directly underneath that will render the image. We'll call this the Invoke button from now on. The current image section in the middle, which shows a large format version of the image you are currently working on. A series of buttons at the top (\"image to image\", \"Use All\", \"Use Seed\", etc) lets you modify the image in various ways. A **gallery* section on the left that contains a history of the images you have generated. These images are read and written to the directory specified at launch time in --outdir . In addition to these three elements, there are a series of icons for changing global settings, reporting bugs, and changing the theme on the upper right. There are also a series of icons to the left of the control panel (see highlighted area in the screenshot below) which select among a series of tabs for performing different types of operations. From top to bottom, these are: Text to Image - generate images from text Image to Image - from an uploaded starting image (drawing or photograph) generate a new one, modified by the text prompt Inpainting (pending) - Interactively erase portions of a starting image and have the AI fill in the erased region from a text prompt. Outpainting (pending) - Interactively add blank space to the borders of a starting image and fill in the background from a text prompt. Postprocessing (pending) - Interactively postprocess generated images using a variety of filters. The inpainting, outpainting and postprocessing tabs are currently in development. However, limited versions of their features can already be accessed through the Text to Image and Image to Image tabs. Walkthrough # The following walkthrough will exercise most (but not all) of the WebGUI's feature set. Text to Image # Launch the WebGUI using python scripts/invoke.py --web and connect to it with your browser by accessing http://localhost:9090 . If the browser and server are running on different machines on your LAN, add the option --host 0.0.0.0 to the launch command line and connect to the machine hosting the web server using its IP address or domain name. If all goes well, the WebGUI should come up and you'll see a green connected message on the upper right. Basics # Generate an image by typing strawberry sushi into the large prompt field on the upper left and then clicking on the Invoke button (the one with the Camera icon). After a short wait, you'll see a large image of sushi in the image panel, and a new thumbnail in the gallery on the right. If you need more room on the screen, you can turn the gallery off by clicking on the x to the right of \"Your Invocations\". You can turn it back on later by clicking the image icon that appears in the gallery's place. The images are written into the directory indicated by the --outdir option provided at script launch time. By default, this is outputs/img-samples under the InvokeAI directory. Generate a bunch of strawberry sushi images by increasing the number of requested images by adjusting the Images counter just below the Camera button. As each is generated, it will be added to the gallery. You can switch the active image by clicking on the gallery thumbnails. Try playing with different settings, including image width and height, the Sampler, the Steps and the CFG scale. Image Width and Height do what you'd expect. However, be aware that larger images consume more VRAM memory and take longer to generate. The Sampler controls how the AI selects the image to display. Some samplers are more \"creative\" than others and will produce a wider range of variations (see next section). Some samplers run faster than others. Steps controls how many noising/denoising/sampling steps the AI will take. The higher this value, the more refined the image will be, but the longer the image will take to generate. A typical strategy is to generate images with a low number of steps in order to select one to work on further, and then regenerate it using a higher number of steps. The CFG Scale controls how hard the AI tries to match the generated image to the input prompt. You can go as high or low as you like, but generally values greater than 20 won't improve things much, and values lower than 5 will produce unexpected images. There are complex interactions between Steps , CFG Scale and the Sampler , so experiment to find out what works for you. To regenerate a previously-generated image, select the image you want and click Use All . This loads the text prompt and other original settings into the control panel. If you then press Invoke it will regenerate the image exactly. You can also selectively modify the prompt or other settings to tweak the image. Alternatively, you may click on Use Seed to load just the image's seed, and leave other settings unchanged. To regenerate a Stable Diffusion image that was generated by another SD package, you need to know its text prompt and its Seed . Copy-paste the prompt into the prompt box, unset the Randomize Seed control in the control panel, and copy-paste the desired Seed into its text field. When you Invoke, you will get something similar to the original image. It will not be exact unless you also set the correct values for the original sampler, CFG, steps and dimensions, but it will (usually) be close. Variations on a theme # Let's try generating some variations. Select your favorite sushi image from the gallery to load it. Then select \"Use All\" from the list of buttons above. This will load up all the settings used to generate this image, including its unique seed. Go down to the Variations section of the Control Panel and set the button to On. Set Variation Amount to 0.2 to generate a modest number of variations on the image, and also set the Image counter to 4 . Press the invoke button. This will generate a series of related images. To obtain smaller variations, just lower the Variation Amount. You may also experiment with changing the Sampler. Some samplers generate more variability than others. k_euler_a is particularly creative, while ddim is pretty conservative. For even more variations, experiment with increasing the setting for Perlin . This adds a bit of noise to the image generation process. Note that values of Perlin noise greater than 0.15 produce poor images for several of the samplers. Facial reconstruction and upscaling # Stable Diffusion frequently produces mangled faces, particularly when there are multiple figures in the same scene. Stable Diffusion has particular issues with generating reallistic eyes. InvokeAI provides the ability to reconstruct faces using either the GFPGAN or CodeFormer libraries. For more information see POSTPROCESS . Invoke a prompt that generates a mangled face. A prompt that often gives this is \"portrait of a lawyer, \u00be shot\" (this is not intended as a slur against lawyers!) Once you have an image that needs some touching up, load it into the Image panel, and press the button with the face icon (highlighted in the first screenshot below). A dialog box will appear. Leave Strength at 0.8 and press *Restore Faces\". If all goes well, the eyes and other aspects of the face will be improved (see the second screenshot) The facial reconstruction Strength field adjusts how aggressively the face library will try to alter the face. It can be as high as 1.0, but be aware that this often softens the face airbrush style, losing some details. The default 0.8 is usually sufficient. \"Upscaling\" is the process of increasing the size of an image while retaining the sharpness. InvokeAI uses an external library called \"ESRGAN\" to do this. To invoke upscaling, simply select an image and press the HD button above it. You can select between 2X and 4X upscaling, and adjust the upscaling strength, which has much the same meaning as in facial reconstruction. Try running this on one of your previously-generated images. Finally, you can run facial reconstruction and/or upscaling automatically after each Invocation. Go to the Advanced Options section of the Control Panel and turn on Restore Face and/or Upscale . Image to Image # InvokeAI lets you take an existing image and use it as the basis for a new creation. You can use any sort of image, including a photograph, a scanned sketch, or a digital drawing, as long as it is in PNG or JPEG format. For this tutorial, we'll use files named Lincoln-and-Parrot-512.png , and Lincoln-and-Parrot-512-transparent.png . Download these images to your local machine now to continue with the walkthrough. Click on the Image to Image tab icon, which is the second icon from the top on the left-hand side of the screen: This will bring you to a screen similar to the one shown here: Drag-and-drop the Lincoln-and-Parrot image into the Image panel, or click the blank area to get an upload dialog. The image will load into an area marked Initial Image . (The WebGUI will also load the most recently-generated image from the gallery into a section on the left, but this image will be replaced in the next step.) Go to the prompt box and type old sea captain with raven on shoulder and press Invoke. A derived image will appear to the right of the original one: Experiment with the different settings. The most influential one in Image to Image is Image to Image Strength located about midway down the control panel. By default it is set to 0.75, but can range from 0.0 to 0.99. The higher the value, the more of the original image the AI will replace. A value of 0 will leave the initial image completely unchanged, while 0.99 will replace it completely. However, the Sampler and CFG Scale also influence the final result. You can also generate variations in the same way as described in Text to Image. What if we only want to change certain part(s) of the image and leave the rest intact? This is called Inpainting, and a future version of the InvokeAI web server will provide an interactive painting canvas on which you can directly draw the areas you wish to Inpaint into. For now, you can achieve this effect by using an external photoeditor tool to make one or more regions of the image transparent as described in [INPAINTING.md] and uploading that. The file Lincoln-and-Parrot-512-transparent.png is a version of the earlier image in which the area around the parrot has been replaced with transparency. Click on the \"x\" in the upper right of the Initial Image and upload the transparent version. Using the same prompt \"old sea captain with raven on shoulder\" try Invoking an image. This time, only the parrot will be replaced, leaving the rest of the original image intact: Would you like to modify a previously-generated image using the Image to Image facility? Easy! While in the Image to Image panel, hover over any of the gallery images to see a little menu of icons pop up. Click the picture icon to instantly send the selected image to Image to Image as the initial image. You can do the same from the Text to Image tab by clicking on the picture icon above the central image panel. The screenshot below shows where the \"use as initial image\" icons are located. Parting remarks # This concludes the walkthrough, but there are several more features that you can explore. Please check out the Command Line Interface documentation for further explanation of the advanced features that were not covered here. The WebGUI is only rapid development. Check back regularly for updates! Reference # Additional Options # parameter effect --web_develop Starts the web server in development mode. --web_verbose Enables verbose logging --cors [CORS ...] Additional allowed origins, comma-separated --host HOST Web server: Host or IP to listen on. Set to 0.0.0.0 to accept traffic from other devices on your network. --port PORT Web server: Port to listen on --gui Start InvokeAI GUI - This is the \"desktop mode\" version of the web app. It uses Flask to create a desktop app experience of the webserver. Web Specific Features # The web experience offers an incredibly easy-to-use experience for interacting with the InvokeAI toolkit. For detailed guidance on individual features, see the Feature-specific help documents available in this directory. Note that the latest functionality available in the CLI may not always be available in the Web interface. Dark Mode & Light Mode # The InvokeAI interface is available in a nano-carbon black & purple Dark Mode, and a \"burn your eyes out Nosferatu\" Light Mode. These can be toggled by clicking the Sun/Moon icons at the top right of the interface. Invocation Toolbar # The left side of the InvokeAI interface is available for customizing the prompt and the settings used for invoking your new image. Typing your prompt into the open text field and clicking the Invoke button will produce the image based on the settings configured in the toolbar. See below for additional documentation related to each feature: Core Prompt Settings Variations Upscaling Image to Image Inpainting Other Invocation Gallery # The currently selected --outdir (or the default outputs folder) will display all previously generated files on load. As new invocations are generated, these will be dynamically added to the gallery, and can be previewed by selecting them. Each image also has a simple set of actions (e.g., Delete, Use Seed, Use All Parameters, etc.) that can be accessed by hovering over the image. Image Workspace # When an image from the Invocation Gallery is selected, or is generated, the image will be displayed within the center of the interface. A quickbar of common image interactions are displayed along the top of the image, including: Use image in the Image to Image workflow Initialize Face Restoration on the selected file Initialize Upscaling on the selected file View File metadata and details Delete the file Acknowledgements # A huge shout-out to the core team working to make this vision a reality, including psychedelicious , Kyle0654 and blessedcoolant . hipsterusername was the team's unofficial cheerleader and added tooltips/docs.","title":"InvokeAI Web Server"},{"location":"features/WEB/#invokeai-web-server","text":"As of version 2.0.0, this distribution comes with a full-featured web server (see screenshot). To use it, run the invoke.py script by adding the --web option: ( invokeai ) ~/InvokeAI$ python3 scripts/invoke.py --web You can then connect to the server by pointing your web browser at http://localhost:9090 . To reach the server from a different machine on your LAN, you may launch the web server with the --host argument and either the IP address of the host you are running it on, or the wildcard 0.0.0.0 . For example: ( invokeai ) ~/InvokeAI$ python3 scripts/invoke.py --web --host 0 .0.0.0","title":" InvokeAI Web Server"},{"location":"features/WEB/#quick-guided-walkthrough-of-the-webguis-features","text":"While most of the WebGUI's features are intuitive, here is a guided walkthrough through its various components. The screenshot above shows the Text to Image tab of the WebGUI. There are three main sections: A control panel on the left, which contains various settings for text to image generation. The most important part is the text field (currently showing strawberry sushi ) for entering the text prompt, and the camera icon directly underneath that will render the image. We'll call this the Invoke button from now on. The current image section in the middle, which shows a large format version of the image you are currently working on. A series of buttons at the top (\"image to image\", \"Use All\", \"Use Seed\", etc) lets you modify the image in various ways. A **gallery* section on the left that contains a history of the images you have generated. These images are read and written to the directory specified at launch time in --outdir . In addition to these three elements, there are a series of icons for changing global settings, reporting bugs, and changing the theme on the upper right. There are also a series of icons to the left of the control panel (see highlighted area in the screenshot below) which select among a series of tabs for performing different types of operations. From top to bottom, these are: Text to Image - generate images from text Image to Image - from an uploaded starting image (drawing or photograph) generate a new one, modified by the text prompt Inpainting (pending) - Interactively erase portions of a starting image and have the AI fill in the erased region from a text prompt. Outpainting (pending) - Interactively add blank space to the borders of a starting image and fill in the background from a text prompt. Postprocessing (pending) - Interactively postprocess generated images using a variety of filters. The inpainting, outpainting and postprocessing tabs are currently in development. However, limited versions of their features can already be accessed through the Text to Image and Image to Image tabs.","title":"Quick guided walkthrough of the WebGUI's features"},{"location":"features/WEB/#walkthrough","text":"The following walkthrough will exercise most (but not all) of the WebGUI's feature set.","title":"Walkthrough"},{"location":"features/WEB/#text-to-image","text":"Launch the WebGUI using python scripts/invoke.py --web and connect to it with your browser by accessing http://localhost:9090 . If the browser and server are running on different machines on your LAN, add the option --host 0.0.0.0 to the launch command line and connect to the machine hosting the web server using its IP address or domain name. If all goes well, the WebGUI should come up and you'll see a green connected message on the upper right.","title":"Text to Image"},{"location":"features/WEB/#basics","text":"Generate an image by typing strawberry sushi into the large prompt field on the upper left and then clicking on the Invoke button (the one with the Camera icon). After a short wait, you'll see a large image of sushi in the image panel, and a new thumbnail in the gallery on the right. If you need more room on the screen, you can turn the gallery off by clicking on the x to the right of \"Your Invocations\". You can turn it back on later by clicking the image icon that appears in the gallery's place. The images are written into the directory indicated by the --outdir option provided at script launch time. By default, this is outputs/img-samples under the InvokeAI directory. Generate a bunch of strawberry sushi images by increasing the number of requested images by adjusting the Images counter just below the Camera button. As each is generated, it will be added to the gallery. You can switch the active image by clicking on the gallery thumbnails. Try playing with different settings, including image width and height, the Sampler, the Steps and the CFG scale. Image Width and Height do what you'd expect. However, be aware that larger images consume more VRAM memory and take longer to generate. The Sampler controls how the AI selects the image to display. Some samplers are more \"creative\" than others and will produce a wider range of variations (see next section). Some samplers run faster than others. Steps controls how many noising/denoising/sampling steps the AI will take. The higher this value, the more refined the image will be, but the longer the image will take to generate. A typical strategy is to generate images with a low number of steps in order to select one to work on further, and then regenerate it using a higher number of steps. The CFG Scale controls how hard the AI tries to match the generated image to the input prompt. You can go as high or low as you like, but generally values greater than 20 won't improve things much, and values lower than 5 will produce unexpected images. There are complex interactions between Steps , CFG Scale and the Sampler , so experiment to find out what works for you. To regenerate a previously-generated image, select the image you want and click Use All . This loads the text prompt and other original settings into the control panel. If you then press Invoke it will regenerate the image exactly. You can also selectively modify the prompt or other settings to tweak the image. Alternatively, you may click on Use Seed to load just the image's seed, and leave other settings unchanged. To regenerate a Stable Diffusion image that was generated by another SD package, you need to know its text prompt and its Seed . Copy-paste the prompt into the prompt box, unset the Randomize Seed control in the control panel, and copy-paste the desired Seed into its text field. When you Invoke, you will get something similar to the original image. It will not be exact unless you also set the correct values for the original sampler, CFG, steps and dimensions, but it will (usually) be close.","title":"Basics"},{"location":"features/WEB/#variations-on-a-theme","text":"Let's try generating some variations. Select your favorite sushi image from the gallery to load it. Then select \"Use All\" from the list of buttons above. This will load up all the settings used to generate this image, including its unique seed. Go down to the Variations section of the Control Panel and set the button to On. Set Variation Amount to 0.2 to generate a modest number of variations on the image, and also set the Image counter to 4 . Press the invoke button. This will generate a series of related images. To obtain smaller variations, just lower the Variation Amount. You may also experiment with changing the Sampler. Some samplers generate more variability than others. k_euler_a is particularly creative, while ddim is pretty conservative. For even more variations, experiment with increasing the setting for Perlin . This adds a bit of noise to the image generation process. Note that values of Perlin noise greater than 0.15 produce poor images for several of the samplers.","title":"Variations on a theme"},{"location":"features/WEB/#facial-reconstruction-and-upscaling","text":"Stable Diffusion frequently produces mangled faces, particularly when there are multiple figures in the same scene. Stable Diffusion has particular issues with generating reallistic eyes. InvokeAI provides the ability to reconstruct faces using either the GFPGAN or CodeFormer libraries. For more information see POSTPROCESS . Invoke a prompt that generates a mangled face. A prompt that often gives this is \"portrait of a lawyer, \u00be shot\" (this is not intended as a slur against lawyers!) Once you have an image that needs some touching up, load it into the Image panel, and press the button with the face icon (highlighted in the first screenshot below). A dialog box will appear. Leave Strength at 0.8 and press *Restore Faces\". If all goes well, the eyes and other aspects of the face will be improved (see the second screenshot) The facial reconstruction Strength field adjusts how aggressively the face library will try to alter the face. It can be as high as 1.0, but be aware that this often softens the face airbrush style, losing some details. The default 0.8 is usually sufficient. \"Upscaling\" is the process of increasing the size of an image while retaining the sharpness. InvokeAI uses an external library called \"ESRGAN\" to do this. To invoke upscaling, simply select an image and press the HD button above it. You can select between 2X and 4X upscaling, and adjust the upscaling strength, which has much the same meaning as in facial reconstruction. Try running this on one of your previously-generated images. Finally, you can run facial reconstruction and/or upscaling automatically after each Invocation. Go to the Advanced Options section of the Control Panel and turn on Restore Face and/or Upscale .","title":"Facial reconstruction and upscaling"},{"location":"features/WEB/#image-to-image","text":"InvokeAI lets you take an existing image and use it as the basis for a new creation. You can use any sort of image, including a photograph, a scanned sketch, or a digital drawing, as long as it is in PNG or JPEG format. For this tutorial, we'll use files named Lincoln-and-Parrot-512.png , and Lincoln-and-Parrot-512-transparent.png . Download these images to your local machine now to continue with the walkthrough. Click on the Image to Image tab icon, which is the second icon from the top on the left-hand side of the screen: This will bring you to a screen similar to the one shown here: Drag-and-drop the Lincoln-and-Parrot image into the Image panel, or click the blank area to get an upload dialog. The image will load into an area marked Initial Image . (The WebGUI will also load the most recently-generated image from the gallery into a section on the left, but this image will be replaced in the next step.) Go to the prompt box and type old sea captain with raven on shoulder and press Invoke. A derived image will appear to the right of the original one: Experiment with the different settings. The most influential one in Image to Image is Image to Image Strength located about midway down the control panel. By default it is set to 0.75, but can range from 0.0 to 0.99. The higher the value, the more of the original image the AI will replace. A value of 0 will leave the initial image completely unchanged, while 0.99 will replace it completely. However, the Sampler and CFG Scale also influence the final result. You can also generate variations in the same way as described in Text to Image. What if we only want to change certain part(s) of the image and leave the rest intact? This is called Inpainting, and a future version of the InvokeAI web server will provide an interactive painting canvas on which you can directly draw the areas you wish to Inpaint into. For now, you can achieve this effect by using an external photoeditor tool to make one or more regions of the image transparent as described in [INPAINTING.md] and uploading that. The file Lincoln-and-Parrot-512-transparent.png is a version of the earlier image in which the area around the parrot has been replaced with transparency. Click on the \"x\" in the upper right of the Initial Image and upload the transparent version. Using the same prompt \"old sea captain with raven on shoulder\" try Invoking an image. This time, only the parrot will be replaced, leaving the rest of the original image intact: Would you like to modify a previously-generated image using the Image to Image facility? Easy! While in the Image to Image panel, hover over any of the gallery images to see a little menu of icons pop up. Click the picture icon to instantly send the selected image to Image to Image as the initial image. You can do the same from the Text to Image tab by clicking on the picture icon above the central image panel. The screenshot below shows where the \"use as initial image\" icons are located.","title":"Image to Image"},{"location":"features/WEB/#parting-remarks","text":"This concludes the walkthrough, but there are several more features that you can explore. Please check out the Command Line Interface documentation for further explanation of the advanced features that were not covered here. The WebGUI is only rapid development. Check back regularly for updates!","title":"Parting remarks"},{"location":"features/WEB/#reference","text":"","title":"Reference"},{"location":"features/WEB/#additional-options","text":"parameter effect --web_develop Starts the web server in development mode. --web_verbose Enables verbose logging --cors [CORS ...] Additional allowed origins, comma-separated --host HOST Web server: Host or IP to listen on. Set to 0.0.0.0 to accept traffic from other devices on your network. --port PORT Web server: Port to listen on --gui Start InvokeAI GUI - This is the \"desktop mode\" version of the web app. It uses Flask to create a desktop app experience of the webserver.","title":"Additional Options"},{"location":"features/WEB/#web-specific-features","text":"The web experience offers an incredibly easy-to-use experience for interacting with the InvokeAI toolkit. For detailed guidance on individual features, see the Feature-specific help documents available in this directory. Note that the latest functionality available in the CLI may not always be available in the Web interface.","title":"Web Specific Features"},{"location":"features/WEB/#dark-mode-light-mode","text":"The InvokeAI interface is available in a nano-carbon black & purple Dark Mode, and a \"burn your eyes out Nosferatu\" Light Mode. These can be toggled by clicking the Sun/Moon icons at the top right of the interface.","title":"Dark Mode &amp; Light Mode"},{"location":"features/WEB/#invocation-toolbar","text":"The left side of the InvokeAI interface is available for customizing the prompt and the settings used for invoking your new image. Typing your prompt into the open text field and clicking the Invoke button will produce the image based on the settings configured in the toolbar. See below for additional documentation related to each feature: Core Prompt Settings Variations Upscaling Image to Image Inpainting Other","title":"Invocation Toolbar"},{"location":"features/WEB/#invocation-gallery","text":"The currently selected --outdir (or the default outputs folder) will display all previously generated files on load. As new invocations are generated, these will be dynamically added to the gallery, and can be previewed by selecting them. Each image also has a simple set of actions (e.g., Delete, Use Seed, Use All Parameters, etc.) that can be accessed by hovering over the image.","title":"Invocation Gallery"},{"location":"features/WEB/#image-workspace","text":"When an image from the Invocation Gallery is selected, or is generated, the image will be displayed within the center of the interface. A quickbar of common image interactions are displayed along the top of the image, including: Use image in the Image to Image workflow Initialize Face Restoration on the selected file Initialize Upscaling on the selected file View File metadata and details Delete the file","title":"Image Workspace"},{"location":"features/WEB/#acknowledgements","text":"A huge shout-out to the core team working to make this vision a reality, including psychedelicious , Kyle0654 and blessedcoolant . hipsterusername was the team's unofficial cheerleader and added tooltips/docs.","title":"Acknowledgements"},{"location":"features/WEBUIHOTKEYS/","text":"WebUI Hotkey List # General # Setting Hotkey a Set All Parameters s Set Seed u Upscale r Restoration i Show Metadata Ddl Delete Image alt + a Focus prompt input shift + i Send To Image to Image ctrl + enter Start processing shift + x cancel Processing shift + d Toggle Dark Mode ` Toggle console Tabs # Setting Hotkey 1 Go to Text To Image Tab 2 Go to Image to Image Tab 3 Go to Inpainting Tab 4 Go to Outpainting Tab 5 Go to Nodes Tab 6 Go to Post Processing Tab Gallery # Setting Hotkey g Toggle Gallery left arrow Go to previous image in gallery right arrow Go to next image in gallery shift + p Pin gallery shift + up Increase gallery image size shift + down Decrease gallery image size shift + r Reset image gallery size Inpainting # Setting Hotkey [ Decrease brush size ] Increase brush size alt + [ Decrease mask opacity alt + ] Increase mask opacity b Select brush e Select eraser ctrl + z Undo brush stroke ctrl + shift + z, ctrl + y Redo brush stroke h Hide mask shift + m Invert mask shift + c Clear mask shift + j Expand canvas","title":"**WebUI Hotkey List**"},{"location":"features/WEBUIHOTKEYS/#webui-hotkey-list","text":"","title":"WebUI Hotkey List"},{"location":"features/WEBUIHOTKEYS/#general","text":"Setting Hotkey a Set All Parameters s Set Seed u Upscale r Restoration i Show Metadata Ddl Delete Image alt + a Focus prompt input shift + i Send To Image to Image ctrl + enter Start processing shift + x cancel Processing shift + d Toggle Dark Mode ` Toggle console","title":"General"},{"location":"features/WEBUIHOTKEYS/#tabs","text":"Setting Hotkey 1 Go to Text To Image Tab 2 Go to Image to Image Tab 3 Go to Inpainting Tab 4 Go to Outpainting Tab 5 Go to Nodes Tab 6 Go to Post Processing Tab","title":"Tabs"},{"location":"features/WEBUIHOTKEYS/#gallery","text":"Setting Hotkey g Toggle Gallery left arrow Go to previous image in gallery right arrow Go to next image in gallery shift + p Pin gallery shift + up Increase gallery image size shift + down Decrease gallery image size shift + r Reset image gallery size","title":"Gallery"},{"location":"features/WEBUIHOTKEYS/#inpainting","text":"Setting Hotkey [ Decrease brush size ] Increase brush size alt + [ Decrease mask opacity alt + ] Increase mask opacity b Select brush e Select eraser ctrl + z Undo brush stroke ctrl + shift + z, ctrl + y Redo brush stroke h Hide mask shift + m Invert mask shift + c Clear mask shift + j Expand canvas","title":"Inpainting"},{"location":"help/SAMPLER_CONVERGENCE/","text":"Sampler Convergence # As features keep increasing, making the right choices for your needs can become increasingly difficult. What sampler to use? And for how many steps? Do you change the CFG value? Do you use prompt weighting? Do you allow variations? Even once you have a result, do you blend it with other images? Pass it through img2img ? With what strength? Do you use inpainting to correct small details? Outpainting to extend cropped sections? The purpose of this series of documents is to help you better understand these tools, so you can make the best out of them. Feel free to contribute with your own findings! In this document, we will talk about sampler convergence. Looking for a short version? Here's a TL;DR in 3 tables. Remember Results converge as steps ( -s ) are increased (except for K_DPM_2_A and K_EULER_A ). Often at \u2265 -s100 , but may require \u2265 -s700 ). Producing a batch of candidate images at low ( -s8 to -s30 ) step counts can save you hours of computation. K_HEUN and K_DPM_2 converge in less steps (but are slower). K_DPM_2_A and K_EULER_A incorporate a lot of creativity/variability. Sampler (3 sample avg) it/s (M1 Max 64GB, 512x512) DDIM 1.89 PLMS 1.86 K_EULER 1.86 K_LMS 1.91 K_HEUN 0.95 (slower) K_DPM_2 0.95 (slower) K_DPM_2_A 0.95 (slower) K_EULER_A 1.86 suggestions For most use cases, K_LMS , K_HEUN and K_DPM_2 are the best choices (the latter 2 run 0.5x as quick, but tend to converge 2x as quick as K_LMS ). At very low steps (\u2264 -s8 ), K_HEUN and K_DPM_2 are not recommended. Use K_LMS instead. For variability, use K_EULER_A (runs 2x as quick as K_DPM_2_A ). Sampler results # Let's start by choosing a prompt and using it with each of our 8 samplers, running it for 10, 20, 30, 40, 50 and 100 steps. Anime. \"an anime girl\" -W512 -H512 -C7.5 -S3031912972 Sampler convergence # Immediately, you can notice results tend to converge -that is, as -s (step) values increase, images look more and more similar until there comes a point where the image no longer changes. You can also notice how DDIM and PLMS eventually tend to converge to K-sampler results as steps are increased. Among K-samplers, K_HEUN and K_DPM_2 seem to require the fewest steps to converge, and even at low step counts they are good indicators of the final result. And finally, K_DPM_2_A and K_EULER_A seem to do a bit of their own thing and don't keep much similarity with the rest of the samplers. Batch generation speedup # This realization is very useful because it means you don't need to create a batch of 100 images ( -n100 ) at -s100 to choose your favorite 2 or 3 images. You can produce the same 100 images at -s10 to -s30 using a K-sampler (since they converge faster), get a rough idea of the final result, choose your 2 or 3 favorite ones, and then run -s100 on those images to polish some details. The latter technique is 3-8x as quick. Example At 60s per 100 steps. A) 60s * 100 images = 6000s (100 images at -s100 , manually picking 3 favorites) B) 6s 100 images + 60s 3 images = 780s (100 images at -s10 , manually picking 3 favorites, and running those 3 at -s100 to polish details) The result is 1 hour and 40 minutes for Variant A, vs 13 minutes for Variant B. Topic convergance # Now, these results seem interesting, but do they hold for other topics? How about nature? Food? People? Animals? Let's try! Nature. \"valley landscape wallpaper, d&d art, fantasy, painted, 4k, high detail, sharp focus, washed colors, elaborate excellent painted illustration\" -W512 -H512 -C7.5 -S1458228930 With nature, you can see how initial results are even more indicative of final result -more so than with characters/people. K_HEUN and K_DPM_2 are again the quickest indicators, almost right from the start. Results also converge faster (e.g. K_HEUN converged at -s21 ). Food. \"a hamburger with a bowl of french fries\" -W512 -H512 -C7.5 -S4053222918 Again, K_HEUN and K_DPM_2 take the fewest number of steps to be good indicators of the final result. K_DPM_2_A and K_EULER_A seem to incorporate a lot of creativity/variability, capable of producing rotten hamburgers, but also of adding lettuce to the mix. And they're the only samplers that produced an actual 'bowl of fries'! Animals. \"grown tiger, full body\" -W512 -H512 -C7.5 -S3721629802 K_HEUN and K_DPM_2 once again require the least number of steps to be indicative of the final result (around -s30 ), while other samplers are still struggling with several tails or malformed back legs. It also takes longer to converge (for comparison, K_HEUN required around 150 steps to converge). This is normal, as producing human/animal faces/bodies is one of the things the model struggles the most with. For these topics, running for more steps will often increase coherence within the composition. People. \"Ultra realistic photo, (Miranda Bloom-Kerr), young, stunning model, blue eyes, blond hair, beautiful face, intricate, highly detailed, smooth, art by artgerm and greg rutkowski and alphonse mucha, stained glass\" -W512 -H512 -C7.5 -S2131956332 . This time, we will go up to 300 steps. Observing the results, it again takes longer for all samplers to converge ( K_HEUN took around 150 steps), but we can observe good indicative results much earlier (see: K_HEUN ). Conversely, DDIM and PLMS are still undergoing moderate changes (see: lace around her neck), even at -s300 . In fact, as we can see in this other experiment, some samplers can take 700+ steps to converge when generating people. Note also the point of convergence may not be the most desirable state (e.g. I prefer an earlier version of the face, more rounded), but it will probably be the most coherent arms/hands/face attributes-wise. You can always merge different images with a photo editing tool and pass it through img2img to smoothen the composition. Sampler generation times # Once we understand the concept of sampler convergence, we must look into the performance of each sampler in terms of steps (iterations) per second, as not all samplers run at the same speed. On my M1 Max with 64GB of RAM, for a 512x512 image Sampler (3 sample average) it/s DDIM 1.89 PLMS 1.86 K_EULER 1.86 K_LMS 1.91 K_HEUN 0.95 (slower) K_DPM_2 0.95 (slower) K_DPM_2_A 0.95 (slower) K_EULER_A 1.86 Combining our results with the steps per second of each sampler, three choices come out on top: K_LMS , K_HEUN and K_DPM_2 (where the latter two run 0.5x as quick but tend to converge 2x as quick as K_LMS ). For creativity and a lot of variation between iterations, K_EULER_A can be a good choice (which runs 2x as quick as K_DPM_2_A ). Additionally, image generation at very low steps (\u2264 -s8 ) is not recommended for K_HEUN and K_DPM_2 . Use K_LMS instead. Three key points # Finally, it is relevant to mention that, in general, there are 3 important moments in the process of image formation as steps increase: The (earliest) point at which an image becomes a good indicator of the final result (useful for batch generation at low step values, to then improve the quality/coherence of the chosen images via running the same prompt and seed for more steps). The (earliest) point at which an image becomes coherent, even if different from the result if steps are increased (useful for batch generation at low step values, where quality/coherence is improved via techniques other than increasing the steps -e.g. via inpainting). The point at which an image fully converges. Hence, remember that your workflow/strategy should define your optimal number of steps, even for the same prompt and seed (for example, if you seek full convergence, you may run K_LMS for -s200 in the case of the red-haired girl, but K_LMS and -s20 -taking one tenth the time- may do as well if your workflow includes adding small details, such as the missing shoulder strap, via img2img ).","title":"Sampler Convergence"},{"location":"help/SAMPLER_CONVERGENCE/#sampler-convergence","text":"As features keep increasing, making the right choices for your needs can become increasingly difficult. What sampler to use? And for how many steps? Do you change the CFG value? Do you use prompt weighting? Do you allow variations? Even once you have a result, do you blend it with other images? Pass it through img2img ? With what strength? Do you use inpainting to correct small details? Outpainting to extend cropped sections? The purpose of this series of documents is to help you better understand these tools, so you can make the best out of them. Feel free to contribute with your own findings! In this document, we will talk about sampler convergence. Looking for a short version? Here's a TL;DR in 3 tables. Remember Results converge as steps ( -s ) are increased (except for K_DPM_2_A and K_EULER_A ). Often at \u2265 -s100 , but may require \u2265 -s700 ). Producing a batch of candidate images at low ( -s8 to -s30 ) step counts can save you hours of computation. K_HEUN and K_DPM_2 converge in less steps (but are slower). K_DPM_2_A and K_EULER_A incorporate a lot of creativity/variability. Sampler (3 sample avg) it/s (M1 Max 64GB, 512x512) DDIM 1.89 PLMS 1.86 K_EULER 1.86 K_LMS 1.91 K_HEUN 0.95 (slower) K_DPM_2 0.95 (slower) K_DPM_2_A 0.95 (slower) K_EULER_A 1.86 suggestions For most use cases, K_LMS , K_HEUN and K_DPM_2 are the best choices (the latter 2 run 0.5x as quick, but tend to converge 2x as quick as K_LMS ). At very low steps (\u2264 -s8 ), K_HEUN and K_DPM_2 are not recommended. Use K_LMS instead. For variability, use K_EULER_A (runs 2x as quick as K_DPM_2_A ).","title":" Sampler Convergence"},{"location":"help/SAMPLER_CONVERGENCE/#sampler-results","text":"Let's start by choosing a prompt and using it with each of our 8 samplers, running it for 10, 20, 30, 40, 50 and 100 steps. Anime. \"an anime girl\" -W512 -H512 -C7.5 -S3031912972","title":"Sampler results"},{"location":"help/SAMPLER_CONVERGENCE/#sampler-convergence_1","text":"Immediately, you can notice results tend to converge -that is, as -s (step) values increase, images look more and more similar until there comes a point where the image no longer changes. You can also notice how DDIM and PLMS eventually tend to converge to K-sampler results as steps are increased. Among K-samplers, K_HEUN and K_DPM_2 seem to require the fewest steps to converge, and even at low step counts they are good indicators of the final result. And finally, K_DPM_2_A and K_EULER_A seem to do a bit of their own thing and don't keep much similarity with the rest of the samplers.","title":"Sampler convergence"},{"location":"help/SAMPLER_CONVERGENCE/#batch-generation-speedup","text":"This realization is very useful because it means you don't need to create a batch of 100 images ( -n100 ) at -s100 to choose your favorite 2 or 3 images. You can produce the same 100 images at -s10 to -s30 using a K-sampler (since they converge faster), get a rough idea of the final result, choose your 2 or 3 favorite ones, and then run -s100 on those images to polish some details. The latter technique is 3-8x as quick. Example At 60s per 100 steps. A) 60s * 100 images = 6000s (100 images at -s100 , manually picking 3 favorites) B) 6s 100 images + 60s 3 images = 780s (100 images at -s10 , manually picking 3 favorites, and running those 3 at -s100 to polish details) The result is 1 hour and 40 minutes for Variant A, vs 13 minutes for Variant B.","title":"Batch generation speedup"},{"location":"help/SAMPLER_CONVERGENCE/#topic-convergance","text":"Now, these results seem interesting, but do they hold for other topics? How about nature? Food? People? Animals? Let's try! Nature. \"valley landscape wallpaper, d&d art, fantasy, painted, 4k, high detail, sharp focus, washed colors, elaborate excellent painted illustration\" -W512 -H512 -C7.5 -S1458228930 With nature, you can see how initial results are even more indicative of final result -more so than with characters/people. K_HEUN and K_DPM_2 are again the quickest indicators, almost right from the start. Results also converge faster (e.g. K_HEUN converged at -s21 ). Food. \"a hamburger with a bowl of french fries\" -W512 -H512 -C7.5 -S4053222918 Again, K_HEUN and K_DPM_2 take the fewest number of steps to be good indicators of the final result. K_DPM_2_A and K_EULER_A seem to incorporate a lot of creativity/variability, capable of producing rotten hamburgers, but also of adding lettuce to the mix. And they're the only samplers that produced an actual 'bowl of fries'! Animals. \"grown tiger, full body\" -W512 -H512 -C7.5 -S3721629802 K_HEUN and K_DPM_2 once again require the least number of steps to be indicative of the final result (around -s30 ), while other samplers are still struggling with several tails or malformed back legs. It also takes longer to converge (for comparison, K_HEUN required around 150 steps to converge). This is normal, as producing human/animal faces/bodies is one of the things the model struggles the most with. For these topics, running for more steps will often increase coherence within the composition. People. \"Ultra realistic photo, (Miranda Bloom-Kerr), young, stunning model, blue eyes, blond hair, beautiful face, intricate, highly detailed, smooth, art by artgerm and greg rutkowski and alphonse mucha, stained glass\" -W512 -H512 -C7.5 -S2131956332 . This time, we will go up to 300 steps. Observing the results, it again takes longer for all samplers to converge ( K_HEUN took around 150 steps), but we can observe good indicative results much earlier (see: K_HEUN ). Conversely, DDIM and PLMS are still undergoing moderate changes (see: lace around her neck), even at -s300 . In fact, as we can see in this other experiment, some samplers can take 700+ steps to converge when generating people. Note also the point of convergence may not be the most desirable state (e.g. I prefer an earlier version of the face, more rounded), but it will probably be the most coherent arms/hands/face attributes-wise. You can always merge different images with a photo editing tool and pass it through img2img to smoothen the composition.","title":"Topic convergance"},{"location":"help/SAMPLER_CONVERGENCE/#sampler-generation-times","text":"Once we understand the concept of sampler convergence, we must look into the performance of each sampler in terms of steps (iterations) per second, as not all samplers run at the same speed. On my M1 Max with 64GB of RAM, for a 512x512 image Sampler (3 sample average) it/s DDIM 1.89 PLMS 1.86 K_EULER 1.86 K_LMS 1.91 K_HEUN 0.95 (slower) K_DPM_2 0.95 (slower) K_DPM_2_A 0.95 (slower) K_EULER_A 1.86 Combining our results with the steps per second of each sampler, three choices come out on top: K_LMS , K_HEUN and K_DPM_2 (where the latter two run 0.5x as quick but tend to converge 2x as quick as K_LMS ). For creativity and a lot of variation between iterations, K_EULER_A can be a good choice (which runs 2x as quick as K_DPM_2_A ). Additionally, image generation at very low steps (\u2264 -s8 ) is not recommended for K_HEUN and K_DPM_2 . Use K_LMS instead.","title":"Sampler generation times"},{"location":"help/SAMPLER_CONVERGENCE/#three-key-points","text":"Finally, it is relevant to mention that, in general, there are 3 important moments in the process of image formation as steps increase: The (earliest) point at which an image becomes a good indicator of the final result (useful for batch generation at low step values, to then improve the quality/coherence of the chosen images via running the same prompt and seed for more steps). The (earliest) point at which an image becomes coherent, even if different from the result if steps are increased (useful for batch generation at low step values, where quality/coherence is improved via techniques other than increasing the steps -e.g. via inpainting). The point at which an image fully converges. Hence, remember that your workflow/strategy should define your optimal number of steps, even for the same prompt and seed (for example, if you seek full convergence, you may run K_LMS for -s200 in the case of the red-haired girl, but K_LMS and -s20 -taking one tenth the time- may do as well if your workflow includes adding small details, such as the missing shoulder strap, via img2img ).","title":"Three key points"},{"location":"help/TROUBLESHOOT/","text":"F.A.Q. # Frequently-Asked-Questions # Here are a few common installation problems and their solutions. Often these are caused by incomplete installations or crashes during the install process. QUESTION # During conda env create , conda hangs indefinitely. If it is because of the last PIP step (usually stuck in the Git Clone step, you can check the detailed log by this method): export PIP_LOG = \"/tmp/pip_log.txt\" touch ${ PIP_LOG } tail -f ${ PIP_LOG } & conda env create -f environment-mac.yaml --debug --verbose killall tail rm ${ PIP_LOG } SOLUTION Conda sometimes gets stuck at the last PIP step, in which several git repositories are cloned and built. Enter the stable-diffusion directory and completely remove the src directory and all its contents. The safest way to do this is to enter the stable-diffusion directory and give the command git clean -f . If this still doesn't fix the problem, try \"conda clean -all\" and then restart at the conda env create step. To further understand the problem to checking the install lot using this method: export PIP_LOG = \"/tmp/pip_log.txt\" touch ${ PIP_LOG } tail -f ${ PIP_LOG } & conda env create -f environment-mac.yaml --debug --verbose killall tail rm ${ PIP_LOG } QUESTION # invoke.py crashes with the complaint that it can't find ldm.simplet2i.py . Or it complains that function is being passed incorrect parameters. SOLUTION # Reinstall the stable diffusion modules. Enter the stable-diffusion directory and give the command pip install -e . QUESTION # invoke.py dies, complaining of various missing modules, none of which starts with ldm . SOLUTION # From within the InvokeAI directory, run conda env update This is also frequently the solution to complaints about an unknown function in a module. QUESTION # There's a feature or bugfix in the Stable Diffusion GitHub that you want to try out. SOLUTION # Main Branch # If the fix/feature is on the main branch, enter the stable-diffusion directory and do a git pull . Usually this will be sufficient, but if you start to see errors about missing or incorrect modules, use the command pip install -e . and/or conda env update (These commands won't break anything.) pip install -e . and/or conda env update -f environment.yaml (These commands won't break anything.) Sub Branch # If the feature/fix is on a branch (e.g. \" foo-bugfix \"), the recipe is similar, but do a git pull <name of branch> . Not Committed # If the feature/fix is in a pull request that has not yet been made part of the main branch or a feature/bugfix branch, then from the page for the desired pull request, look for the line at the top that reads \" xxxx wants to merge xx commits into lstein:main from YYYYYY \". Copy the URL in YYYY. It should have the format https://github.com/<name of contributor>/stable-diffusion/tree/<name of branch> Then go to the directory above stable-diffusion and rename the directory to \" stable-diffusion.lstein \", \" stable-diffusion.old \", or anything else. You can then git clone the branch that contains the pull request: git clone https://github.com/<name of contributor>/stable-diffusion/tree/<name of branch> You will need to go through the install procedure again, but it should be fast because all the dependencies are already loaded. QUESTION # Image generation crashed with CUDA out of memory error after successful sampling. SOLUTION # Try to run script with option --free_gpu_mem This will free memory before image decoding step.","title":"F.A.Q."},{"location":"help/TROUBLESHOOT/#faq","text":"","title":" F.A.Q."},{"location":"help/TROUBLESHOOT/#frequently-asked-questions","text":"Here are a few common installation problems and their solutions. Often these are caused by incomplete installations or crashes during the install process.","title":"Frequently-Asked-Questions"},{"location":"help/TROUBLESHOOT/#question","text":"During conda env create , conda hangs indefinitely. If it is because of the last PIP step (usually stuck in the Git Clone step, you can check the detailed log by this method): export PIP_LOG = \"/tmp/pip_log.txt\" touch ${ PIP_LOG } tail -f ${ PIP_LOG } & conda env create -f environment-mac.yaml --debug --verbose killall tail rm ${ PIP_LOG } SOLUTION Conda sometimes gets stuck at the last PIP step, in which several git repositories are cloned and built. Enter the stable-diffusion directory and completely remove the src directory and all its contents. The safest way to do this is to enter the stable-diffusion directory and give the command git clean -f . If this still doesn't fix the problem, try \"conda clean -all\" and then restart at the conda env create step. To further understand the problem to checking the install lot using this method: export PIP_LOG = \"/tmp/pip_log.txt\" touch ${ PIP_LOG } tail -f ${ PIP_LOG } & conda env create -f environment-mac.yaml --debug --verbose killall tail rm ${ PIP_LOG }","title":"QUESTION"},{"location":"help/TROUBLESHOOT/#question_1","text":"invoke.py crashes with the complaint that it can't find ldm.simplet2i.py . Or it complains that function is being passed incorrect parameters.","title":"QUESTION"},{"location":"help/TROUBLESHOOT/#solution","text":"Reinstall the stable diffusion modules. Enter the stable-diffusion directory and give the command pip install -e .","title":"SOLUTION"},{"location":"help/TROUBLESHOOT/#question_2","text":"invoke.py dies, complaining of various missing modules, none of which starts with ldm .","title":"QUESTION"},{"location":"help/TROUBLESHOOT/#solution_1","text":"From within the InvokeAI directory, run conda env update This is also frequently the solution to complaints about an unknown function in a module.","title":"SOLUTION"},{"location":"help/TROUBLESHOOT/#question_3","text":"There's a feature or bugfix in the Stable Diffusion GitHub that you want to try out.","title":"QUESTION"},{"location":"help/TROUBLESHOOT/#solution_2","text":"","title":"SOLUTION"},{"location":"help/TROUBLESHOOT/#main-branch","text":"If the fix/feature is on the main branch, enter the stable-diffusion directory and do a git pull . Usually this will be sufficient, but if you start to see errors about missing or incorrect modules, use the command pip install -e . and/or conda env update (These commands won't break anything.) pip install -e . and/or conda env update -f environment.yaml (These commands won't break anything.)","title":"Main Branch"},{"location":"help/TROUBLESHOOT/#sub-branch","text":"If the feature/fix is on a branch (e.g. \" foo-bugfix \"), the recipe is similar, but do a git pull <name of branch> .","title":"Sub Branch"},{"location":"help/TROUBLESHOOT/#not-committed","text":"If the feature/fix is in a pull request that has not yet been made part of the main branch or a feature/bugfix branch, then from the page for the desired pull request, look for the line at the top that reads \" xxxx wants to merge xx commits into lstein:main from YYYYYY \". Copy the URL in YYYY. It should have the format https://github.com/<name of contributor>/stable-diffusion/tree/<name of branch> Then go to the directory above stable-diffusion and rename the directory to \" stable-diffusion.lstein \", \" stable-diffusion.old \", or anything else. You can then git clone the branch that contains the pull request: git clone https://github.com/<name of contributor>/stable-diffusion/tree/<name of branch> You will need to go through the install procedure again, but it should be fast because all the dependencies are already loaded.","title":"Not Committed"},{"location":"help/TROUBLESHOOT/#question_4","text":"Image generation crashed with CUDA out of memory error after successful sampling.","title":"QUESTION"},{"location":"help/TROUBLESHOOT/#solution_3","text":"Try to run script with option --free_gpu_mem This will free memory before image decoding step.","title":"SOLUTION"},{"location":"installation/INSTALLING_MODELS/","text":"Installing Models # Model Weight Files # The model weight files ('*.ckpt') are the Stable Diffusion \"secret sauce\". They are the product of training the AI on millions of captioned images gathered from multiple sources. Originally there was only a single Stable Diffusion weights file, which many people named model.ckpt . Now there are dozens or more that have been \"fine tuned\" to provide particulary styles, genres, or other features. InvokeAI allows you to install and run multiple model weight files and switch between them quickly in the command-line and web interfaces. This manual will guide you through installing and configuring model weight files. Base Models # InvokeAI comes with support for a good initial set of models listed in the model configuration file configs/models.yaml . They are: Model Weight File Description DOWNLOAD FROM stable-diffusion-1.5 v1-5-pruned-emaonly.ckpt Most recent version of base Stable Diffusion model https://huggingface.co/runwayml/stable-diffusion-v1-5 stable-diffusion-1.4 sd-v1-4.ckpt Previous version of base Stable Diffusion model https://huggingface.co/CompVis/stable-diffusion-v-1-4-original inpainting-1.5 sd-v1-5-inpainting.ckpt Stable Diffusion 1.5 model specialized for inpainting https://huggingface.co/runwayml/stable-diffusion-inpainting waifu-diffusion-1.3 model-epoch09-float32.ckpt Stable Diffusion 1.4 trained to produce anime images https://huggingface.co/hakurei/waifu-diffusion-v1-3 vae-ft-mse-840000-ema-pruned.ckpt A fine-tune file add-on file that improves face generation https://huggingface.co/stabilityai/sd-vae-ft-mse-original/ Note that these files are covered by an \"Ethical AI\" license which forbids certain uses. You will need to create an account on the Hugging Face website and accept the license terms before you can access the files. The predefined configuration file for InvokeAI (located at configs/models.yaml ) provides entries for each of these weights files. stable-diffusion-1.5 is the default model used, and we strongly recommend that you install this weights file if nothing else. Community-Contributed Models # There are too many to list here and more are being contributed every day. Hugging Face maintains a fast-growing repository of fine-tune (\".bin\") models that can be imported into InvokeAI by passing the --embedding_path option to the invoke.py command. This page hosts a large list of official and unofficial Stable Diffusion models and where they can be obtained. Installation # There are three ways to install weights files: During InvokeAI installation, the preload_models.py script can download them for you. You can use the command-line interface (CLI) to import, configure and modify new models files. You can download the files manually and add the appropriate entries to models.yaml . Installation via preload_models.py # This is the most automatic way. Run scripts/preload_models.py from the console. It will ask you to select which models to download and lead you through the steps of setting up a Hugging Face account if you haven't done so already. To start, from within the InvokeAI directory run the command python scripts/preload_models.py (Linux/MacOS) or python scripts\\preload_models.py (Windows): Loading Python libraries... ** INTRODUCTION ** Welcome to InvokeAI. This script will help download the Stable Diffusion weight files and other large models that are needed for text to image generation. At any point you may interrupt this program and resume later. ** WEIGHT SELECTION ** Would you like to download the Stable Diffusion model weights now? [y] Choose the weight file(s) you wish to download. Before downloading you will be given the option to view and change your selections. [1] stable-diffusion-1.5: The newest Stable Diffusion version 1.5 weight file (4.27 GB) (recommended) Download? [y] [2] inpainting-1.5: RunwayML SD 1.5 model optimized for inpainting (4.27 GB) (recommended) Download? [y] [3] stable-diffusion-1.4: The original Stable Diffusion version 1.4 weight file (4.27 GB) Download? [n] n [4] waifu-diffusion-1.3: Stable Diffusion 1.4 fine tuned on anime-styled images (4.27) Download? [n] y [5] ft-mse-improved-autoencoder-840000: StabilityAI improved autoencoder fine-tuned for human faces (recommended; 335 MB) (recommended) Download? [y] y The following weight files will be downloaded: [1] stable-diffusion-1.5* [2] inpainting-1.5 [4] waifu-diffusion-1.3 [5] ft-mse-improved-autoencoder-840000 *default Ok to download? [y] ** LICENSE AGREEMENT FOR WEIGHT FILES ** 1. To download the Stable Diffusion weight files you need to read and accept the CreativeML Responsible AI license. If you have not already done so, please create an account using the \"Sign Up\" button: https://huggingface.co You will need to verify your email address as part of the HuggingFace registration process. 2. After creating the account, login under your account and accept the license terms located here: https://huggingface.co/CompVis/stable-diffusion-v-1-4-original Press <enter> when you are ready to continue: ... When the script is complete, you will find the downloaded weights files in models/ldm/stable-diffusion-v1 and a matching configuration file in configs/models.yaml . You can run the script again to add any models you didn't select the first time. Note that as a safety measure the script will never remove a previously-installed weights file. You will have to do this manually. Installation via the CLI # You can install a new model, including any of the community-supported ones, via the command-line client's !import_model command. First download the desired model weights file and place it under models/ldm/stable-diffusion-v1/ . You may rename the weights file to something more memorable if you wish. Record the path of the weights file (e.g. models/ldm/stable-diffusion-v1/arabian-nights-1.0.ckpt ) Launch the invoke.py CLI with python scripts/invoke.py . At the invoke> command-line, enter the command !import_model <path to model> . For example: invoke> !import_model models/ldm/stable-diffusion-v1/arabian-nights-1.0.ckpt (Hint - the CLI supports file path autocompletion. Type a bit of the path name and hit in order to get a choice of possible completions.) Follow the wizard's instructions to complete installation as shown in the example here: invoke> <b>!import_model models/ldm/stable-diffusion-v1/arabian-nights-1.0.ckpt</b> >> Model import in process. Please enter the values needed to configure this model: Name for this model: <b>arabian-nights</b> Description of this model: <b>Arabian Nights Fine Tune v1.0</b> Configuration file for this model: <b>configs/stable-diffusion/v1-inference.yaml</b> Default image width: <b>512</b> Default image height: <b>512</b> >> New configuration: arabian-nights: config: configs/stable-diffusion/v1-inference.yaml description: Arabian Nights Fine Tune v1.0 height: 512 weights: models/ldm/stable-diffusion-v1/arabian-nights-1.0.ckpt width: 512 OK to import [n]? <b>y</b> >> Caching model stable-diffusion-1.4 in system RAM >> Loading waifu-diffusion from models/ldm/stable-diffusion-v1/arabian-nights-1.0.ckpt | LatentDiffusion: Running in eps-prediction mode | DiffusionWrapper has 859.52 M params. | Making attention of type 'vanilla' with 512 in_channels | Working with z of shape (1, 4, 32, 32) = 4096 dimensions. | Making attention of type 'vanilla' with 512 in_channels | Using faster float16 precision If you've previously installed the fine-tune VAE file vae-ft-mse-840000-ema-pruned.ckpt , the wizard will also ask you if you want to add this VAE to the model. The appropriate entry for this model will be added to configs/models.yaml and it will be available to use in the CLI immediately. The CLI has additional commands for switching among, viewing, editing, deleting the available models. These are described in Command Line Client , but the two most frequently-used are !models and !switch <name of model> . The first prints a table of models that InvokeAI knows about and their load status. The second will load the requested model and lets you switch back and forth quickly among loaded models. Manually editing of configs/models.yaml # If you are comfortable with a text editor then you may simply edit models.yaml directly. First you need to download the desired .ckpt file and place it in models/ldm/stable-diffusion-v1 as descirbed in step #1 in the previous section. Record the path to the weights file, e.g. models/ldm/stable-diffusion-v1/arabian-nights-1.0.ckpt Then using a text editor (e.g. the Windows Notepad application), open the file configs/models.yaml , and add a new stanza that follows this model: arabian-nights-1.0: description: A great fine-tune in Arabian Nights style weights: ./models/ldm/stable-diffusion-v1/arabian-nights-1.0.ckpt config: ./configs/stable-diffusion/v1-inference.yaml width: 512 height: 512 vae: ./models/ldm/stable-diffusion-v1/vae-ft-mse-840000-ema-pruned.ckpt default: false arabian-nights-1.0 This is the name of the model that you will refer to from within the CLI and the WebGUI when you need to load and use the model. description Any description that you want to add to the model to remind you what it is. weights Relative path to the .ckpt weights file for this model. config This is the confusingly-named configuration file for the model itself. Use ./configs/stable-diffusion/v1-inference.yaml unless the model happens to need a custom configuration, in which case the place you downloaded it from will tell you what to use instead. For example, the runwayML custom inpainting model requires the file configs/stable-diffusion/v1-inpainting-inference.yaml . This is already inclued in the InvokeAI distribution and is configured automatically for you by the preload_models.py script. vae If you want to add a VAE file to the model, then enter its path here. width, height This is the width and height of the images used to train the model. Currently they are always 512 and 512. Save the models.yaml and relaunch InvokeAI. The new model should now be available for your use.","title":"Installing Models"},{"location":"installation/INSTALLING_MODELS/#installing-models","text":"","title":" Installing Models"},{"location":"installation/INSTALLING_MODELS/#model-weight-files","text":"The model weight files ('*.ckpt') are the Stable Diffusion \"secret sauce\". They are the product of training the AI on millions of captioned images gathered from multiple sources. Originally there was only a single Stable Diffusion weights file, which many people named model.ckpt . Now there are dozens or more that have been \"fine tuned\" to provide particulary styles, genres, or other features. InvokeAI allows you to install and run multiple model weight files and switch between them quickly in the command-line and web interfaces. This manual will guide you through installing and configuring model weight files.","title":"Model Weight Files"},{"location":"installation/INSTALLING_MODELS/#base-models","text":"InvokeAI comes with support for a good initial set of models listed in the model configuration file configs/models.yaml . They are: Model Weight File Description DOWNLOAD FROM stable-diffusion-1.5 v1-5-pruned-emaonly.ckpt Most recent version of base Stable Diffusion model https://huggingface.co/runwayml/stable-diffusion-v1-5 stable-diffusion-1.4 sd-v1-4.ckpt Previous version of base Stable Diffusion model https://huggingface.co/CompVis/stable-diffusion-v-1-4-original inpainting-1.5 sd-v1-5-inpainting.ckpt Stable Diffusion 1.5 model specialized for inpainting https://huggingface.co/runwayml/stable-diffusion-inpainting waifu-diffusion-1.3 model-epoch09-float32.ckpt Stable Diffusion 1.4 trained to produce anime images https://huggingface.co/hakurei/waifu-diffusion-v1-3 vae-ft-mse-840000-ema-pruned.ckpt A fine-tune file add-on file that improves face generation https://huggingface.co/stabilityai/sd-vae-ft-mse-original/ Note that these files are covered by an \"Ethical AI\" license which forbids certain uses. You will need to create an account on the Hugging Face website and accept the license terms before you can access the files. The predefined configuration file for InvokeAI (located at configs/models.yaml ) provides entries for each of these weights files. stable-diffusion-1.5 is the default model used, and we strongly recommend that you install this weights file if nothing else.","title":"Base Models"},{"location":"installation/INSTALLING_MODELS/#community-contributed-models","text":"There are too many to list here and more are being contributed every day. Hugging Face maintains a fast-growing repository of fine-tune (\".bin\") models that can be imported into InvokeAI by passing the --embedding_path option to the invoke.py command. This page hosts a large list of official and unofficial Stable Diffusion models and where they can be obtained.","title":"Community-Contributed Models"},{"location":"installation/INSTALLING_MODELS/#installation","text":"There are three ways to install weights files: During InvokeAI installation, the preload_models.py script can download them for you. You can use the command-line interface (CLI) to import, configure and modify new models files. You can download the files manually and add the appropriate entries to models.yaml .","title":"Installation"},{"location":"installation/INSTALLING_MODELS/#installation-via-preload_modelspy","text":"This is the most automatic way. Run scripts/preload_models.py from the console. It will ask you to select which models to download and lead you through the steps of setting up a Hugging Face account if you haven't done so already. To start, from within the InvokeAI directory run the command python scripts/preload_models.py (Linux/MacOS) or python scripts\\preload_models.py (Windows): Loading Python libraries... ** INTRODUCTION ** Welcome to InvokeAI. This script will help download the Stable Diffusion weight files and other large models that are needed for text to image generation. At any point you may interrupt this program and resume later. ** WEIGHT SELECTION ** Would you like to download the Stable Diffusion model weights now? [y] Choose the weight file(s) you wish to download. Before downloading you will be given the option to view and change your selections. [1] stable-diffusion-1.5: The newest Stable Diffusion version 1.5 weight file (4.27 GB) (recommended) Download? [y] [2] inpainting-1.5: RunwayML SD 1.5 model optimized for inpainting (4.27 GB) (recommended) Download? [y] [3] stable-diffusion-1.4: The original Stable Diffusion version 1.4 weight file (4.27 GB) Download? [n] n [4] waifu-diffusion-1.3: Stable Diffusion 1.4 fine tuned on anime-styled images (4.27) Download? [n] y [5] ft-mse-improved-autoencoder-840000: StabilityAI improved autoencoder fine-tuned for human faces (recommended; 335 MB) (recommended) Download? [y] y The following weight files will be downloaded: [1] stable-diffusion-1.5* [2] inpainting-1.5 [4] waifu-diffusion-1.3 [5] ft-mse-improved-autoencoder-840000 *default Ok to download? [y] ** LICENSE AGREEMENT FOR WEIGHT FILES ** 1. To download the Stable Diffusion weight files you need to read and accept the CreativeML Responsible AI license. If you have not already done so, please create an account using the \"Sign Up\" button: https://huggingface.co You will need to verify your email address as part of the HuggingFace registration process. 2. After creating the account, login under your account and accept the license terms located here: https://huggingface.co/CompVis/stable-diffusion-v-1-4-original Press <enter> when you are ready to continue: ... When the script is complete, you will find the downloaded weights files in models/ldm/stable-diffusion-v1 and a matching configuration file in configs/models.yaml . You can run the script again to add any models you didn't select the first time. Note that as a safety measure the script will never remove a previously-installed weights file. You will have to do this manually.","title":"Installation via preload_models.py"},{"location":"installation/INSTALLING_MODELS/#installation-via-the-cli","text":"You can install a new model, including any of the community-supported ones, via the command-line client's !import_model command. First download the desired model weights file and place it under models/ldm/stable-diffusion-v1/ . You may rename the weights file to something more memorable if you wish. Record the path of the weights file (e.g. models/ldm/stable-diffusion-v1/arabian-nights-1.0.ckpt ) Launch the invoke.py CLI with python scripts/invoke.py . At the invoke> command-line, enter the command !import_model <path to model> . For example: invoke> !import_model models/ldm/stable-diffusion-v1/arabian-nights-1.0.ckpt (Hint - the CLI supports file path autocompletion. Type a bit of the path name and hit in order to get a choice of possible completions.) Follow the wizard's instructions to complete installation as shown in the example here: invoke> <b>!import_model models/ldm/stable-diffusion-v1/arabian-nights-1.0.ckpt</b> >> Model import in process. Please enter the values needed to configure this model: Name for this model: <b>arabian-nights</b> Description of this model: <b>Arabian Nights Fine Tune v1.0</b> Configuration file for this model: <b>configs/stable-diffusion/v1-inference.yaml</b> Default image width: <b>512</b> Default image height: <b>512</b> >> New configuration: arabian-nights: config: configs/stable-diffusion/v1-inference.yaml description: Arabian Nights Fine Tune v1.0 height: 512 weights: models/ldm/stable-diffusion-v1/arabian-nights-1.0.ckpt width: 512 OK to import [n]? <b>y</b> >> Caching model stable-diffusion-1.4 in system RAM >> Loading waifu-diffusion from models/ldm/stable-diffusion-v1/arabian-nights-1.0.ckpt | LatentDiffusion: Running in eps-prediction mode | DiffusionWrapper has 859.52 M params. | Making attention of type 'vanilla' with 512 in_channels | Working with z of shape (1, 4, 32, 32) = 4096 dimensions. | Making attention of type 'vanilla' with 512 in_channels | Using faster float16 precision If you've previously installed the fine-tune VAE file vae-ft-mse-840000-ema-pruned.ckpt , the wizard will also ask you if you want to add this VAE to the model. The appropriate entry for this model will be added to configs/models.yaml and it will be available to use in the CLI immediately. The CLI has additional commands for switching among, viewing, editing, deleting the available models. These are described in Command Line Client , but the two most frequently-used are !models and !switch <name of model> . The first prints a table of models that InvokeAI knows about and their load status. The second will load the requested model and lets you switch back and forth quickly among loaded models.","title":"Installation via the CLI"},{"location":"installation/INSTALLING_MODELS/#manually-editing-of-configsmodelsyaml","text":"If you are comfortable with a text editor then you may simply edit models.yaml directly. First you need to download the desired .ckpt file and place it in models/ldm/stable-diffusion-v1 as descirbed in step #1 in the previous section. Record the path to the weights file, e.g. models/ldm/stable-diffusion-v1/arabian-nights-1.0.ckpt Then using a text editor (e.g. the Windows Notepad application), open the file configs/models.yaml , and add a new stanza that follows this model: arabian-nights-1.0: description: A great fine-tune in Arabian Nights style weights: ./models/ldm/stable-diffusion-v1/arabian-nights-1.0.ckpt config: ./configs/stable-diffusion/v1-inference.yaml width: 512 height: 512 vae: ./models/ldm/stable-diffusion-v1/vae-ft-mse-840000-ema-pruned.ckpt default: false arabian-nights-1.0 This is the name of the model that you will refer to from within the CLI and the WebGUI when you need to load and use the model. description Any description that you want to add to the model to remind you what it is. weights Relative path to the .ckpt weights file for this model. config This is the confusingly-named configuration file for the model itself. Use ./configs/stable-diffusion/v1-inference.yaml unless the model happens to need a custom configuration, in which case the place you downloaded it from will tell you what to use instead. For example, the runwayML custom inpainting model requires the file configs/stable-diffusion/v1-inpainting-inference.yaml . This is already inclued in the InvokeAI distribution and is configured automatically for you by the preload_models.py script. vae If you want to add a VAE file to the model, then enter its path here. width, height This is the width and height of the images used to train the model. Currently they are always 512 and 512. Save the models.yaml and relaunch InvokeAI. The new model should now be available for your use.","title":"Manually editing of configs/models.yaml"},{"location":"installation/INSTALL_DOCKER/","text":"Docker # Before you begin # For end users: Install Stable Diffusion locally using the instructions for your OS. For developers: For container-related development tasks or for enabling easy deployment to other environments (on-premises or cloud), follow these instructions. For general use, install locally to leverage your machine's GPU. Why containers? # They provide a flexible, reliable way to build and deploy Stable Diffusion. You'll also use a Docker volume to store the largest model files and image outputs as a first step in decoupling storage and compute. Future enhancements can do this for other assets. See Processes under the Twelve-Factor App methodology for details on why running applications in such a stateless fashion is important. You can specify the target platform when building the image and running the container. You'll also need to specify the Stable Diffusion requirements file that matches the container's OS and the architecture it will run on. Developers on Apple silicon (M1/M2): You can't access your GPU cores from Docker containers and performance is reduced compared with running it directly on macOS but for development purposes it's fine. Once you're done with development tasks on your laptop you can build for the target platform and architecture and deploy to another environment with NVIDIA GPUs on-premises or in the cloud. Installation on a Linux container # Prerequisites # Install Docker # On the Docker Desktop app, go to Preferences, Resources, Advanced. Increase the CPUs and Memory to avoid this Issue . You may need to increase Swap and Disk image size too. Get a Huggingface-Token # Go to Hugging Face , create a token and temporary place it somewhere like a open texteditor window (but dont save it!, only keep it open, we need it in the next step) Setup # Set the fork you want to use and other variables. Tip I preffer to save my env vars in the repository root in a .env (or .envrc ) file to automatically re-apply them when I come back. The build- and run- scripts contain default values for almost everything, besides the Hugging Face Token you created in the last step. Some Suggestions of variables you may want to change besides the Token: Environment-Variable Description HUGGINGFACE_TOKEN=\"hg_aewirhghlawrgkjbarug2\" This is the only required variable, without you can't get the checkpoint ARCH=aarch64 if you are using a ARM based CPU INVOKEAI_TAG=yourname/invokeai:latest the Container Repository / Tag which will be used INVOKEAI_CONDA_ENV_FILE=environment-linux-aarch64.yml since environment.yml wouldn't work with aarch INVOKEAI_GIT=\"-b branchname https://github.com/username/reponame\" if you want to use your own fork Build the Image # I provided a build script, which is located in docker-build/build.sh but still needs to be executed from the Repository root. docker-build/build.sh The build Script not only builds the container, but also creates the docker volume if not existing yet, or if empty it will just download the models. When it is done you can run the container via the run script docker-build/run.sh When used without arguments, the container will start the website and provide you the link to open it. But if you want to use some other parameters you can also do so. Deprecated From here on it is the rest of the previous Docker-Docs, which will still provide usefull informations for one or the other. Usage (time to have fun) # Startup # If you're on a Linux container the invoke script is automatically started and the output dir set to the Docker volume you created earlier. If you're directly on macOS follow these startup instructions . With the Conda environment activated ( conda activate ldm ), run the interactive interface that combines the functionality of the original scripts txt2img and img2img : Use the more accurate but VRAM-intensive full precision math because half-precision requires autocast and won't work. By default the images are saved in outputs/img-samples/ . python3 scripts/invoke.py --full_precision You'll get the script's prompt. You can see available options or quit. invoke> -h invoke> q Text to Image # For quick (but bad) image results test with 5 steps (default 50) and 1 sample image. This will let you know that everything is set up correctly. Then increase steps to 100 or more for good (but slower) results. The prompt can be in quotes or not. invoke> The hulk fighting with sheldon cooper -s5 -n1 invoke> \"woman closeup highly detailed\" -s 150 # Reuse previous seed and apply face restoration invoke> \"woman closeup highly detailed\" --steps 150 --seed -1 -G 0 .75 You'll need to experiment to see if face restoration is making it better or worse for your specific prompt. If you're on a container the output is set to the Docker volume. You can copy it wherever you want. You can download it from the Docker Desktop app, Volumes, my-vol, data. Or you can copy it from your Mac terminal. Keep in mind docker cp can't expand *.png so you'll need to specify the image file name. On your host Mac (you can use the name of any container that mounted the volume): docker cp dummy:/data/000001.928403745.png /Users/<your-user>/Pictures Image to Image # You can also do text-guided image-to-image translation. For example, turning a sketch into a detailed drawing. strength is a value between 0.0 and 1.0 that controls the amount of noise that is added to the input image. Values that approach 1.0 allow for lots of variations but will also produce images that are not semantically consistent with the input. 0.0 preserves image exactly, 1.0 replaces it completely. Make sure your input image size dimensions are multiples of 64 e.g. 512x512. Otherwise you'll get Error: product of dimension sizes > 2**31' . If you still get the error try a different size like 512x256. If you're on a Docker container, copy your input image into the Docker volume docker cp /Users/<your-user>/Pictures/sketch-mountains-input.jpg dummy:/data/ Try it out generating an image (or more). The invoke script needs absolute paths to find the image so don't use ~ . If you're on your Mac invoke> \"A fantasy landscape, trending on artstation\" -I /Users/<your-user>/Pictures/sketch-mountains-input.jpg --strength 0 .75 --steps 100 -n4 If you're on a Linux container on your Mac invoke> \"A fantasy landscape, trending on artstation\" -I /data/sketch-mountains-input.jpg --strength 0 .75 --steps 50 -n1 Web Interface # You can use the invoke script with a graphical web interface. Start the web server with: python3 scripts/invoke.py --full_precision --web If it's running on your Mac point your Mac web browser to http://127.0.0.1:9090 Press Control-C at the command line to stop the web server. Notes # Some text you can add at the end of the prompt to make it very pretty: cinematic photo, highly detailed, cinematic lighting, ultra-detailed, ultrarealistic, photorealism, Octane Rendering, cyberpunk lights, Hyper Detail, 8K, HD, Unreal Engine, V-Ray, full hd, cyberpunk, abstract, 3d octane render + 4k UHD + immense detail + dramatic lighting + well lit + black, purple, blue, pink, cerulean, teal, metallic colours, + fine details, ultra photoreal, photographic, concept art, cinematic composition, rule of thirds, mysterious, eerie, photorealism, breathtaking detailed, painting art deco pattern, by hsiao, ron cheng, john james audubon, bizarre compositions, exquisite detail, extremely moody lighting, painted by greg rutkowski makoto shinkai takashi takeuchi studio ghibli, akihiko yoshida The original scripts should work as well. python3 scripts/orig_scripts/txt2img.py --help python3 scripts/orig_scripts/txt2img.py --ddim_steps 100 --n_iter 1 --n_samples 1 --plms --prompt \"new born baby kitten. Hyper Detail, Octane Rendering, Unreal Engine, V-Ray\" python3 scripts/orig_scripts/txt2img.py --ddim_steps 5 --n_iter 1 --n_samples 1 --plms --prompt \"ocean\" # or --klms","title":"Docker"},{"location":"installation/INSTALL_DOCKER/#docker","text":"","title":" Docker"},{"location":"installation/INSTALL_DOCKER/#before-you-begin","text":"For end users: Install Stable Diffusion locally using the instructions for your OS. For developers: For container-related development tasks or for enabling easy deployment to other environments (on-premises or cloud), follow these instructions. For general use, install locally to leverage your machine's GPU.","title":"Before you begin"},{"location":"installation/INSTALL_DOCKER/#why-containers","text":"They provide a flexible, reliable way to build and deploy Stable Diffusion. You'll also use a Docker volume to store the largest model files and image outputs as a first step in decoupling storage and compute. Future enhancements can do this for other assets. See Processes under the Twelve-Factor App methodology for details on why running applications in such a stateless fashion is important. You can specify the target platform when building the image and running the container. You'll also need to specify the Stable Diffusion requirements file that matches the container's OS and the architecture it will run on. Developers on Apple silicon (M1/M2): You can't access your GPU cores from Docker containers and performance is reduced compared with running it directly on macOS but for development purposes it's fine. Once you're done with development tasks on your laptop you can build for the target platform and architecture and deploy to another environment with NVIDIA GPUs on-premises or in the cloud.","title":"Why containers?"},{"location":"installation/INSTALL_DOCKER/#installation-on-a-linux-container","text":"","title":"Installation on a Linux container"},{"location":"installation/INSTALL_DOCKER/#prerequisites","text":"","title":"Prerequisites"},{"location":"installation/INSTALL_DOCKER/#install-docker","text":"On the Docker Desktop app, go to Preferences, Resources, Advanced. Increase the CPUs and Memory to avoid this Issue . You may need to increase Swap and Disk image size too.","title":"Install Docker"},{"location":"installation/INSTALL_DOCKER/#get-a-huggingface-token","text":"Go to Hugging Face , create a token and temporary place it somewhere like a open texteditor window (but dont save it!, only keep it open, we need it in the next step)","title":"Get a Huggingface-Token"},{"location":"installation/INSTALL_DOCKER/#setup","text":"Set the fork you want to use and other variables. Tip I preffer to save my env vars in the repository root in a .env (or .envrc ) file to automatically re-apply them when I come back. The build- and run- scripts contain default values for almost everything, besides the Hugging Face Token you created in the last step. Some Suggestions of variables you may want to change besides the Token: Environment-Variable Description HUGGINGFACE_TOKEN=\"hg_aewirhghlawrgkjbarug2\" This is the only required variable, without you can't get the checkpoint ARCH=aarch64 if you are using a ARM based CPU INVOKEAI_TAG=yourname/invokeai:latest the Container Repository / Tag which will be used INVOKEAI_CONDA_ENV_FILE=environment-linux-aarch64.yml since environment.yml wouldn't work with aarch INVOKEAI_GIT=\"-b branchname https://github.com/username/reponame\" if you want to use your own fork","title":"Setup"},{"location":"installation/INSTALL_DOCKER/#build-the-image","text":"I provided a build script, which is located in docker-build/build.sh but still needs to be executed from the Repository root. docker-build/build.sh The build Script not only builds the container, but also creates the docker volume if not existing yet, or if empty it will just download the models. When it is done you can run the container via the run script docker-build/run.sh When used without arguments, the container will start the website and provide you the link to open it. But if you want to use some other parameters you can also do so. Deprecated From here on it is the rest of the previous Docker-Docs, which will still provide usefull informations for one or the other.","title":"Build the Image"},{"location":"installation/INSTALL_DOCKER/#usage-time-to-have-fun","text":"","title":"Usage (time to have fun)"},{"location":"installation/INSTALL_DOCKER/#startup","text":"If you're on a Linux container the invoke script is automatically started and the output dir set to the Docker volume you created earlier. If you're directly on macOS follow these startup instructions . With the Conda environment activated ( conda activate ldm ), run the interactive interface that combines the functionality of the original scripts txt2img and img2img : Use the more accurate but VRAM-intensive full precision math because half-precision requires autocast and won't work. By default the images are saved in outputs/img-samples/ . python3 scripts/invoke.py --full_precision You'll get the script's prompt. You can see available options or quit. invoke> -h invoke> q","title":"Startup"},{"location":"installation/INSTALL_DOCKER/#text-to-image","text":"For quick (but bad) image results test with 5 steps (default 50) and 1 sample image. This will let you know that everything is set up correctly. Then increase steps to 100 or more for good (but slower) results. The prompt can be in quotes or not. invoke> The hulk fighting with sheldon cooper -s5 -n1 invoke> \"woman closeup highly detailed\" -s 150 # Reuse previous seed and apply face restoration invoke> \"woman closeup highly detailed\" --steps 150 --seed -1 -G 0 .75 You'll need to experiment to see if face restoration is making it better or worse for your specific prompt. If you're on a container the output is set to the Docker volume. You can copy it wherever you want. You can download it from the Docker Desktop app, Volumes, my-vol, data. Or you can copy it from your Mac terminal. Keep in mind docker cp can't expand *.png so you'll need to specify the image file name. On your host Mac (you can use the name of any container that mounted the volume): docker cp dummy:/data/000001.928403745.png /Users/<your-user>/Pictures","title":"Text to Image"},{"location":"installation/INSTALL_DOCKER/#image-to-image","text":"You can also do text-guided image-to-image translation. For example, turning a sketch into a detailed drawing. strength is a value between 0.0 and 1.0 that controls the amount of noise that is added to the input image. Values that approach 1.0 allow for lots of variations but will also produce images that are not semantically consistent with the input. 0.0 preserves image exactly, 1.0 replaces it completely. Make sure your input image size dimensions are multiples of 64 e.g. 512x512. Otherwise you'll get Error: product of dimension sizes > 2**31' . If you still get the error try a different size like 512x256. If you're on a Docker container, copy your input image into the Docker volume docker cp /Users/<your-user>/Pictures/sketch-mountains-input.jpg dummy:/data/ Try it out generating an image (or more). The invoke script needs absolute paths to find the image so don't use ~ . If you're on your Mac invoke> \"A fantasy landscape, trending on artstation\" -I /Users/<your-user>/Pictures/sketch-mountains-input.jpg --strength 0 .75 --steps 100 -n4 If you're on a Linux container on your Mac invoke> \"A fantasy landscape, trending on artstation\" -I /data/sketch-mountains-input.jpg --strength 0 .75 --steps 50 -n1","title":"Image to Image"},{"location":"installation/INSTALL_DOCKER/#web-interface","text":"You can use the invoke script with a graphical web interface. Start the web server with: python3 scripts/invoke.py --full_precision --web If it's running on your Mac point your Mac web browser to http://127.0.0.1:9090 Press Control-C at the command line to stop the web server.","title":"Web Interface"},{"location":"installation/INSTALL_DOCKER/#notes","text":"Some text you can add at the end of the prompt to make it very pretty: cinematic photo, highly detailed, cinematic lighting, ultra-detailed, ultrarealistic, photorealism, Octane Rendering, cyberpunk lights, Hyper Detail, 8K, HD, Unreal Engine, V-Ray, full hd, cyberpunk, abstract, 3d octane render + 4k UHD + immense detail + dramatic lighting + well lit + black, purple, blue, pink, cerulean, teal, metallic colours, + fine details, ultra photoreal, photographic, concept art, cinematic composition, rule of thirds, mysterious, eerie, photorealism, breathtaking detailed, painting art deco pattern, by hsiao, ron cheng, john james audubon, bizarre compositions, exquisite detail, extremely moody lighting, painted by greg rutkowski makoto shinkai takashi takeuchi studio ghibli, akihiko yoshida The original scripts should work as well. python3 scripts/orig_scripts/txt2img.py --help python3 scripts/orig_scripts/txt2img.py --ddim_steps 100 --n_iter 1 --n_samples 1 --plms --prompt \"new born baby kitten. Hyper Detail, Octane Rendering, Unreal Engine, V-Ray\" python3 scripts/orig_scripts/txt2img.py --ddim_steps 5 --n_iter 1 --n_samples 1 --plms --prompt \"ocean\" # or --klms","title":"Notes"},{"location":"installation/INSTALL_LINUX/","text":"Linux # Installation # You will need to install the following prerequisites if they are not already available. Use your operating system's preferred installer. Python (version 3.8.5 recommended; higher may work) git Install the Python Anaconda environment manager. ~$ wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh ~$ chmod +x Anaconda3-2022.05-Linux-x86_64.sh ~$ ./Anaconda3-2022.05-Linux-x86_64.sh After installing anaconda, you should log out of your system and log back in. If the installation worked, your command prompt will be prefixed by the name of the current anaconda environment - (base) . Copy the InvokeAI source code from GitHub: ( base ) ~$ git clone https://github.com/invoke-ai/InvokeAI.git This will create InvokeAI folder where you will follow the rest of the steps. Enter the newly-created InvokeAI folder. From this step forward make sure that you are working in the InvokeAI directory! ( base ) ~$ cd InvokeAI ( base ) ~/InvokeAI$ Use anaconda to copy necessary python packages, create a new python environment named invokeai and activate the environment. ( base ) rm -rf src # (this is a precaution in case there is already a src directory) ( base ) ~/InvokeAI$ conda env create ( base ) ~/InvokeAI$ conda activate invokeai ( invokeai ) ~/InvokeAI$ After these steps, your command prompt will be prefixed by (invokeai) as shown above. Load the big stable diffusion weights files and a couple of smaller machine-learning models: ( invokeai ) ~/InvokeAI$ python3 scripts/preload_models.py Note This script will lead you through the process of creating an account on Hugging Face, accepting the terms and conditions of the Stable Diffusion model license, and obtaining an access token for downloading. It will then download and install the weights files for you. Please look here for a manual process for doing the same thing. Start generating images! Run InvokeAI! IMPORTANT Make sure that the conda environment is activated, which should create (invokeai) in front of your prompt! CLI local Webserver Public Webserver python scripts/invoke.py python scripts/invoke.py --web python scripts/invoke.py --web --host 0 .0.0.0 To use an alternative model you may invoke the !switch command in the CLI, or pass --model <model_name> during invoke.py launch for either the CLI or the Web UI. See Command Line Client . The model names are defined in configs/models.yaml . Subsequently, to relaunch the script, be sure to run \"conda activate invokeai\" (step 5, second command), enter the InvokeAI directory, and then launch the invoke script (step 8). If you forget to activate the 'invokeai' environment, the script will fail with multiple ModuleNotFound errors. Updating to newer versions of the script # This distribution is changing rapidly. If you used the git clone method (step 5) to download the InvokeAI directory, then to update to the latest and greatest version, launch the Anaconda window, enter InvokeAI and type: ( invokeai ) ~/InvokeAI$ git pull ( invokeai ) ~/InvokeAI$ rm -rf src # prevents conda freezing errors ( invokeai ) ~/InvokeAI$ conda env update -f environment.yml This will bring your local copy into sync with the remote one.","title":"Manual Installation, Linux"},{"location":"installation/INSTALL_LINUX/#linux","text":"","title":" Linux"},{"location":"installation/INSTALL_LINUX/#installation","text":"You will need to install the following prerequisites if they are not already available. Use your operating system's preferred installer. Python (version 3.8.5 recommended; higher may work) git Install the Python Anaconda environment manager. ~$ wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh ~$ chmod +x Anaconda3-2022.05-Linux-x86_64.sh ~$ ./Anaconda3-2022.05-Linux-x86_64.sh After installing anaconda, you should log out of your system and log back in. If the installation worked, your command prompt will be prefixed by the name of the current anaconda environment - (base) . Copy the InvokeAI source code from GitHub: ( base ) ~$ git clone https://github.com/invoke-ai/InvokeAI.git This will create InvokeAI folder where you will follow the rest of the steps. Enter the newly-created InvokeAI folder. From this step forward make sure that you are working in the InvokeAI directory! ( base ) ~$ cd InvokeAI ( base ) ~/InvokeAI$ Use anaconda to copy necessary python packages, create a new python environment named invokeai and activate the environment. ( base ) rm -rf src # (this is a precaution in case there is already a src directory) ( base ) ~/InvokeAI$ conda env create ( base ) ~/InvokeAI$ conda activate invokeai ( invokeai ) ~/InvokeAI$ After these steps, your command prompt will be prefixed by (invokeai) as shown above. Load the big stable diffusion weights files and a couple of smaller machine-learning models: ( invokeai ) ~/InvokeAI$ python3 scripts/preload_models.py Note This script will lead you through the process of creating an account on Hugging Face, accepting the terms and conditions of the Stable Diffusion model license, and obtaining an access token for downloading. It will then download and install the weights files for you. Please look here for a manual process for doing the same thing. Start generating images! Run InvokeAI! IMPORTANT Make sure that the conda environment is activated, which should create (invokeai) in front of your prompt! CLI local Webserver Public Webserver python scripts/invoke.py python scripts/invoke.py --web python scripts/invoke.py --web --host 0 .0.0.0 To use an alternative model you may invoke the !switch command in the CLI, or pass --model <model_name> during invoke.py launch for either the CLI or the Web UI. See Command Line Client . The model names are defined in configs/models.yaml . Subsequently, to relaunch the script, be sure to run \"conda activate invokeai\" (step 5, second command), enter the InvokeAI directory, and then launch the invoke script (step 8). If you forget to activate the 'invokeai' environment, the script will fail with multiple ModuleNotFound errors.","title":"Installation"},{"location":"installation/INSTALL_LINUX/#updating-to-newer-versions-of-the-script","text":"This distribution is changing rapidly. If you used the git clone method (step 5) to download the InvokeAI directory, then to update to the latest and greatest version, launch the Anaconda window, enter InvokeAI and type: ( invokeai ) ~/InvokeAI$ git pull ( invokeai ) ~/InvokeAI$ rm -rf src # prevents conda freezing errors ( invokeai ) ~/InvokeAI$ conda env update -f environment.yml This will bring your local copy into sync with the remote one.","title":"Updating to newer versions of the script"},{"location":"installation/INSTALL_MAC/","text":"macOS # Invoke AI runs quite well on M1 Macs and we have a number of M1 users in the community. While the repo does run on Intel Macs, we only have a couple reports. If you have an Intel Mac and run into issues, please create an issue on Github and we will do our best to help. Requirements # macOS 12.3 Monterey or later About 10GB of storage (and 10GB of data if your internet connection has data caps) Any M1 Macs or an Intel Macs with 4GB+ of VRAM (ideally more) Installation # Homebrew First you will install the \"brew\" package manager. Skip this if brew is already installed. install brew (and Xcode command line tools) /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" Conda Installation Now there are two different ways to set up the Python (miniconda) environment: Standalone with pyenv If you don't know what we are talking about, choose Standalone. If you are familiar with python environments, choose \"with pyenv\" Standalone with pyenv Install cmake, protobuf, and rust brew install cmake protobuf rust Clone the InvokeAI repository # Clone the Invoke AI repo git clone https://github.com/invoke-ai/InvokeAI.git cd InvokeAI Choose the appropriate architecture for your system and install miniconda: M1 arm64 Intel x86_64 Install miniconda for M1 arm64 curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh \\ -o Miniconda3-latest-MacOSX-arm64.sh /bin/bash Miniconda3-latest-MacOSX-arm64.sh Install miniconda for Intel curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh \\ -o Miniconda3-latest-MacOSX-x86_64.sh /bin/bash Miniconda3-latest-MacOSX-x86_64.sh brew install pyenv-virtualenv pyenv install anaconda3-2022.05 pyenv virtualenv anaconda3-2022.05 eval \" $( pyenv init - ) \" pyenv activate anaconda3-2022.05 Clone the Invoke AI repo git clone https://github.com/invoke-ai/InvokeAI.git cd InvokeAI Create the environment & install packages M1 Mac Intel x86_64 Mac PIP_EXISTS_ACTION = w CONDA_SUBDIR = osx-arm64 conda env create -f environment-mac.yml PIP_EXISTS_ACTION = w CONDA_SUBDIR = osx-64 conda env create -f environment-mac.yml # Activate the environment (you need to do this every time you want to run SD) conda activate invokeai Info export PIP_EXISTS_ACTION=w is a precaution to fix conda env create -f environment-mac.yml never finishing in some situations. So it isn't required but won't hurt. Download the model weight files The preload_models.py script downloads and installs the model weight files for you. It will lead you through the process of getting a Hugging Face account, accepting the Stable Diffusion model weight license agreement, and creating a download token: # This will take some time, depending on the speed of your internet connection # and will consume about 10GB of space python scripts/preload_models.py Run InvokeAI! IMPORTANT Make sure that the conda environment is activated, which should create (invokeai) in front of your prompt! CLI local Webserver Public Webserver python scripts/invoke.py python scripts/invoke.py --web python scripts/invoke.py --web --host 0 .0.0.0 To use an alternative model you may invoke the !switch command in the CLI, or pass --model <model_name> during invoke.py launch for either the CLI or the Web UI. See Command Line Client . The model names are defined in configs/models.yaml . Common problems # After you followed all the instructions and try to run invoke.py, you might get several errors. Here's the errors I've seen and found solutions for. Is it slow? # Be sure to specify 1 sample and 1 iteration. python ./scripts/orig_scripts/txt2img.py \\ --prompt \"ocean\" \\ --ddim_steps 5 \\ --n_samples 1 \\ --n_iter 1 Doesn't work anymore? # PyTorch nightly includes support for MPS. Because of this, this setup is inherently unstable. One morning I woke up and it no longer worked no matter what I did until I switched to miniforge. However, I have another Mac that works just fine with Anaconda. If you can't get it to work, please search a little first because many of the errors will get posted and solved. If you can't find a solution please create an issue . One debugging step is to update to the latest version of PyTorch nightly. conda install \\ pytorch \\ torchvision \\ -c pytorch-nightly \\ -n invokeai If it takes forever to run conda env create -f environment-mac.yml , try this: git clean -f conda clean \\ --yes \\ --all Or you could try to completley reset Anaconda: conda update \\ --force-reinstall \\ -y \\ -n base \\ -c defaults conda \"No module named cv2\", torch, 'invokeai', 'transformers', 'taming', etc # There are several causes of these errors: Did you remember to conda activate invokeai ? If your terminal prompt begins with \"(invokeai)\" then you activated it. If it begins with \"(base)\" or something else you haven't. You might've run ./scripts/preload_models.py or ./scripts/invoke.py instead of python ./scripts/preload_models.py or python ./scripts/invoke.py . The cause of this error is long so it's below. if it says you're missing taming you need to rebuild your virtual environment. conda deactivate conda env remove -n invokeai conda env create -f environment-mac.yml If you have activated the invokeai virtual environment and tried rebuilding it, maybe the problem could be that I have something installed that you don't and you'll just need to manually install it. Make sure you activate the virtual environment so it installs there instead of globally. conda activate invokeai pip install <package name> You might also need to install Rust (I mention this again below). How many snakes are living in your computer? # You might have multiple Python installations on your system, in which case it's important to be explicit and consistent about which one to use for a given project. This is because virtual environments are coupled to the Python that created it (and all the associated 'system-level' modules). When you run python or python3 , your shell searches the colon-delimited locations in the PATH environment variable ( echo $PATH to see that list) in that order - first match wins. You can ask for the location of the first python3 found in your PATH with the which command like this: % which python3 /usr/bin/python3 Anything in /usr/bin is part of the OS . However, /usr/bin/python3 is not actually python3, but rather a stub that offers to install Xcode (which includes python 3). If you have Xcode installed already, /usr/bin/python3 will execute /Library/Developer/CommandLineTools/usr/bin/python3 or /Applications/Xcode.app/Contents/Developer/usr/bin/python3 (depending on which Xcode you've selected with xcode-select ). Note that /usr/bin/python is an entirely different python - specifically, python 2. Note: starting in macOS 12.3, /usr/bin/python no longer exists. % which python3 /opt/homebrew/bin/python3 If you installed python3 with Homebrew and you've modified your path to search for Homebrew binaries before system ones, you'll see the above path. % which python /opt/anaconda3/bin/python If you have Anaconda installed, you will see the above path. There is a /opt/anaconda3/bin/python3 also. We expect that /opt/anaconda3/bin/python and /opt/anaconda3/bin/python3 should actually be the same python , which you can verify by comparing the output of python3 -V and python -V . ( invokeai ) % which python /Users/name/miniforge3/envs/invokeai/bin/python The above is what you'll see if you have miniforge and correctly activated the invokeai environment, while usingd the standalone setup instructions above. If you otherwise installed via pyenv, you will get this result: ( anaconda3-2022.05 ) % which python /Users/name/.pyenv/shims/python It's all a mess and you should know how to modify the path environment variable if you want to fix it. Here's a brief hint of the most common ways you can modify it (don't really have the time to explain it all here). ~/.zshrc ~/.bash_profile ~/.bashrc /etc/paths.d /etc/path Which one you use will depend on what you have installed, except putting a file in /etc/paths.d - which also is the way I prefer to do. Finally, to answer the question posed by this section's title, it may help to list all of the python / python3 things found in $PATH instead of just the first hit. To do so, add the -a switch to which : % which -a python3 ... This will show a list of all binaries which are actually available in your PATH. Debugging? # Tired of waiting for your renders to finish before you can see if it works? Reduce the steps! The image quality will be horrible but at least you'll get quick feedback. python ./scripts/txt2img.py \\ --prompt \"ocean\" \\ --ddim_steps 5 \\ --n_samples 1 \\ --n_iter 1 OSError: Can't load tokenizer for 'openai/clip-vit-large-patch14' # python scripts/preload_models.py \"The operator [name] is not current implemented for the MPS device.\" (sic) # example error ... NotImplementedError: The operator 'aten::_index_put_impl_' is not current implemented for the MPS device. If you want this op to be added in priority during the prototype phase of this feature, please comment on https://github.com/pytorch/pytorch/issues/77764. As a temporary fix, you can set the environment variable ` PYTORCH_ENABLE_MPS_FALLBACK = 1 ` to use the CPU as a fallback for this op. WARNING: this will be slower than running natively on MPS. The InvokeAI version includes this fix in environment-mac.yml . \"Could not build wheels for tokenizers\" # I have not seen this error because I had Rust installed on my computer before I started playing with Stable Diffusion. The fix is to install Rust. curl \\ --proto '=https' \\ --tlsv1.2 \\ -sSf https://sh.rustup.rs | sh How come --seed doesn't work? # Information Completely reproducible results are not guaranteed across PyTorch releases, individual commits, or different platforms. Furthermore, results may not be reproducible between CPU and GPU executions, even when using identical seeds. PyTorch docs Second, we might have a fix that at least gets a consistent seed sort of. We're still working on it. libiomp5.dylib error? # OMP: Error #15: Initializing libiomp5.dylib, but found libomp.dylib already initialized. You are likely using an Intel package by mistake. Be sure to run conda with the environment variable CONDA_SUBDIR=osx-arm64 , like so: CONDA_SUBDIR=osx-arm64 conda install ... This error happens with Anaconda on Macs when the Intel-only mkl is pulled in by a dependency. nomkl is a metapackage designed to prevent this, by making it impossible to install mkl , but if your environment is already broken it may not work. Do not use os.environ['KMP_DUPLICATE_LIB_OK']='True' or equivalents as this masks the underlying issue of using Intel packages. Not enough memory # This seems to be a common problem and is probably the underlying problem for a lot of symptoms (listed below). The fix is to lower your image size or to add model.half() right after the model is loaded. I should probably test it out. I've read that the reason this fixes problems is because it converts the model from 32-bit to 16-bit and that leaves more RAM for other things. I have no idea how that would affect the quality of the images though. See this issue . \"Error: product of dimension sizes > 2**31'\" # This error happens with img2img, which I haven't played with too much yet. But I know it's because your image is too big or the resolution isn't a multiple of 32x32. Because the stable-diffusion model was trained on images that were 512 x 512, it's always best to use that output size (which is the default). However, if you're using that size and you get the above error, try 256 x 256 or 512 x 256 or something as the source image. BTW, 2**31-1 = 2,147,483,647 , which is also 32-bit signed LONG_MAX in C. I just got Rickrolled! Do I have a virus? # You don't have a virus. It's part of the project. Here's Rick and here's the code that swaps him in. It's a NSFW filter, which IMO, doesn't work very good (and we call this \"computer vision\", sheesh). My images come out black # We might have this fixed, we are still testing. There's a similar issue on CUDA GPU's where the images come out green. Maybe it's the same issue? Someone in that issue says to use \"--precision full\", but this fork actually disables that flag. I don't know why, someone else provided that code and I don't know what it does. Maybe the model.half() suggestion above would fix this issue too. I should probably test it. \"view size is not compatible with input tensor's size and stride\" # File \"/opt/anaconda3/envs/invokeai/lib/python3.10/site-packages/torch/nn/functional.py\" , line 2511 , in layer_norm return torch.layer_norm ( input, normalized_shape, weight, bias, eps, torch.backends.cudnn.enabled ) RuntimeError: view size is not compatible with input tensor ' s size and stride ( at least one dimension spans across two contiguous subspaces ) . Use .reshape ( ... ) instead. Update to the latest version of invoke-ai/InvokeAI. We were patching pytorch but we found a file in stable-diffusion that we could change instead. This is a 32-bit vs 16-bit problem. The processor must support the Intel bla bla bla # What? Intel? On an Apple Silicon? Intel MKL FATAL ERROR: This system does not meet the minimum requirements for use of the Intel ( R ) Math Kernel Library. The processor must support the Intel ( R ) Supplemental Streaming SIMD Extensions 3 ( Intel ( R ) SSSE3 ) instructions. The processor must support the Intel ( R ) Streaming SIMD Extensions 4 .2 ( Intel ( R ) SSE4.2 ) instructions. The processor must support the Intel ( R ) Advanced Vector Extensions ( Intel ( R ) AVX ) instructions. This is due to the Intel mkl package getting picked up when you try to install something that depends on it-- Rosetta can translate some Intel instructions but not the specialized ones here. To avoid this, make sure to use the environment variable CONDA_SUBDIR=osx-arm64 , which restricts the Conda environment to only use ARM packages, and use nomkl as described above. input types 'tensor<2x1280xf32>' and 'tensor<*xf16>' are not broadcast compatible # May appear when just starting to generate, e.g.: invoke> clouds Generating: 0 % | | 0 /1 [ 00 :00<?, ?it/s ] /Users/ [ ... ] /dev/stable-diffusion/ldm/modules/embedding_manager.py:152: UserWarning: The operator 'aten::nonzero' is not currently supported on the MPS backend and will fall back to run on the CPU. This may have performance implications. ( Triggered internally at /Users/runner/work/_temp/anaconda/conda-bld/pytorch_1662016319283/work/aten/src/ATen/mps/MPSFallback.mm:11. ) placeholder_idx = torch.where ( loc ( \"mps_add\" ( \"(mpsFileLoc): /AppleInternal/Library/BuildRoots/20d6c351-ee94-11ec-bcaf-7247572f23b4/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShadersGraph/mpsgraph/MetalPerformanceShadersGraph/Core/Files/MPSGraphUtilities.mm\" :219:0 )) : error: input types 'tensor<2x1280xf32>' and 'tensor<*xf16>' are not broadcast compatible LLVM ERROR: Failed to infer result type ( s ) . Abort trap: 6 /Users/ [ ... ] /opt/anaconda3/envs/invokeai/lib/python3.9/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 1 leaked semaphore objects to clean up at shutdown warnings.warn ( 'resource_tracker: There appear to be %d '","title":"Manual Installation, macOS"},{"location":"installation/INSTALL_MAC/#macos","text":"Invoke AI runs quite well on M1 Macs and we have a number of M1 users in the community. While the repo does run on Intel Macs, we only have a couple reports. If you have an Intel Mac and run into issues, please create an issue on Github and we will do our best to help.","title":" macOS"},{"location":"installation/INSTALL_MAC/#requirements","text":"macOS 12.3 Monterey or later About 10GB of storage (and 10GB of data if your internet connection has data caps) Any M1 Macs or an Intel Macs with 4GB+ of VRAM (ideally more)","title":"Requirements"},{"location":"installation/INSTALL_MAC/#installation","text":"Homebrew First you will install the \"brew\" package manager. Skip this if brew is already installed. install brew (and Xcode command line tools) /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" Conda Installation Now there are two different ways to set up the Python (miniconda) environment: Standalone with pyenv If you don't know what we are talking about, choose Standalone. If you are familiar with python environments, choose \"with pyenv\" Standalone with pyenv Install cmake, protobuf, and rust brew install cmake protobuf rust Clone the InvokeAI repository # Clone the Invoke AI repo git clone https://github.com/invoke-ai/InvokeAI.git cd InvokeAI Choose the appropriate architecture for your system and install miniconda: M1 arm64 Intel x86_64 Install miniconda for M1 arm64 curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh \\ -o Miniconda3-latest-MacOSX-arm64.sh /bin/bash Miniconda3-latest-MacOSX-arm64.sh Install miniconda for Intel curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh \\ -o Miniconda3-latest-MacOSX-x86_64.sh /bin/bash Miniconda3-latest-MacOSX-x86_64.sh brew install pyenv-virtualenv pyenv install anaconda3-2022.05 pyenv virtualenv anaconda3-2022.05 eval \" $( pyenv init - ) \" pyenv activate anaconda3-2022.05 Clone the Invoke AI repo git clone https://github.com/invoke-ai/InvokeAI.git cd InvokeAI Create the environment & install packages M1 Mac Intel x86_64 Mac PIP_EXISTS_ACTION = w CONDA_SUBDIR = osx-arm64 conda env create -f environment-mac.yml PIP_EXISTS_ACTION = w CONDA_SUBDIR = osx-64 conda env create -f environment-mac.yml # Activate the environment (you need to do this every time you want to run SD) conda activate invokeai Info export PIP_EXISTS_ACTION=w is a precaution to fix conda env create -f environment-mac.yml never finishing in some situations. So it isn't required but won't hurt. Download the model weight files The preload_models.py script downloads and installs the model weight files for you. It will lead you through the process of getting a Hugging Face account, accepting the Stable Diffusion model weight license agreement, and creating a download token: # This will take some time, depending on the speed of your internet connection # and will consume about 10GB of space python scripts/preload_models.py Run InvokeAI! IMPORTANT Make sure that the conda environment is activated, which should create (invokeai) in front of your prompt! CLI local Webserver Public Webserver python scripts/invoke.py python scripts/invoke.py --web python scripts/invoke.py --web --host 0 .0.0.0 To use an alternative model you may invoke the !switch command in the CLI, or pass --model <model_name> during invoke.py launch for either the CLI or the Web UI. See Command Line Client . The model names are defined in configs/models.yaml .","title":"Installation"},{"location":"installation/INSTALL_MAC/#common-problems","text":"After you followed all the instructions and try to run invoke.py, you might get several errors. Here's the errors I've seen and found solutions for.","title":"Common problems"},{"location":"installation/INSTALL_MAC/#is-it-slow","text":"Be sure to specify 1 sample and 1 iteration. python ./scripts/orig_scripts/txt2img.py \\ --prompt \"ocean\" \\ --ddim_steps 5 \\ --n_samples 1 \\ --n_iter 1","title":"Is it slow?"},{"location":"installation/INSTALL_MAC/#doesnt-work-anymore","text":"PyTorch nightly includes support for MPS. Because of this, this setup is inherently unstable. One morning I woke up and it no longer worked no matter what I did until I switched to miniforge. However, I have another Mac that works just fine with Anaconda. If you can't get it to work, please search a little first because many of the errors will get posted and solved. If you can't find a solution please create an issue . One debugging step is to update to the latest version of PyTorch nightly. conda install \\ pytorch \\ torchvision \\ -c pytorch-nightly \\ -n invokeai If it takes forever to run conda env create -f environment-mac.yml , try this: git clean -f conda clean \\ --yes \\ --all Or you could try to completley reset Anaconda: conda update \\ --force-reinstall \\ -y \\ -n base \\ -c defaults conda","title":"Doesn't work anymore?"},{"location":"installation/INSTALL_MAC/#no-module-named-cv2-torch-invokeai-transformers-taming-etc","text":"There are several causes of these errors: Did you remember to conda activate invokeai ? If your terminal prompt begins with \"(invokeai)\" then you activated it. If it begins with \"(base)\" or something else you haven't. You might've run ./scripts/preload_models.py or ./scripts/invoke.py instead of python ./scripts/preload_models.py or python ./scripts/invoke.py . The cause of this error is long so it's below. if it says you're missing taming you need to rebuild your virtual environment. conda deactivate conda env remove -n invokeai conda env create -f environment-mac.yml If you have activated the invokeai virtual environment and tried rebuilding it, maybe the problem could be that I have something installed that you don't and you'll just need to manually install it. Make sure you activate the virtual environment so it installs there instead of globally. conda activate invokeai pip install <package name> You might also need to install Rust (I mention this again below).","title":"\"No module named cv2\", torch, 'invokeai', 'transformers', 'taming', etc"},{"location":"installation/INSTALL_MAC/#how-many-snakes-are-living-in-your-computer","text":"You might have multiple Python installations on your system, in which case it's important to be explicit and consistent about which one to use for a given project. This is because virtual environments are coupled to the Python that created it (and all the associated 'system-level' modules). When you run python or python3 , your shell searches the colon-delimited locations in the PATH environment variable ( echo $PATH to see that list) in that order - first match wins. You can ask for the location of the first python3 found in your PATH with the which command like this: % which python3 /usr/bin/python3 Anything in /usr/bin is part of the OS . However, /usr/bin/python3 is not actually python3, but rather a stub that offers to install Xcode (which includes python 3). If you have Xcode installed already, /usr/bin/python3 will execute /Library/Developer/CommandLineTools/usr/bin/python3 or /Applications/Xcode.app/Contents/Developer/usr/bin/python3 (depending on which Xcode you've selected with xcode-select ). Note that /usr/bin/python is an entirely different python - specifically, python 2. Note: starting in macOS 12.3, /usr/bin/python no longer exists. % which python3 /opt/homebrew/bin/python3 If you installed python3 with Homebrew and you've modified your path to search for Homebrew binaries before system ones, you'll see the above path. % which python /opt/anaconda3/bin/python If you have Anaconda installed, you will see the above path. There is a /opt/anaconda3/bin/python3 also. We expect that /opt/anaconda3/bin/python and /opt/anaconda3/bin/python3 should actually be the same python , which you can verify by comparing the output of python3 -V and python -V . ( invokeai ) % which python /Users/name/miniforge3/envs/invokeai/bin/python The above is what you'll see if you have miniforge and correctly activated the invokeai environment, while usingd the standalone setup instructions above. If you otherwise installed via pyenv, you will get this result: ( anaconda3-2022.05 ) % which python /Users/name/.pyenv/shims/python It's all a mess and you should know how to modify the path environment variable if you want to fix it. Here's a brief hint of the most common ways you can modify it (don't really have the time to explain it all here). ~/.zshrc ~/.bash_profile ~/.bashrc /etc/paths.d /etc/path Which one you use will depend on what you have installed, except putting a file in /etc/paths.d - which also is the way I prefer to do. Finally, to answer the question posed by this section's title, it may help to list all of the python / python3 things found in $PATH instead of just the first hit. To do so, add the -a switch to which : % which -a python3 ... This will show a list of all binaries which are actually available in your PATH.","title":"How many snakes are living in your computer?"},{"location":"installation/INSTALL_MAC/#debugging","text":"Tired of waiting for your renders to finish before you can see if it works? Reduce the steps! The image quality will be horrible but at least you'll get quick feedback. python ./scripts/txt2img.py \\ --prompt \"ocean\" \\ --ddim_steps 5 \\ --n_samples 1 \\ --n_iter 1","title":"Debugging?"},{"location":"installation/INSTALL_MAC/#oserror-cant-load-tokenizer-for-openaiclip-vit-large-patch14","text":"python scripts/preload_models.py","title":"OSError: Can't load tokenizer for 'openai/clip-vit-large-patch14'"},{"location":"installation/INSTALL_MAC/#the-operator-name-is-not-current-implemented-for-the-mps-device-sic","text":"example error ... NotImplementedError: The operator 'aten::_index_put_impl_' is not current implemented for the MPS device. If you want this op to be added in priority during the prototype phase of this feature, please comment on https://github.com/pytorch/pytorch/issues/77764. As a temporary fix, you can set the environment variable ` PYTORCH_ENABLE_MPS_FALLBACK = 1 ` to use the CPU as a fallback for this op. WARNING: this will be slower than running natively on MPS. The InvokeAI version includes this fix in environment-mac.yml .","title":"\"The operator [name] is not current implemented for the MPS device.\" (sic)"},{"location":"installation/INSTALL_MAC/#could-not-build-wheels-for-tokenizers","text":"I have not seen this error because I had Rust installed on my computer before I started playing with Stable Diffusion. The fix is to install Rust. curl \\ --proto '=https' \\ --tlsv1.2 \\ -sSf https://sh.rustup.rs | sh","title":"\"Could not build wheels for tokenizers\""},{"location":"installation/INSTALL_MAC/#how-come-seed-doesnt-work","text":"Information Completely reproducible results are not guaranteed across PyTorch releases, individual commits, or different platforms. Furthermore, results may not be reproducible between CPU and GPU executions, even when using identical seeds. PyTorch docs Second, we might have a fix that at least gets a consistent seed sort of. We're still working on it.","title":"How come --seed doesn't work?"},{"location":"installation/INSTALL_MAC/#libiomp5dylib-error","text":"OMP: Error #15: Initializing libiomp5.dylib, but found libomp.dylib already initialized. You are likely using an Intel package by mistake. Be sure to run conda with the environment variable CONDA_SUBDIR=osx-arm64 , like so: CONDA_SUBDIR=osx-arm64 conda install ... This error happens with Anaconda on Macs when the Intel-only mkl is pulled in by a dependency. nomkl is a metapackage designed to prevent this, by making it impossible to install mkl , but if your environment is already broken it may not work. Do not use os.environ['KMP_DUPLICATE_LIB_OK']='True' or equivalents as this masks the underlying issue of using Intel packages.","title":"libiomp5.dylib error?"},{"location":"installation/INSTALL_MAC/#not-enough-memory","text":"This seems to be a common problem and is probably the underlying problem for a lot of symptoms (listed below). The fix is to lower your image size or to add model.half() right after the model is loaded. I should probably test it out. I've read that the reason this fixes problems is because it converts the model from 32-bit to 16-bit and that leaves more RAM for other things. I have no idea how that would affect the quality of the images though. See this issue .","title":"Not enough memory"},{"location":"installation/INSTALL_MAC/#error-product-of-dimension-sizes-231","text":"This error happens with img2img, which I haven't played with too much yet. But I know it's because your image is too big or the resolution isn't a multiple of 32x32. Because the stable-diffusion model was trained on images that were 512 x 512, it's always best to use that output size (which is the default). However, if you're using that size and you get the above error, try 256 x 256 or 512 x 256 or something as the source image. BTW, 2**31-1 = 2,147,483,647 , which is also 32-bit signed LONG_MAX in C.","title":"\"Error: product of dimension sizes &gt; 2**31'\""},{"location":"installation/INSTALL_MAC/#i-just-got-rickrolled-do-i-have-a-virus","text":"You don't have a virus. It's part of the project. Here's Rick and here's the code that swaps him in. It's a NSFW filter, which IMO, doesn't work very good (and we call this \"computer vision\", sheesh).","title":"I just got Rickrolled! Do I have a virus?"},{"location":"installation/INSTALL_MAC/#my-images-come-out-black","text":"We might have this fixed, we are still testing. There's a similar issue on CUDA GPU's where the images come out green. Maybe it's the same issue? Someone in that issue says to use \"--precision full\", but this fork actually disables that flag. I don't know why, someone else provided that code and I don't know what it does. Maybe the model.half() suggestion above would fix this issue too. I should probably test it.","title":"My images come out black"},{"location":"installation/INSTALL_MAC/#view-size-is-not-compatible-with-input-tensors-size-and-stride","text":"File \"/opt/anaconda3/envs/invokeai/lib/python3.10/site-packages/torch/nn/functional.py\" , line 2511 , in layer_norm return torch.layer_norm ( input, normalized_shape, weight, bias, eps, torch.backends.cudnn.enabled ) RuntimeError: view size is not compatible with input tensor ' s size and stride ( at least one dimension spans across two contiguous subspaces ) . Use .reshape ( ... ) instead. Update to the latest version of invoke-ai/InvokeAI. We were patching pytorch but we found a file in stable-diffusion that we could change instead. This is a 32-bit vs 16-bit problem.","title":"\"view size is not compatible with input tensor's size and stride\""},{"location":"installation/INSTALL_MAC/#the-processor-must-support-the-intel-bla-bla-bla","text":"What? Intel? On an Apple Silicon? Intel MKL FATAL ERROR: This system does not meet the minimum requirements for use of the Intel ( R ) Math Kernel Library. The processor must support the Intel ( R ) Supplemental Streaming SIMD Extensions 3 ( Intel ( R ) SSSE3 ) instructions. The processor must support the Intel ( R ) Streaming SIMD Extensions 4 .2 ( Intel ( R ) SSE4.2 ) instructions. The processor must support the Intel ( R ) Advanced Vector Extensions ( Intel ( R ) AVX ) instructions. This is due to the Intel mkl package getting picked up when you try to install something that depends on it-- Rosetta can translate some Intel instructions but not the specialized ones here. To avoid this, make sure to use the environment variable CONDA_SUBDIR=osx-arm64 , which restricts the Conda environment to only use ARM packages, and use nomkl as described above.","title":"The processor must support the Intel bla bla bla"},{"location":"installation/INSTALL_MAC/#input-types-tensor2x1280xf32-and-tensorxf16-are-not-broadcast-compatible","text":"May appear when just starting to generate, e.g.: invoke> clouds Generating: 0 % | | 0 /1 [ 00 :00<?, ?it/s ] /Users/ [ ... ] /dev/stable-diffusion/ldm/modules/embedding_manager.py:152: UserWarning: The operator 'aten::nonzero' is not currently supported on the MPS backend and will fall back to run on the CPU. This may have performance implications. ( Triggered internally at /Users/runner/work/_temp/anaconda/conda-bld/pytorch_1662016319283/work/aten/src/ATen/mps/MPSFallback.mm:11. ) placeholder_idx = torch.where ( loc ( \"mps_add\" ( \"(mpsFileLoc): /AppleInternal/Library/BuildRoots/20d6c351-ee94-11ec-bcaf-7247572f23b4/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShadersGraph/mpsgraph/MetalPerformanceShadersGraph/Core/Files/MPSGraphUtilities.mm\" :219:0 )) : error: input types 'tensor<2x1280xf32>' and 'tensor<*xf16>' are not broadcast compatible LLVM ERROR: Failed to infer result type ( s ) . Abort trap: 6 /Users/ [ ... ] /opt/anaconda3/envs/invokeai/lib/python3.9/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 1 leaked semaphore objects to clean up at shutdown warnings.warn ( 'resource_tracker: There appear to be %d '","title":"input types 'tensor&lt;2x1280xf32&gt;' and 'tensor&lt;*xf16&gt;' are not broadcast compatible"},{"location":"installation/INSTALL_WINDOWS/","text":"Windows # Notebook install (semi-automated) # We have a Jupyter notebook with cell-by-cell installation steps. It will download the code in this repo as one of the steps, so instead of cloning this repo, simply download the notebook from the link above and load it up in VSCode (with the appropriate extensions installed)/Jupyter/JupyterLab and start running the cells one-by-one. Note that you will need NVIDIA drivers, Python 3.10, and Git installed beforehand - simplified step-by-step instructions are available in the wiki (you'll only need steps 1, 2, & 3 ). Manual Install # pip # See Easy-peasy Windows install in the wiki Conda # Install Anaconda3 (miniconda3 version) from here Install Git from here Launch Anaconda from the Windows Start menu. This will bring up a command window. Type all the remaining commands in this window. Run the command: git clone https://github.com/invoke-ai/InvokeAI.git This will create stable-diffusion folder where you will follow the rest of the steps. Enter the newly-created InvokeAI folder. From this step forward make sure that you are working in the InvokeAI directory! cd InvokeAI Run the following two commands: step 6a conda env create step 6b conda activate invokeai This will install all python requirements and activate the \"invokeai\" environment which sets PATH and other environment variables properly. Note that the long form of the first command is conda env create -f environment.yml . If the environment file isn't specified, conda will default to environment.yml . You will need to provide the -f option if you wish to load a different environment file at any point. Load the big stable diffusion weights files and a couple of smaller machine-learning models: python scripts/preload_models.py Note This script will lead you through the process of creating an account on Hugging Face, accepting the terms and conditions of the Stable Diffusion model license, and obtaining an access token for downloading. It will then download and install the weights files for you. Please look here for a manual process for doing the same thing. Start generating images! IMPORTANT Make sure that the conda environment is activated, which should create (invokeai) in front of your prompt! CLI local Webserver Public Webserver python scripts/invoke.py python scripts/invoke.py --web python scripts/invoke.py --web --host 0 .0.0.0 To use an alternative model you may invoke the !switch command in the CLI, or pass --model <model_name> during invoke.py launch for either the CLI or the Web UI. See Command Line Client . The model names are defined in configs/models.yaml . Subsequently, to relaunch the script, first activate the Anaconda command window (step 3),enter the InvokeAI directory (step 5, cd \\path\\to\\InvokeAI ), run conda activate invokeai (step 6b), and then launch the invoke script (step 9). Tildebyte has written an alternative \"Easy peasy Windows install\" which uses the Windows Powershell and pew. If you are having trouble with Anaconda on Windows, give this a try (or try it first!) This distribution is changing rapidly. If you used the git clone method (step 5) to download the stable-diffusion directory, then to update to the latest and greatest version, launch the Anaconda window, enter stable-diffusion , and type: git pull conda env update This will bring your local copy into sync with the remote one.","title":"Manual Installation, Windows"},{"location":"installation/INSTALL_WINDOWS/#windows","text":"","title":" Windows"},{"location":"installation/INSTALL_WINDOWS/#notebook-install-semi-automated","text":"We have a Jupyter notebook with cell-by-cell installation steps. It will download the code in this repo as one of the steps, so instead of cloning this repo, simply download the notebook from the link above and load it up in VSCode (with the appropriate extensions installed)/Jupyter/JupyterLab and start running the cells one-by-one. Note that you will need NVIDIA drivers, Python 3.10, and Git installed beforehand - simplified step-by-step instructions are available in the wiki (you'll only need steps 1, 2, & 3 ).","title":"Notebook install (semi-automated)"},{"location":"installation/INSTALL_WINDOWS/#manual-install","text":"","title":"Manual Install"},{"location":"installation/INSTALL_WINDOWS/#pip","text":"See Easy-peasy Windows install in the wiki","title":"pip"},{"location":"installation/INSTALL_WINDOWS/#conda","text":"Install Anaconda3 (miniconda3 version) from here Install Git from here Launch Anaconda from the Windows Start menu. This will bring up a command window. Type all the remaining commands in this window. Run the command: git clone https://github.com/invoke-ai/InvokeAI.git This will create stable-diffusion folder where you will follow the rest of the steps. Enter the newly-created InvokeAI folder. From this step forward make sure that you are working in the InvokeAI directory! cd InvokeAI Run the following two commands: step 6a conda env create step 6b conda activate invokeai This will install all python requirements and activate the \"invokeai\" environment which sets PATH and other environment variables properly. Note that the long form of the first command is conda env create -f environment.yml . If the environment file isn't specified, conda will default to environment.yml . You will need to provide the -f option if you wish to load a different environment file at any point. Load the big stable diffusion weights files and a couple of smaller machine-learning models: python scripts/preload_models.py Note This script will lead you through the process of creating an account on Hugging Face, accepting the terms and conditions of the Stable Diffusion model license, and obtaining an access token for downloading. It will then download and install the weights files for you. Please look here for a manual process for doing the same thing. Start generating images! IMPORTANT Make sure that the conda environment is activated, which should create (invokeai) in front of your prompt! CLI local Webserver Public Webserver python scripts/invoke.py python scripts/invoke.py --web python scripts/invoke.py --web --host 0 .0.0.0 To use an alternative model you may invoke the !switch command in the CLI, or pass --model <model_name> during invoke.py launch for either the CLI or the Web UI. See Command Line Client . The model names are defined in configs/models.yaml . Subsequently, to relaunch the script, first activate the Anaconda command window (step 3),enter the InvokeAI directory (step 5, cd \\path\\to\\InvokeAI ), run conda activate invokeai (step 6b), and then launch the invoke script (step 9). Tildebyte has written an alternative \"Easy peasy Windows install\" which uses the Windows Powershell and pew. If you are having trouble with Anaconda on Windows, give this a try (or try it first!) This distribution is changing rapidly. If you used the git clone method (step 5) to download the stable-diffusion directory, then to update to the latest and greatest version, launch the Anaconda window, enter stable-diffusion , and type: git pull conda env update This will bring your local copy into sync with the remote one.","title":"Conda"},{"location":"other/CONTRIBUTORS/","text":"Contributors # The list of all the amazing people who have contributed to the various features that you get to experience in this fork. We thank them for all of their time and hard work. Original Author: # Lincoln D. Stein Contributions by: # Sean McLellan Kevin Gibbons Tesseract Cat blessedcoolant David Ford yunsaki James Reynolds David Wager Jason Toffaletti tildebyte Cragin Godley BlueAmulet Benjamin Warner Cora Johnson-Roberson veprogames JigenD Niek van der Maas Henry van Megen H\u00e5vard Gulldahl greentext2 Simon Vans-Colina Gabriel Rotbart Eric Khun Brent Ozar nderscore Mikhail Tishin Tom Elovi Spruce spezialspezial Yosuke Shinya Andy Pilate Muhammad Usama Arturo Mendivil Paul Sajna Samuel Husso nicolai256 Mihai Any Winter Doggettx Matthias Wild Kyle Schouviller rabidcopy Dominic Letz Dmitry T. Kent Keirsey psychedelicious damian0815 Original CompVis Authors: # Robin Rombach Patrick von Platen ablattmann Patrick Esser owenvincent apolinario Charles Packer If you have contributed and don't see your name on the list of contributors, please let one of the collaborators know about the omission, or feel free to make a pull request.","title":"Contributors"},{"location":"other/CONTRIBUTORS/#contributors","text":"The list of all the amazing people who have contributed to the various features that you get to experience in this fork. We thank them for all of their time and hard work.","title":" Contributors"},{"location":"other/CONTRIBUTORS/#original-author","text":"Lincoln D. Stein","title":"Original Author:"},{"location":"other/CONTRIBUTORS/#contributions-by","text":"Sean McLellan Kevin Gibbons Tesseract Cat blessedcoolant David Ford yunsaki James Reynolds David Wager Jason Toffaletti tildebyte Cragin Godley BlueAmulet Benjamin Warner Cora Johnson-Roberson veprogames JigenD Niek van der Maas Henry van Megen H\u00e5vard Gulldahl greentext2 Simon Vans-Colina Gabriel Rotbart Eric Khun Brent Ozar nderscore Mikhail Tishin Tom Elovi Spruce spezialspezial Yosuke Shinya Andy Pilate Muhammad Usama Arturo Mendivil Paul Sajna Samuel Husso nicolai256 Mihai Any Winter Doggettx Matthias Wild Kyle Schouviller rabidcopy Dominic Letz Dmitry T. Kent Keirsey psychedelicious damian0815","title":"Contributions by:"},{"location":"other/CONTRIBUTORS/#original-compvis-authors","text":"Robin Rombach Patrick von Platen ablattmann Patrick Esser owenvincent apolinario Charles Packer If you have contributed and don't see your name on the list of contributors, please let one of the collaborators know about the omission, or feel free to make a pull request.","title":"Original CompVis Authors:"},{"location":"other/README-CompViz/","text":"README from CompViz/stable-diffusion # Stable Diffusion was made possible thanks to a collaboration with Stability AI and Runway and builds upon our previous work: High-Resolution Image Synthesis with Latent Diffusion Models Robin Rombach *, Andreas Blattmann *, Dominik Lorenz \\, Patrick Esser , Bj\u00f6rn Ommer CVPR '22 Oral # which is available on GitHub . PDF at arXiv . Please also visit our Project page . Stable Diffusion is a latent text-to-image diffusion model. Thanks to a generous compute donation from Stability AI and support from LAION , we were able to train a Latent Diffusion Model on 512x512 images from a subset of the LAION-5B database. Similar to Google's Imagen , this model uses a frozen CLIP ViT-L/14 text encoder to condition the model on text prompts. With its 860M UNet and 123M text encoder, the model is relatively lightweight and runs on a GPU with at least 10GB VRAM. See this section below and the model card . Requirements # A suitable conda environment named ldm can be created and activated with: conda env create conda activate ldm Note that the first line may be abbreviated conda env create , since conda will look for environment.yml by default. You can also update an existing latent diffusion environment by running conda install pytorch torchvision -c pytorch pip install transformers == 4 .19.2 pip install -e . Stable Diffusion v1 # Stable Diffusion v1 refers to a specific configuration of the model architecture that uses a downsampling-factor 8 autoencoder with an 860M UNet and CLIP ViT-L/14 text encoder for the diffusion model. The model was pretrained on 256x256 images and then finetuned on 512x512 images. *Note: Stable Diffusion v1 is a general text-to-image diffusion model and therefore mirrors biases and (mis-)conceptions that are present in its training data. Details on the training procedure and data, as well as the intended use of the model can be found in the corresponding model card . Research into the safe deployment of general text-to-image models is an ongoing effort. To prevent misuse and harm, we currently provide access to the checkpoints only for academic research purposes upon request . This is an experiment in safe and community-driven publication of a capable and general text-to-image model. We are working on a public release with a more permissive license that also incorporates ethical considerations.* Request access to Stable Diffusion v1 checkpoints for academic research Weights # We currently provide three checkpoints, sd-v1-1.ckpt , sd-v1-2.ckpt and sd-v1-3.ckpt , which were trained as follows, sd-v1-1.ckpt : 237k steps at resolution 256x256 on laion2B-en . 194k steps at resolution 512x512 on laion-high-resolution (170M examples from LAION-5B with resolution >= 1024x1024 ). sd-v1-2.ckpt : Resumed from sd-v1-1.ckpt . 515k steps at resolution 512x512 on \"laion-improved-aesthetics\" (a subset of laion2B-en, filtered to images with an original size >= 512x512 , estimated aesthetics score > 5.0 , and an estimated watermark probability < 0.5 . The watermark estimate is from the LAION-5B metadata, the aesthetics score is estimated using an improved aesthetics estimator ). sd-v1-3.ckpt : Resumed from sd-v1-2.ckpt . 195k steps at resolution 512x512 on \"laion-improved-aesthetics\" and 10\\% dropping of the text-conditioning to improve classifier-free guidance sampling . Evaluations with different classifier-free guidance scales (1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0) and 50 PLMS sampling steps show the relative improvements of the checkpoints: Text-to-Image with Stable Diffusion # Stable Diffusion is a latent diffusion model conditioned on the (non-pooled) text embeddings of a CLIP ViT-L/14 text encoder. Sampling Script # After obtaining the weights , link them mkdir -p models/ldm/stable-diffusion-v1/ ln -s <path/to/model.ckpt> models/ldm/stable-diffusion-v1/model.ckpt and sample with python scripts/txt2img.py --prompt \"a photograph of an astronaut riding a horse\" --plms By default, this uses a guidance scale of --scale 7.5 , Katherine Crowson's implementation of the PLMS sampler, and renders images of size 512x512 (which it was trained on) in 50 steps. All supported arguments are listed below (type python scripts/txt2img.py --help ). usage: txt2img.py [-h] [--prompt [PROMPT]] [--outdir [OUTDIR]] [--skip_grid] [--skip_save] [--ddim_steps DDIM_STEPS] [--plms] [--laion400m] [--fixed_code] [--ddim_eta DDIM_ETA] [--n_iter N_ITER] [--H H] [--W W] [--C C] [--f F] [--n_samples N_SAMPLES] [--n_rows N_ROWS] [--scale SCALE] [--from-file FROM_FILE] [--config CONFIG] [--ckpt CKPT] [--seed SEED] [--precision {full,autocast}] optional arguments: -h, --help show this help message and exit --prompt [PROMPT] the prompt to render --outdir [OUTDIR] dir to write results to --skip_grid do not save a grid, only individual samples. Helpful when evaluating lots of samples --skip_save do not save individual samples. For speed measurements. --ddim_steps DDIM_STEPS number of ddim sampling steps --plms use plms sampling --laion400m uses the LAION400M model --fixed_code if enabled, uses the same starting code across samples --ddim_eta DDIM_ETA ddim eta (eta=0.0 corresponds to deterministic sampling --n_iter N_ITER sample this often --H H image height, in pixel space --W W image width, in pixel space --C C latent channels --f F downsampling factor --n_samples N_SAMPLES how many samples to produce for each given prompt. A.k.a. batch size (note that the seeds for each image in the batch will be unavailable) --n_rows N_ROWS rows in the grid (default: n_samples) --scale SCALE unconditional guidance scale: eps = eps(x, empty) + scale * (eps(x, cond) - eps(x, empty)) --from-file FROM_FILE if specified, load prompts from this file --config CONFIG path to config which constructs model --ckpt CKPT path to checkpoint of model --seed SEED the seed (for reproducible sampling) --precision {full,autocast} evaluate at this precision Note: The inference config for all v1 versions is designed to be used with EMA-only checkpoints. For this reason use_ema=False is set in the configuration, otherwise the code will try to switch from non-EMA to EMA weights. If you want to examine the effect of EMA vs no EMA, we provide \"full\" checkpoints which contain both types of weights. For these, use_ema=False will load and use the non-EMA weights. Diffusers Integration # Another way to download and sample Stable Diffusion is by using the diffusers library # make sure you're logged in with `huggingface-cli login` from torch import autocast from diffusers import StableDiffusionPipeline , LMSDiscreteScheduler pipe = StableDiffusionPipeline . from_pretrained ( \"CompVis/stable-diffusion-v1-3-diffusers\" , use_auth_token = True ) prompt = \"a photo of an astronaut riding a horse on mars\" with autocast ( \"cuda\" ): image = pipe ( prompt )[ \"sample\" ][ 0 ] image . save ( \"astronaut_rides_horse.png\" ) Image Modification with Stable Diffusion # By using a diffusion-denoising mechanism as first proposed by SDEdit , the model can be used for different tasks such as text-guided image-to-image translation and upscaling. Similar to the txt2img sampling script, we provide a script to perform image modification with Stable Diffusion. The following describes an example where a rough sketch made in Pinta is converted into a detailed artwork. python scripts/img2img.py --prompt \"A fantasy landscape, trending on artstation\" --init-img <path-to-img.jpg> --strength 0.8 Here, strength is a value between 0.0 and 1.0, that controls the amount of noise that is added to the input image. Values that approach 1.0 allow for lots of variations but will also produce images that are not semantically consistent with the input. See the following example. Input Outputs This procedure can, for example, also be used to upscale samples from the base model. Comments # Our codebase for the diffusion models builds heavily on OpenAI's ADM codebase and https://github.com/lucidrains/denoising-diffusion-pytorch . Thanks for open-sourcing! The implementation of the transformer encoder is from x-transformers by lucidrains . BibTeX # @misc{rombach2021highresolution, title={High-Resolution Image Synthesis with Latent Diffusion Models}, author={Robin Rombach and Andreas Blattmann and Dominik Lorenz and Patrick Esser and Bj\u00f6rn Ommer}, year={2021}, eprint={2112.10752}, archivePrefix={arXiv}, primaryClass={cs.CV} }","title":"CompViz-Readme"},{"location":"other/README-CompViz/#readme-from-compvizstable-diffusion","text":"Stable Diffusion was made possible thanks to a collaboration with Stability AI and Runway and builds upon our previous work: High-Resolution Image Synthesis with Latent Diffusion Models Robin Rombach *, Andreas Blattmann *, Dominik Lorenz \\, Patrick Esser , Bj\u00f6rn Ommer","title":"README from CompViz/stable-diffusion"},{"location":"other/README-CompViz/#cvpr-22-oral","text":"which is available on GitHub . PDF at arXiv . Please also visit our Project page . Stable Diffusion is a latent text-to-image diffusion model. Thanks to a generous compute donation from Stability AI and support from LAION , we were able to train a Latent Diffusion Model on 512x512 images from a subset of the LAION-5B database. Similar to Google's Imagen , this model uses a frozen CLIP ViT-L/14 text encoder to condition the model on text prompts. With its 860M UNet and 123M text encoder, the model is relatively lightweight and runs on a GPU with at least 10GB VRAM. See this section below and the model card .","title":"CVPR '22 Oral"},{"location":"other/README-CompViz/#requirements","text":"A suitable conda environment named ldm can be created and activated with: conda env create conda activate ldm Note that the first line may be abbreviated conda env create , since conda will look for environment.yml by default. You can also update an existing latent diffusion environment by running conda install pytorch torchvision -c pytorch pip install transformers == 4 .19.2 pip install -e .","title":"Requirements"},{"location":"other/README-CompViz/#stable-diffusion-v1","text":"Stable Diffusion v1 refers to a specific configuration of the model architecture that uses a downsampling-factor 8 autoencoder with an 860M UNet and CLIP ViT-L/14 text encoder for the diffusion model. The model was pretrained on 256x256 images and then finetuned on 512x512 images. *Note: Stable Diffusion v1 is a general text-to-image diffusion model and therefore mirrors biases and (mis-)conceptions that are present in its training data. Details on the training procedure and data, as well as the intended use of the model can be found in the corresponding model card . Research into the safe deployment of general text-to-image models is an ongoing effort. To prevent misuse and harm, we currently provide access to the checkpoints only for academic research purposes upon request . This is an experiment in safe and community-driven publication of a capable and general text-to-image model. We are working on a public release with a more permissive license that also incorporates ethical considerations.* Request access to Stable Diffusion v1 checkpoints for academic research","title":"Stable Diffusion v1"},{"location":"other/README-CompViz/#weights","text":"We currently provide three checkpoints, sd-v1-1.ckpt , sd-v1-2.ckpt and sd-v1-3.ckpt , which were trained as follows, sd-v1-1.ckpt : 237k steps at resolution 256x256 on laion2B-en . 194k steps at resolution 512x512 on laion-high-resolution (170M examples from LAION-5B with resolution >= 1024x1024 ). sd-v1-2.ckpt : Resumed from sd-v1-1.ckpt . 515k steps at resolution 512x512 on \"laion-improved-aesthetics\" (a subset of laion2B-en, filtered to images with an original size >= 512x512 , estimated aesthetics score > 5.0 , and an estimated watermark probability < 0.5 . The watermark estimate is from the LAION-5B metadata, the aesthetics score is estimated using an improved aesthetics estimator ). sd-v1-3.ckpt : Resumed from sd-v1-2.ckpt . 195k steps at resolution 512x512 on \"laion-improved-aesthetics\" and 10\\% dropping of the text-conditioning to improve classifier-free guidance sampling . Evaluations with different classifier-free guidance scales (1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0) and 50 PLMS sampling steps show the relative improvements of the checkpoints:","title":"Weights"},{"location":"other/README-CompViz/#text-to-image-with-stable-diffusion","text":"Stable Diffusion is a latent diffusion model conditioned on the (non-pooled) text embeddings of a CLIP ViT-L/14 text encoder.","title":"Text-to-Image with Stable Diffusion"},{"location":"other/README-CompViz/#sampling-script","text":"After obtaining the weights , link them mkdir -p models/ldm/stable-diffusion-v1/ ln -s <path/to/model.ckpt> models/ldm/stable-diffusion-v1/model.ckpt and sample with python scripts/txt2img.py --prompt \"a photograph of an astronaut riding a horse\" --plms By default, this uses a guidance scale of --scale 7.5 , Katherine Crowson's implementation of the PLMS sampler, and renders images of size 512x512 (which it was trained on) in 50 steps. All supported arguments are listed below (type python scripts/txt2img.py --help ). usage: txt2img.py [-h] [--prompt [PROMPT]] [--outdir [OUTDIR]] [--skip_grid] [--skip_save] [--ddim_steps DDIM_STEPS] [--plms] [--laion400m] [--fixed_code] [--ddim_eta DDIM_ETA] [--n_iter N_ITER] [--H H] [--W W] [--C C] [--f F] [--n_samples N_SAMPLES] [--n_rows N_ROWS] [--scale SCALE] [--from-file FROM_FILE] [--config CONFIG] [--ckpt CKPT] [--seed SEED] [--precision {full,autocast}] optional arguments: -h, --help show this help message and exit --prompt [PROMPT] the prompt to render --outdir [OUTDIR] dir to write results to --skip_grid do not save a grid, only individual samples. Helpful when evaluating lots of samples --skip_save do not save individual samples. For speed measurements. --ddim_steps DDIM_STEPS number of ddim sampling steps --plms use plms sampling --laion400m uses the LAION400M model --fixed_code if enabled, uses the same starting code across samples --ddim_eta DDIM_ETA ddim eta (eta=0.0 corresponds to deterministic sampling --n_iter N_ITER sample this often --H H image height, in pixel space --W W image width, in pixel space --C C latent channels --f F downsampling factor --n_samples N_SAMPLES how many samples to produce for each given prompt. A.k.a. batch size (note that the seeds for each image in the batch will be unavailable) --n_rows N_ROWS rows in the grid (default: n_samples) --scale SCALE unconditional guidance scale: eps = eps(x, empty) + scale * (eps(x, cond) - eps(x, empty)) --from-file FROM_FILE if specified, load prompts from this file --config CONFIG path to config which constructs model --ckpt CKPT path to checkpoint of model --seed SEED the seed (for reproducible sampling) --precision {full,autocast} evaluate at this precision Note: The inference config for all v1 versions is designed to be used with EMA-only checkpoints. For this reason use_ema=False is set in the configuration, otherwise the code will try to switch from non-EMA to EMA weights. If you want to examine the effect of EMA vs no EMA, we provide \"full\" checkpoints which contain both types of weights. For these, use_ema=False will load and use the non-EMA weights.","title":"Sampling Script"},{"location":"other/README-CompViz/#diffusers-integration","text":"Another way to download and sample Stable Diffusion is by using the diffusers library # make sure you're logged in with `huggingface-cli login` from torch import autocast from diffusers import StableDiffusionPipeline , LMSDiscreteScheduler pipe = StableDiffusionPipeline . from_pretrained ( \"CompVis/stable-diffusion-v1-3-diffusers\" , use_auth_token = True ) prompt = \"a photo of an astronaut riding a horse on mars\" with autocast ( \"cuda\" ): image = pipe ( prompt )[ \"sample\" ][ 0 ] image . save ( \"astronaut_rides_horse.png\" )","title":"Diffusers Integration"},{"location":"other/README-CompViz/#image-modification-with-stable-diffusion","text":"By using a diffusion-denoising mechanism as first proposed by SDEdit , the model can be used for different tasks such as text-guided image-to-image translation and upscaling. Similar to the txt2img sampling script, we provide a script to perform image modification with Stable Diffusion. The following describes an example where a rough sketch made in Pinta is converted into a detailed artwork. python scripts/img2img.py --prompt \"A fantasy landscape, trending on artstation\" --init-img <path-to-img.jpg> --strength 0.8 Here, strength is a value between 0.0 and 1.0, that controls the amount of noise that is added to the input image. Values that approach 1.0 allow for lots of variations but will also produce images that are not semantically consistent with the input. See the following example. Input Outputs This procedure can, for example, also be used to upscale samples from the base model.","title":"Image Modification with Stable Diffusion"},{"location":"other/README-CompViz/#comments","text":"Our codebase for the diffusion models builds heavily on OpenAI's ADM codebase and https://github.com/lucidrains/denoising-diffusion-pytorch . Thanks for open-sourcing! The implementation of the transformer encoder is from x-transformers by lucidrains .","title":"Comments"},{"location":"other/README-CompViz/#bibtex","text":"@misc{rombach2021highresolution, title={High-Resolution Image Synthesis with Latent Diffusion Models}, author={Robin Rombach and Andreas Blattmann and Dominik Lorenz and Patrick Esser and Bj\u00f6rn Ommer}, year={2021}, eprint={2112.10752}, archivePrefix={arXiv}, primaryClass={cs.CV} }","title":"BibTeX"}]}